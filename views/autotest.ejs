<!DOCTYPE html>

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <title>Autosuggest Test</title>
        <link rel="stylesheet" href="/css/reset.css" />
        <link rel="stylesheet" href="/css/960.css" />
        <link rel="stylesheet" href="/css/text.css" />
        <link rel="stylesheet" href="/css/mealdisp.css" />
        <link rel="stylesheet" href="/css/autosuggest.css" />
    </head>

    <body>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places&sensor=true"></script>
    <script type="text/javascript" src="autosuggest.js"></script>
    <style>
    </style>

    <script type="text/javascript">

        function AutoProvider() {
            this.autoserv = new google.maps.places.AutocompleteService();
        }

        AutoProvider.prototype.requestSuggestions = function (oAutoSuggestControl) {
            var enorth = new google.maps.LatLng(40.876449, -73.325071);            

            var arequest = {
                input: oAutoSuggestControl.userText,
                location: enorth,
                radius: 3000,
                types: ['establishment']
            };

            this.autoserv.getPlacePredictions(arequest, function(predictions, status) {
                if(status != google.maps.places.PlacesServiceStatus.OK) {
                    if( status != 'ZERO_RESULTS' ) {
                        console.log('got weird status from getPlacePredictions: ' + status);
                    }
                }

                /*
                 * Splice-in my autosuggestions here.  
                 *
                 * Actually, this should be two asynchronous calls - the last 
                 * one finished should call autosuggest with 'predictions'.  
                 * Each predictions element should have a 'description' and 
                 *
                 * matched_substrings[0].offset 
                 * matched_substrings[0].length
                 *
                 * matched_substrings is an array, but I only care about the 
                 * 0'th element.
                 *
                 * Both the google-request and the local matching code should
                 * run asynchronously (and both with timeouts somehow!!).  The
                 * last finished (or the last timed out) should call the 
                 * 'autosuggest' routine.
                 *
                 * After the box is filled, all of the processing will be done
                 * via an ajax request on the backend.  The only difference 
                 * between a google-suggestion and a local-suggestion is that
                 * the local-suggestion will have the restaurantid directly,
                 * whereas the google-suggestion will have to hash into it.
                 *
                 * My autosuggestions: I could go one of two ways: 
                 * Simple: these could only contain 'local' restaurants.
                 * Difficult: these could ALSO contain the last 100 'global' 
                 * restaurants that the user has visited.  If it does, then
                 * I'll have to search for dups in the google-list and 
                 * splice them out.
                 *
                 * On the server side, the list of restaurant ids could be 
                 * precomputed.
                 */

                oAutoSuggestControl.autosuggest(predictions);

            });
        }

        function initialize() {

            var textbox = document.getElementById('autotest');
            var autoProv = new AutoProvider();
            var autoControl = new AutoSuggestControl(textbox, autoProv);

        }

        google.maps.event.addDomListener(window, 'load', initialize);

    </script>

    <div id='autodiv'>
        <input type="text" name="autotest" id="autotest" autocomplete="off" size="80">
    </div>

    </body>
</html>
