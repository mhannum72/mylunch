<!DOCTYPE html>
        

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <title>Edit Meals</title> <link rel="stylesheet" href="/css/reset.css" />
        <link rel="stylesheet" href="/css/960.css" />
        <link rel="stylesheet" href="/css/text.css" />
        <link rel="stylesheet" href="/css/mealdisp.css" />
        <link rel="stylesheet" href="/css/datePicker.css" />
    </head>
    <body>
        <center>
            <div class='picturegridDiv' id='picturegridDiv' name='picturegridDiv'></div> 
            <div class='gridNavDiv' id='gridNavDiv'></div>
            <div id="hiddenElements" class="hiddenElements" name="hiddenElements"></div>
        </center>
        <div id='enddiv'></div>
    <script src="/jquery.js"></script>
    <script src="/date.js"></script>
    <script src="/jquery.datePicker.js"></script>
    <script src="/findpicidx.js"></script>
    <script src="/showattributes.js"></script>
    <script src="/gridnav.js"></script>
    <script src="/picturegrid.js"></script>
    <script src="/carousel.js"></script>
    <script type="text/javascript">

// Global minfo array holds the initial mealset
var minfo = [];

// Height of my nomeal picture.  This is dumb: it should be a tunable within the picturegrid & carousel
var NOMEALHEIGHT = 256;

// Create string format for dates
Date.prototype.asMyString = function() {
    var monthNames = [ "January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December" ];
    return monthNames[this.getMonth()] + ' ' + this.getDate() + ', ' + this.getFullYear();
}

// Create string format for griddates
Date.prototype.asSlashString = function() {
    return (this.getMonth() + 1) + '/' + this.getDate() + '/' + this.getFullYear();
}



// TODO - clean this up
var MEALINFO = (function() {

    var NOMEAL = 0;
    var BREAKFAST = 1;
    var LUNCH = 2;
    var DINNER = 3;
    var SNACK = 4;
    var OTHER = 5;
    var MAXMEAL = 99;

    // Return constant given a string
    function mealToConst(meal)
    {
        if(meal == undefined || !meal)
        {
            return NOMEAL;
        }
        if(meal == "breakfast")
        {
            return BREAKFAST;
        }
        if(meal == "lunch")
        {
            return LUNCH;
        }
        if(meal == "dinner")
        {
            return DINNER;
        }
        if(meal == "snack")
        {
            return SNACK;
        }
        if(meal == "other")
        {
            return OTHER;
        }
        throw new Error("Invalid mealConst: " + meal);
    }

    // Utility function
	function mealDateToDate(mealdate)
	{
	    var year = mealdate / 1000000; mealdate %= 1000000;
	    var month = mealdate /  10000; mealdate %=   10000;
	    var day  = mealdate /     100;
	    return new Date(year, month-1, day);
	}

    function dateToMealDate(date, mealconst)
    {
        return  (date.getFullYear()    * 1000000) +
                ((date.getMonth() + 1)   * 10000) +
                (date.getDate()            * 100) +
                (mealconst);
    }

    return {
        dateToMealDate  : dateToMealDate,
        mealDateToDate  : mealDateToDate,
        mealToConst     : mealToConst,
        NOMEAL          : NOMEAL,
        BREAKFAST       : BREAKFAST,
        LUNCH           : LUNCH,
        DINNER          : DINNER,
        SNACK           : SNACK,
        OTHER           : OTHER,
        MAXMEAL         : MAXMEAL
    };
}());

// Simple mealpage class
function mealpage(timestamp) {

    this.timestamp = timestamp;
    return this;

}

// jquery ready handler
$(document).ready(function() {

    $.ajaxSetup ({ cache: false });

    // This might eventually configure itself according to the initial
    // size of the user's screen.  The server side can't possibly know what
    // that is, so I have the server send enough information to draw the 
    // maximum screen.  This code sets the nextpage variable to the correct 
    // timestamp based on the number of meals drawn.
    var nextpage = null;

    var mcount = picturegrid.mealcount();

    if(minfo.length > mcount) {

        nextpage = new mealpage(minfo[mcount].timestamp);

    }

    // Display the navigation bar
    if(undefined != gridnav)
        gridnav.displaynav();

    // Display the picture grid
    if(undefined != picturegrid)
        picturegrid.displaygrid(minfo, null, nextpage, 'forwards');


    /* Not yet - I have grand plans here.  Eventually I might allow
     * the user to enter in the restaurant for a given meal.  This would
     * be an autocomplete toolbar which takes the user's current location
     * into account. */

    /*
    if(navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            function(position) {
                console.log('updating position');
                $.ajax({
                    url: '/updateposition',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(
                        {
                            username: meal.username,
                            position: position
                        }),
                    dataType: 'json',

                    complete: function(resp, astat){
                    }
                });
            }, 
            function(error) {}, 
            { enableHighAccuracy: true }
        );
    }
    */
});

// Initialize showattributes object
showattributes.init(
        findpicidx.search, 
        picturecarousel.create,
        { 
            fadeheightelement   : $('#enddiv')[0],
            hiddenframe         : $('#hiddenElements')[0],
        }
);

// Initialize grid
picturegrid.init(
        document.getElementById('picturegridDiv'), 
        "<%= user.username %>",
        new mealpage(<%= prevts != undefined ? prevts : 0 %>), 
        new mealpage(<%= nextts != undefined ? nextts : 0 %>),
        { 
            nextdiv             : gridnav.nextpage,
            prevdiv             : gridnav.prevpage,
            nxpvcallback        : gridnav.nextprevcallback,
            anchorclickfn       : showattributes.show,
            findpicidx          : findpicidx.search,
            modalisup           : showattributes.modalisshowing,
            nomealheight        : NOMEALHEIGHT,
            titletrace          : true,
            picturecounttrace   : true,
            animatenextprev     : true,
            mealsperrow         : 3,
            rowsperpage         : 2,
            deletebehavior      : "shiftmeals",
            shrinkimgenable     : true,
            shrinkfadeenable    : false,
            shrinkboxenable     : true,
            shrinkspeed         : 1000
        }
);

// Simple picture icon class
function iconinfo(name, width, height, attr) {
    this.name = name;
    this.width = width;
    this.height = height;
    this.position = attr && attr.hasOwnProperty("position") ? attr.position : null;
    this.imgfloat = attr && attr.hasOwnProperty("imgfloat") ? attr.imgfloat : null;
    return this;
}

// Initialize the gridnav object
gridnav.init(
        document.getElementById('gridNavDiv'),
        "<%= user.username %>",
        {
            gridnavwidth        : picturegrid.containerwidth(),
            modalisup           : showattributes.modalisshowing,
            hasnextpage         : true,
            hasprevpage         : true,
            hasnewmeal          : true,
            hasdatenav          : false,
            nextpageicon        : new iconinfo("images/rightarrow.png",     63, 100, { position : 'right', imgfloat : 'right' }),
            prevpageicon        : new iconinfo("images/leftarrow.png",      63, 100, { position : 'left', imgfloat : 'left' }),
            newmealicon         : new iconinfo("images/hamburger10.png",    112, 95),
            datenavicon         : new iconinfo("images/calendar.png",       107, 95)

            // TODO - define mouseover behavior
            //newmealicon         : new iconinfo("images/hamburger11.png",    87, 73)
            //newmealicon         : new iconinfo("images/hamburger4-3.png",    134, 95)
            //newmealicon         : new iconinfo("images/hamburger3.png",    143, 100)
            //nextpageicon        : new iconinfo("images/arrows.png", 25, 39, 'top right'),
            //prevpageicon        : new iconinfo("images/arrows.png", 25, 39, 'top left')
            //nextpageicon        : new iconinfo("images/nextpage.png", 128, 128),
            //prevpageicon        : new iconinfo("images/prevpage.png", 128, 128)
        }
);

// Another way to do this is to have a showattributes function that 
// takes a grid, and to have it use that grid directly.

// Set the newmeal anchor
picturegrid.setnewmealanchor(gridnav.getnewmealanchor());

// Set attributes callback for deleting a picture
showattributes.setgriddeletecallback(picturegrid.deletemealfromgrid);

// Set grid-display callback in modal
showattributes.setgriddisplaycallback(picturegrid.updatedisplaypicture);

// Set grid-update picture count
showattributes.setgridcountcallback(picturegrid.updatepicturecount);

// Set grid-update title callback
showattributes.setgridtitlecallback(picturegrid.updatetitle);

// Set grid update meal callback
showattributes.setgridmealcallback(picturegrid.updatemeal);

// Truncated meal class
function truncMeal(username, timestamp, keytimestamp, title, meal, 
        mealDate, picInfo) 
{
    this.username = username;
    this.timestamp = timestamp;
    this.keytimestamp = keytimestamp;
    this.title = title;
    this.meal = meal;
    this.mealDate = mealDate;
    if(!picInfo) {
        console.log('picinfo is null??');
    }
    this.picInfo = picInfo;
    return this;
}

// Truncated picinfo class
function truncPicInfo(timestamp, mitimestamp, width, height, 
        thumbwidth, thumbheight)
{
    this.timestamp = timestamp;
    this.mitimestamp = mitimestamp;
    this.width = width;
    this.height = height;
    this.thumbwidth = thumbwidth;
    this.thumbheight = thumbheight;
    return this;
}

// Put embedded js which expands to more than one line at the end so
// that browser line-numbers match up with whats in the editor

// Initial mealset
<% 
if( mealinfo && mealinfo.length > 0 ) { 
    for(var i = 0 ; i < mealinfo.length ; i++) {
        var meal = mealinfo[i];

%>
var pinfo<%= i %> = [];
<%

    if(meal.picInfo && meal.picInfo.length > 0) {
        for(var j = 0 ; j < meal.picInfo.length ; j++) {
            var pic = meal.picInfo[j];
%>

pinfo<%= i %> [ <%= j %> ] = new truncPicInfo(
        <%= pic.timestamp %>,
        <%= pic.mitimestamp %>,
        <%= pic.width %>,
        <%= pic.height %>,
        <%= pic.thumbwidth %>,
        <%= pic.thumbheight %>
        );
<%
        }
    }
%>

// Initial minfo array
minfo[<%= i %>] = new truncMeal(
        "<%= meal.username %>",
        <%= meal.timestamp %>,
        <%= meal.keytimestamp %>,
        "<%= meal.title %>",
        "<%= meal.meal %>",
        <%= meal.mealDate %>,
        pinfo<%= i %>);
<%
    }
}
%>

// Display the initial grid
// picturegrid.displaygrid(minfo, null, null, 'forwards');

        </script>
    </body>
</html>
