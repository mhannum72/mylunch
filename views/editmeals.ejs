<!DOCTYPE html>
<!-- 

TODO:
* Make the upper left-hand corner menu nicer
* Make the 'next' and 'previous' page commands SLIDE new pictures on rather than
  load an entirely new page.
* Upload should be a pop-up on this page rather than a full-fledged page.  If 
  you upload via a pop-up, the pictures could shift so that the newly uploaded 
  picture is shown first.

-->

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <title>Edit Meals</title> <link rel="stylesheet" href="/css/reset.css" />
        <link rel="stylesheet" href="/css/960.css" />
        <link rel="stylesheet" href="/css/text.css" />
        <link rel="stylesheet" href="/css/mealdisp.css" />
    </head>
    <body>


    <script src="/jquery.js"></script>
    <script src="/jquery.slider.js"></script>
    <script type="text/javascript">

        if(navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                function(position) {
                    console.log('updating position');
                    $.ajax({
                        url: '/updateposition',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(
                            {
                                username: meal.username,
                                position: position
                            }),
                        dataType: 'json',

                        // TODO: consolidated JSON response handling
                        complete: function(resp, astat){
                        }
                    });
                }, 
                function(error) {}, 
                { enableHighAccuracy: true }
            );
        }

        function global_editmeals(username, showMealsPerPage, nextmd, nextts, prevmd, prevts) {
            this.username = username;
            this.showMealsPerPage = showMealsPerPage;
            this.nextmd = nextmd;
            this.nextts = nextts;
            this.prevmd = prevmd;
            this.prevts = prevts;
            this.carousel_interval = 5000;
            this.carousel_fadetime = 0;
            return this;
        }

        var page_globals = global_editmeals(
                "<%= user.username %>", 
                <%= user.showMealsPerPage %>,
                <%= nextmd != undefined ? nextmd:0 %>,
                <%= nextts != undefined ? nextts:0 %>,
                <%= prevmd != undefined ? prevmd:0 %>,
                <%= prevts != undefined ? prevts:0 %>);

        function updateReviewAjax(meal, review) {
            $.ajax({
                url: '/savereview',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(
                    {
                        username: meal.username,
                        timestamp: picInfo.timestamp,
                        review: review
                    }),
                dataType: 'json',
                // TODO: consolidated JSON response handling
                complete: function(resp, astat){
                }
            });
        }

        function updateRatingAjax(meal, rating) {
            $.ajax({
                url: '/saverating',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(
                    {
                        username: meal.username,
                        timestamp: picInfo.timestamp,
                        rating: rating
                    }),
                dataType: 'json',
                complete: function(resp, astat) {
                }
            });
        }

        function updateMealAjax(meal, newMeal) {
            $.ajax({
                url: '/savemeal',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(
                    {
                        username: meal.username,
                        timestamp: picInfo.timestamp,
                        meal: newMeal
                    }),
                dataType: 'json',
                complete: function(resp, astat) {
                }
            });
        }

        var textAreaWidthCols = 65;

        $.browser.chrome = /chrome/.test(navigator.userAgent.toLowerCase());

        if($.browser.mozilla) {
            textAreaWidthCols = 65;
        }
        else if($.browser.chrome) {
            textAreaWidthCols = 57;
        }

        // TODO
        function toggleDeleteMode() {
        }

        // Create a new meal via an ajax request & then show it's attributes
        function newMealPopup() {
            $.getJSON('/newmeal',
                {
                    username: page_globals.username
                },
                function(response) {
                    if(response.message == undefined || response.message != "success") {
                        if("baduser" == response.message) {
                            window.location.replace("/signin");
                        }
                        else {
                            console.log("Response error is ", response.message);
                            window.location.replace("/");
                        }
                        return;
                    }

                    $('#pictureGridDiv').html('');
                    drawNextMeals(response.timestamp);
                    showAttributes(page_globals.username, response.timestamp, 0);
                });
        }

        function uploadMealPopup(mealts, callback) {

            var hiddenElements = $('#hiddenElements');

            hiddenElements.empty();

            var hiddenIFrame = $(document.createElement('iframe'))
                .attr('style', 'width:0px;height:0px;border:0px;')
                .attr('name', 'hiddenIFrame')
                .attr('id', 'hiddenIFrame');

            var uploadForm = $(document.createElement('form'))
                .attr('id', 'uploadForm')
                .attr('name', 'uploadForm')
                .attr('method', 'post')
                .attr('enctype', 'multipart/form-data')
                .attr('action', '/editmealsupload')
                .attr('target', 'hiddenIFrame');

            uploadForm.appendTo(hiddenIFrame);

            // Wait for the html of the hidden iframe to change: tells you that
            // the upload was successful.
            var fileUpload = $(document.createElement('input'))
                .attr('type', 'file')
                .attr('name', 'inputUpload')
                .attr('id', 'inputUpload');

            // pass the userid.
            var userId = $(document.createElement('input'))
                .attr('type', 'hidden')
                .attr('name', 'username')
                .attr('id', 'username')
                .val(page_globals.username);

            // Send the timestamp of the corresponding meal
            var mealTimestamp = $(document.createElement('input'))
                .attr('type', 'hidden')
                .attr('name', 'mealInfo')
                .attr('id', 'mealInfo')
                .val(mealts);

            hiddenIFrame.appendTo(hiddenElements);

            // TODO - this could be slow.. maybe i could show a popup saying that things are uploading?
            function checkUploaded() {

                var hiddenIFrame = $('#hiddenIFrame');
                var bodyText = hiddenIFrame.contents().find('body').html();
                var regex = /^SUCCESS [0-9]+ [0-9]+$/;

                // Put a reasonable hard-timeout here.  Uploading seems to be wanky - 
                // if the timeout expires, reload the 'main' page with a special
                // tag that says 'edit the first picture if it's greater than the 
                // first picture I've ever seen (pass that in the request).  Otherwise, 
                // print an error message.
                if(null == bodyText || bodyText == "") {
                    console.log('checkUploaded bodyText is null - resetting timeout');
                    setTimeout(checkUploaded, 1000);
                    return;
                }

                // Success case 
                if(regex.test(bodyText)) {

                    // Split on the spaces
                    var ar = bodyText.split(" ");

                    // Retrieve picture timestamp
                    var picts = parseInt(ar[1], 10);

                    // Retrieve picture height
                    var height = parseInt(ar[2], 10);

                    // Create minimal picinfo
                    var pinfo = { 'timestamp' : picts, 'height': height };

                    // Debug message
                    console.log('checkUploaded timestamp is ' + picts);
                    console.log('checkUploaded height is ' + height);

                    // Add to the picture-mobile
                    callback(null, pinfo);
                    return;
                }
                else {
                    // Redirect to the homepage on error
                    console.log('Error from server: ' + bodyText);
                    window.location.replace("/");
                }
            }

            fileUpload.change(function() {
                uploadForm.submit();
                setTimeout(checkUploaded, 1000);
            });

            fileUpload.appendTo(uploadForm);
            userId.appendTo(uploadForm);
            mealTimestamp.appendTo(uploadForm);

            $('#inputUpload').click();

        } /* uploadMealPopup */


        // Create an div which will contain a carousel picture
        function picturediv(elm, pinfo) {

            // Create div to contain this picture
            var $dv = $(document.createElement('div'))
                .attr('id', 'pic-div-' + pinfo.timestamp)
                .attr('class', 'pic-div')
                .css('width', '0px');

            var $dvint = $(document.createElement('div'))
                .attr('class', 'pic-div-int')
                .css('width', '780px');

            // Pointer back to pinfo
            $dv.pinfo = pinfo;

            // Click-anchor 
            var anchor = $(document.createElement('a'))
                .attr('class', 'pic-div-anchor');

            // Source string
            var img_source = '/pics/' + page_globals.username + '/' + pinfo.timestamp;

            // Image tag
            var img = $(document.createElement('img'))
                .attr('src', img_source);

            // TODO - there should be a PAUSE icon that pops up when the
            // cursor hovers over it. 
            //
            // TODO - put a 'delete this picture' anchor on each of the meal 
            // photos.  When the user clicks on it the picture gets deleted.
            // TODO - left and right arrows on the side of the photos to
            // skip forwards and backwards.

            // Anchor doesn't do anything yet ..

            /* 
            anchor.click(function(){

                if(elm.stopped == false) {

                    clearTimeout(elm.pictimeout);
                    elm.stopped = true;

                }
                else{

                    elm.stopped = false;
                    rotatepictures(elm);

                }
            });
            */

            // Append these 
            img.appendTo(anchor);
            anchor.appendTo($dvint);
            $dvint.appendTo($dv);

            return $dv;
        }

        // Picture Carousel in this div using picinfo
        function createPictureCarousel(picinfo) {

            // Local variables
            var height = 0;
            var width = 0;

            // Create the carousel div
            var elm = $(document.createElement('div'))
                .attr('id', 'mealcarousel')
                .attr('class', 'mealcarousel')
                .css('height', '780px')
                .css('width', '780px');

            // Keep track of the picture count
            elm.numpics = 0;

            // Set animating flag to false
            elm.animating = false;

            // Set rotating flag to false
            elm.rotating = false;

            // Set the rotate interval
            elm.rotateinterval = 2000;

            // Set timer name
            elm.rotatetimer = 0;

            // Set addremove flag to false
            elm.addremove = false;

            // Slider speed
            elm.sliderspeed = 600;

            // Initial new pic slider speed
            elm.newpicinitspeed = 100;

            // Easing
            elm.easing = 'easeOutExpo';

            // Maxheight
            elm.maxheight = 0;

            // Maxheight count
            elm.maxheightcnt = 0;

            // Hard code maxwidth
            elm.maxwidth = 780;

            // No meal
            elm.nomeal = function() {

                // No meal url
                var url = "/images/nomeal.png";

                // Create an image tag
                var img = $(document.createElement('img'))
                    .attr('src', url);

                // Make sure we're empty
                elm.empty();

                // nomeal.png is 256x256
                elm.maxheight = 256;

                // Set my maxheight
                elm.css('height', elm.maxheight);

                // Append to divint
                img.appendTo(elm);
            }

            // Reset elms max height info.  
            // This scans so up the suckage level one notch.
            function findmaxheight()
            {
                // Sanity counter
                var counter = 0;

                // Get a list of the $li elements
                var $dv = elm.find('.pic-div');

                // Reset max height and width
                elm.maxheight = 0; 

                // Reset counts
                elm.maxheightcnt = 0;

                // Iterate to find maxes
                $dv.each(function(i) {

                    // Height
                    if(this.pinfo.height > elm.maxheight) { 
                        elm.maxheight = this.pinfo.height; 
                        elm.maxheightcnt = 1; 
                    }
                    else if(this.pinfo.height == elm.maxheight) { 
                        elm.maxheightcnt++;
                    }

                    // Increment counter
                    counter++;
                });

                // 'Assert'
                if(counter != elm.numpics) {
                    console.log('Error: numpics mismatch!');
                }
            }

            // Internal function for creating navigation arraows
            function createarrows(elm)
            {
                // Create navigator div
                elm.nav = $(document.createElement('div'))
                    .attr('id', 'navigator')
                    .attr('class', 'ca-nav');

                // Create prev-arrow span
                elm.prevarrow = $(document.createElement('span'))
                    .attr('class', 'ca-nav-prev')
                    .html('Previous');

                // Create next-array span
                elm.nextarrow = $(document.createElement('span'))
                    .attr('class', 'ca-nav-next')
                    .html('Next');

                // Move on prev click
                elm.prevarrow.click(function() { elm.movebackward(); } );

                // Move on next click
                elm.nextarrow.click(function() { elm.moveforward(); } );

                // Hook up to rest
                elm.prevarrow.appendTo(elm.nav);
                elm.nextarrow.appendTo(elm.nav);
                elm.nav.appendTo(elm);
            }

            // Internal function for destroying navigation arraows
            function destroyarrows(elm)
            {
            }

            // Internal function for removing a picture
            function removeinternal(elm, $dv)
            {
                var reset = 0;

                // Decrement the number of pictures
                --elm.numpics;

                // Check height if width did not trigger
                if(elm.numpics > 0 && $dv.pinfo.heigth == elm.maxheight && 
                        --elm.maxheightcnt <= 0) {
                    reset = 1;
                }

                // Remove it
                $dv.remove();

                // Check numpics
                if(1 == elm.numpics) {

                    // Destroy the navigation arrows
                    destroyarrows(elm);
                }
                // Destroy navigation arrows
                else if(0 == elm.numpics) {

                    // Show nomeal 
                    elm.nomeal();
                }
                // Reset height 
                if(reset) {

                    // Cache old height
                    var ht = elm.maxheight;

                    // Find new values
                    findmaxheight();

                    // Set height if it changed
                    if(elm.maxheigth != ht) {

                        // Set elm maxheight
                        elm.css('height', elm.maxheight);

                        // Set viewport maxheight
                        elm.viewport.css('height', elm.maxheight);
                    }
                }

                // Unset addremove flag
                elm.addremove = false;
            }

            // Remove a picture
            elm.removepicture = function(timestamp) {

                // Check addremove flag
                if(elm.addremove) {

                    console.log('Removepicture returning because we are add removing.');
                    return;

                }

                // Set addremove flag
                elm.addremove = true;

                // Find the div
                var $target = elm.find('#pic-div-' + timestamp);

                // Get a list of the $dv elements
                var $dv = elm.find('.pic-div');

                // First element
                if($target === $dv) {
                    elm.moveforward(function(moved) { removeinternal(elm, $target); });
                }
                else {
                    removeinternal(elm, $target);
                }
            }

            // Add a picture
            elm.addpicture = function(pinfo, initadd) {

                // Default to false
                initadd = initadd || false;

                // Should we rotate
                var rotate = false;

                // Check addremove flag
                if(elm.addremove) {

                    console.log('Removepicture returning because we are add removing.');
                    return;

                }

                // Set addremove flag
                elm.addremove = true;

                // Create the list element
                var $dv = picturediv(elm, pinfo);

                // Create a div for first picture
                if(elm.numpics == 0) {

                    // Clear 'nomeal' picture
                    elm.empty();

                    // Create the viewport
                    elm.viewport = $(document.createElement('div'))
                        .attr('id', 'mealviewport')
                        .attr('class', 'mealviewport')
                        .css('height', '780px')
                        .css('width', '1560px');

                    // Append this to elm
                    elm.viewport.appendTo(elm);

                    // Reset maxheight
                    elm.maxheight = 0;

                    // REset maxheightcnt
                    elm.maxheightcnt = 0;

                    // Viewable
                    $dv.css('left', '0px');
                }
                // Adding the second picture
                else if(elm.numpics == 1) {

                    // Create arrow navigation controls
                    createarrows(elm);

                    // Not viewable
                    $dv.css('left', '-10000px');

                    // Rotate to new picture
                    rotate = true;
                }
                else {
                    // Not viewable
                    $dv.css('left', '-10000px');

                    // Rotate to new picture
                    rotate = true;
                }

                // Increment picture count
                elm.numpics++;

                // Update maxheight
                if(pinfo.height > elm.maxheight) {

                    // Set my maxheight
                    elm.maxheight = pinfo.height;

                    // Set maxheightcnt
                    elm.maxheightcnt = 1;

                    // Update elm maxheight
                    elm.css('height', elm.maxheight);

                    // Update viewport maxheight
                    elm.viewport.css('height', elm.maxheight);
                }
                else if(pinfo.height == elm.maxheight) {

                    // Increment maxheightcnt
                    elm.maxheightcnt++;
                }

                // Append to viewport
                $dv.appendTo(elm.viewport);

                // Save current slider speed
                var cursliderspeed = elm.sliderspeed;

                // Slow from one to the other
                var degradation = (elm.sliderspeed - elm.newpicinitspeed) / 
                    elm.numpics;

                // But keep it fast
                degradation /= 2;

                // Rotate to picture
                function rotatetopicture(timestamp) {

                    // Grab first element
                    var first = elm.find('.pic-div').eq(0);

                    // Find id
                    var id = first.attr('id');

                    // Find the timestamp
                    var fts = parseInt(id.split('-').pop(), 10);

                    // Recurse call 
                    if(timestamp !== fts) {

                        // Slow down a bit
                        elm.sliderspeed += degradation;

                        // Move carousel forward
                        //elm.moveforward(
                        elm.movebackward(

                                // Call myself again
                                function(didr) {

                                    if(!didr) { console.log('did not rotate?');}
                                    else { rotatetopicture(timestamp); }

                                } 
                        );

                    }
                    else {
                        // Reset to previous value
                        elm.sliderspeed = cursliderspeed;
                    }
                }

                // Rotate to new picture 
                if(initadd == false && rotate) {

                    // Torque slider speed up
                    elm.sliderspeed = elm.newpicinitspeed;

                    rotatetopicture(pinfo.timestamp);
                }

                // Unset addremove
                elm.addremove = false;
            }

            // Move left
            elm.moveforward = function(callback) {

                // Return immediately if already animating
                if(elm.animating) {
                    if(callback) callback(false);
                    return false;
                }

                // Get a list of the $div elements
                var $dv = elm.find('.pic-div');

                // Return if there's less than two pictures
                if($dv.length <= 1)
                    return;

                // Counter to set the animating flag
                var count = 0;

                // Get the current display element
                var $cur = $dv.eq(0);

                // Next element
                var $next = $dv.eq(1);

                // Set the animating flag
                elm.animating = true;

                // Set the left attribute
                $next.css('left', elm.maxwidth + 'px');

                // Clone the current to the end of the list
                var $cln = $cur.clone(true);

                // Move out of sight
                $cln.css('left', '-10000px');

                // Append to viewport
                $cln.appendTo(elm.viewport);

                // Animate current
                $cur.stop().animate( 
                        { left : '-=' + elm.maxwidth + 'px' }, 
                        elm.sliderspeed, 
                        elm.easing, 
                        function() { 
                            if(++count == 2) { 
                                $cur.remove(); 
                                elm.animating = false; 
                                if(callback) callback(true);
                                return true;
                            } 
                        } 
                );

                // Animate next
                $next.stop().animate(
                        { left : '-=' + elm.maxwidth + 'px' },
                        elm.sliderspeed, 
                        elm.easing,
                        function() { 
                            if(++count == 2) { 
                                $cur.remove(); 
                                elm.animating = false; 
                                if(callback) callback(true);
                                return true;
                            } 
                        }
                );
            }

            // Move right
            elm.movebackward = function(callback) {

                // Return immediately if already animating
                if(elm.animating) {
                    if(callback) callback(false);
                    return false;
                }

                // Get a list of the $dv elements
                var $dv = elm.find('.pic-div');

                // Return if there's less than two pictures
                if($dv.length <= 1) {
                    if(callback) callback(false);
                    return;
                }

                // Counter to set the animating flag
                var count = 0;

                // Set the animating flag
                elm.animating = true;

                // Get the current display element
                var $cur = $dv.eq(0);

                // Clone the last item
                var $next = $dv.eq(-1).clone(true);

                // Set its width
                $next.css('left', '-' + elm.maxwidth + 'px');

                // Insert it before the first item
                $next.insertBefore($cur);

                // Animate current
                $cur.stop().animate(

                        { left : '+=' + elm.maxwidth + 'px' },
                        elm.sliderspeed,
                        elm.easing,
                        function() { 
                            $cur.css('left', '-10000px'); 
                            if(++count == 2) { 
                                $dv.last().remove();
                                elm.animating = false;
                                if(callback) callback(true);
                            }
                        }
                );

                // Animate next
                $next.stop().animate(

                    { left : '+=' + elm.maxwidth + 'px' },
                    elm.sliderspeed,
                    elm.easing,
                    function() { 
                        if(++count == 2) { 
                            $dv.last().remove();
                            elm.animating = false; 
                            if(callback) callback(true);
                        } 
                    }
                );
            }

            // Stop rotating carousel
            elm.stoprotate = function() {

                // Clear the timer
                clearTimeout(elm.rotatetimer);

                // Set rotating boolean to false
                elm.rotating = false;
            }

            // Internal rotate function
            rotatefunc = function() {

                if(elm.rotating == false) {
                    return;
                }

                // Tell the carousel to move forward
                elm.moveforward(function(moved) {

                    // Set timeout after animation
                    elm.rotatetimer = setTimeout(rotatefunc, 
                        elm.rotateinterval);

                });
            }

            // Start rotating carousel
            elm.startrotate = function() {

                // Return immediately if we're already rotating
                if(elm.rotating == true) {
                    console.log("carousel is already rotating.");
                    return;
                }

                // We are now rotating
                elm.rotating = true;

                // Set the timer to true
                elm.rotatetimer = setTimeout(rotatefunc, elm.rotateinterval);

            }

            // Stop everything
            elm.destroy = function() {

                // Stop rotating
                if(elm.rotating) {

                    // Clear this timeout
                    elm.stoprotate();
                }
            }

            // Display nomeal picture if picinfo is empty
            if(!picinfo || picinfo.length <= 0) {
                elm.nomeal();
            }
            // Populate carousel
            else {

                // Add all pictures to the carousel
                picinfo.forEach(function(pinfo) { elm.addpicture(pinfo, true); });

            }

            // Start a rotation even if there are no pics
            // elm.startrotate();

            // Return the elm carousel object
            return elm;
        }

        // Meal attributes / edit modal
        function showAttributesMealInfo(meal, restaurant, restaurantId) {

            var username = meal.username;
            var timestamp = meal.timestamp;

            var popup = $(document.createElement('div'))
                .attr('id', 'mealAttributes')
                .attr('class', 'mealAttributesPopup');

            // Center things on this popup.  
            // The center-tag is a little old-school these days.
            var centr = $(document.createElement('center'));

            // Carousel div
            var carouselDivContainer = $(document.createElement('div'))
                .attr('id', 'mealCarouselContainer')
                .attr('class', 'mealCarouselContainer');

            // Create a carousel
            var elm = createPictureCarousel(meal.picInfo);

            // Append it to the div
            elm.appendTo(carouselDivContainer);

            // Append carousel to popup
            carouselDivContainer.appendTo(centr);

            // Create an 'upload new picture' icon
            var uploadAnchor = $(document.createElement('a'))
                .attr('id', 'uploadPictureAnchor')
                .attr('class', 'uploadPictureAnchor')
                .html('Upload New Picture');


            // Append upload picture anchor
            uploadAnchor.appendTo(centr);

            // Click function for the upload anchor
            uploadAnchor.click(function() {

                // Popup works from a hidden frame
                uploadMealPopup(meal.timestamp, function(err, pinfo) {

                    // Throw any errors
                    if(err) throw(err);

                    // Add this to the carousel
                    elm.addpicture(pinfo);
                });
            });

            var closexContainer = $(document.createElement('div'))
                .attr('id', 'mealAttributesCloseContainer')
                .attr('class', 'mealAttributesCloseContainer');

            var closex = $(document.createElement('a'))
                .attr('id', 'mealAttributesCloseButton')
                .attr('class', 'mealAttributesCloseButton')
                .html('x');

            closex.click(function(){
                elm.destroy();
                // Find the carousel & cancel it
                //var carouselDiv = $('#mealcarousel');
                //if(carouselDiv && carouselDiv.destroy) {
                //    carouselDiv.destroy();
                //}
                popup.fadeOut(0);
                $('#maskFade').css({'display':'none'});
                popup.remove();
            });

            closex.appendTo(closexContainer);
            closexContainer.appendTo(popup);

            centr.appendTo(popup);

            // Create a class_8 container .. everything goes in here
            var class8 = $(document.createElement('div'))
                .attr('id', 'mealAttributesClass8')
                .attr('class', 'container_8');

            // Create a grid to hold the title
            var grid_title_pre = $(document.createElement('div'))
                .attr('class', 'grid_3')
                .html('Title');

            var title = "untitled";

            if(undefined != meal.title && meal.title.length > 0) {
                title = meal.title;
            }

            var hovertitle = $(document.createElement('a'))
                .attr('id', 'titleEdit')
                .attr('class', 'titleEdit')
                .attr('title', 'click to edit')
                .html(title);

            // Title grid
            var grid_title = $(document.createElement('div'))
                .attr('class', 'grid_5')
                .attr('id', 'pop_title');

            hovertitle.appendTo(grid_title);

            hovertitle.click(function(){

                var titleEditInput = $(document.createElement('input'))
                    .attr('type', 'text')
                    .attr('class', 'titleEditInput')
                    .attr('name', 'titleEditInput')
                    .attr('maxlength', '29')
                    .attr('size', '29')
                    .val(meal.title);

                titleEditInput.appendTo(grid_title);
                $('#titleEdit').css({'display':'none'});

                titleEditInput.focus();

                function blurTitleInput(meal, titleEditInput, keepcurrent) {

                    if(titleEditInput.val() != meal.title && keepcurrent == 0) {

                        var titleEdit = '#gridTimestamp' + meal.timestamp + ' > div > center > .titleText';

                        meal.title = titleEditInput.val();
                        $('#titleEdit').html(meal.title);
                        $(titleEdit).html(meal.title);

                        $.ajax({
                            url: '/savetitle',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(
                                {
                                    username: meal.username,
                                    timestamp: meal.timestamp,
                                    title: titleEditInput.val()
                                }),
                            dataType: 'json',
                            complete: function(resp, astat) {
                            }
                        });
                    }
                    $('#titleEdit').css({'display':'inline-block'});
                    titleEditInput.remove();
                }


                // I want certain keys (return or tab) to force a blur
                titleEditInput.keydown(function(e){
                    var code = (e.keyCode ? e.keyCode : e.which);
                    switch(code) {
                        case 13:
                        case 9:
                            titleEditInput.blur();
                            return false;
                            break;
                        case 27:
                            blurTitleInput(meal, titleEditInput, 1);
                            return false;
                            break;
                    }
                });

                titleEditInput.blur(function() {
                        blurTitleInput(meal, titleEditInput, 0);
                });
            });

            var grid_title_clear = $(document.createElement('div'))
                .attr('class', 'clear');

            // Append title
            grid_title_pre.appendTo(class8);
            grid_title.appendTo(class8);
            grid_title_clear.appendTo(class8);

            // When uploaded.  Maybe this belongs somewhere else?  maybe there should be 
            // an inputable calendar (i think theres a jquery plugin for that)?  
            // will think about it.
            //
            // yes - got it
            //
            /*
            var grid_uploaded_pre = $(document.createElement('div'))
                .attr('class', 'grid_3')
                .html('Uploaded');

            var localeDate = new Date(meal.timestamp).toLocaleDateString();

            var grid_uploaded = $(document.createElement('div'))
            .attr('class', 'grid_5')
                .attr('id', 'pop_date_uploaded')
                .html(localeDate);

            var grid_uploaded_clear = $(document.createElement('div'))
                    .attr('class', 'clear');

            grid_uploaded_pre.appendTo(class8);
            grid_uploaded.appendTo(class8);
            grid_uploaded_clear.appendTo(class8);
            */

            var whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);

            // Which meal
            var grid_meal_pre = $(document.createElement('div'))
                .attr('class', 'grid_3')
                .html('Meal');

            var grid_meal = $(document.createElement('div'))
                .attr('class', 'grid_5')
                .attr('id', 'pop_meal')
                .html(whichmeal);

            // Create the which-meal selection menu
            var grid_meal_select_div = $(document.createElement('div'))
                .attr('class', 'meal_select_menu_div')
                .attr('id', 'meal_select_menu_div')
                .css({'display': 'none'});

            var grid_meal_select = $(document.createElement('ul'))
                .attr('class', 'meal_select_menu')
                .attr('id', 'meal_select_menu')
                .attr('name', 'meal_select_menu');

            // BREAKFAST
            var grid_meal_select_meal_breakfast = $(document.createElement('li'))
                .attr('class', 'meal_select_menu_selection')
                .attr('name', 'meal_select_menu_breakfast')
                .attr('id', 'meal_select_menu_breakfast');
            var grid_meal_select_meal_breakfast_anchor = $(document.createElement('a'))
                .attr('id', 'meal_select_breakfast_anchor')
                .attr('class', 'meal_select_anchor')
                .html('Breakfast');
            if(meal.meal == "breakfast") {
                grid_meal_select_meal_breakfast_anchor.attr('class', 'grid_meal_selected');
            }
            
            grid_meal_select_meal_breakfast_anchor.click(function() {
                if(meal.meal == "breakfast") {
                    return;
                }
                if(meal.meal == "lunch" ) {
                    grid_meal_select_meal_lunch_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "dinner" ) {
                    grid_meal_select_meal_dinner_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "snack" ) {
                    grid_meal_select_meal_snack_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "other" ) {
                    grid_meal_select_meal_other_anchor.removeClass('grid_meal_selected');
                }
                grid_meal_select_meal_breakfast_anchor.attr('class', 'grid_meal_selected');
                meal.meal = "breakfast";
                whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
                grid_meal.html(whichmeal);
                updateMealAjax(meal, "breakfast");
            });

            grid_meal_select_meal_breakfast_anchor.appendTo(grid_meal_select_meal_breakfast);

            // LUNCH
            var grid_meal_select_meal_lunch = $(document.createElement('li'))
                .attr('class', 'meal_select_menu_selection')
                .attr('name', 'meal_select_menu_lunch')
                .attr('id', 'meal_select_menu_lunch');

            var grid_meal_select_meal_lunch_anchor = $(document.createElement('a'))
                .attr('id', 'meal_select_lunch_anchor')
                .attr('class', 'meal_select_anchor')
                .html('Lunch');
            if(meal.meal == "lunch") {
                grid_meal_select_meal_lunch_anchor.attr('class', 'grid_meal_selected');
            }
            grid_meal_select_meal_lunch_anchor.click(function() {
                if(meal.meal == "lunch") {
                    return;
                }
                if(meal.meal == "breakfast" ) {
                    grid_meal_select_meal_breakfast_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "dinner" ) {
                    grid_meal_select_meal_dinner_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "snack" ) {
                    grid_meal_select_meal_snack_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "other" ) {
                    grid_meal_select_meal_other_anchor.removeClass('grid_meal_selected');
                }
                grid_meal_select_meal_lunch_anchor.attr('class', 'grid_meal_selected');
                meal.meal = "lunch";
                whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
                grid_meal.html(whichmeal);
                updateMealAjax(meal, "lunch");
            });
            grid_meal_select_meal_lunch_anchor.appendTo(grid_meal_select_meal_lunch);

            // DINNER
            var grid_meal_select_meal_dinner = $(document.createElement('li'))
                .attr('class', 'meal_select_menu_selection')
                .attr('name', 'meal_select_menu_dinner')
                .attr('id', 'meal_select_menu_dinner');
            var grid_meal_select_meal_dinner_anchor = $(document.createElement('a'))
                .attr('id', 'meal_select_dinner_anchor')
                .attr('class', 'meal_select_anchor')
                .html('Dinner');
            if(meal.meal == "dinner") {
                grid_meal_select_meal_dinner_anchor.attr('class', 'grid_meal_selected');
            }
            grid_meal_select_meal_dinner_anchor.click(function() {
                if(meal.meal == "dinner") {
                    return;
                }
                if(meal.meal == "breakfast" ) {
                    grid_meal_select_meal_breakfast_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "lunch" ) {
                    grid_meal_select_meal_lunch_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "snack" ) {
                    grid_meal_select_meal_snack_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "other" ) {
                    grid_meal_select_meal_other_anchor.removeClass('grid_meal_selected');
                }
                grid_meal_select_meal_dinner_anchor.attr('class', 'grid_meal_selected');
                meal.meal = "dinner";
                whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
                grid_meal.html(whichmeal);
                updateMealAjax(meal, "dinner");
            });
            grid_meal_select_meal_dinner_anchor.appendTo(grid_meal_select_meal_dinner);

            // SNACK
            var grid_meal_select_meal_snack = $(document.createElement('li'))
                .attr('class', 'meal_select_menu_selection')
                .attr('name', 'meal_select_menu_snack')
                .attr('id', 'meal_select_menu_snack');
            var grid_meal_select_meal_snack_anchor = $(document.createElement('a'))
                .attr('id', 'meal_select_snack_anchor')
                .attr('class', 'meal_select_anchor')
                .html('Snack');
            if(meal.meal == "snack") {
                grid_meal_select_meal_snack_anchor.attr('class', 'grid_meal_selected');
            }
            grid_meal_select_meal_snack_anchor.click(function() {
                if(meal.meal == "snack") {
                    return;
                }
                if(meal.meal == "breakfast" ) {
                    grid_meal_select_meal_breakfast_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "lunch" ) {
                    grid_meal_select_meal_lunch_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "dinner" ) {
                    grid_meal_select_meal_dinner_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "other" ) {
                    grid_meal_select_meal_other_anchor.removeClass('grid_meal_selected');
                }
                grid_meal_select_meal_snack_anchor.attr('class', 'grid_meal_selected');
                meal.meal = "snack";
                whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
                grid_meal.html(whichmeal);
                updateMealAjax(meal, "snack");
            });
            grid_meal_select_meal_snack_anchor.appendTo(grid_meal_select_meal_snack);

            var grid_meal_select_meal_other = $(document.createElement('li'))
                .attr('class', 'meal_select_menu_selection')
                .attr('name', 'meal_select_menu_other')
                .attr('id', 'meal_select_menu_other');
            var grid_meal_select_meal_other_anchor = $(document.createElement('a'))
                .attr('id', 'meal_select_other_anchor')
                .attr('class', 'meal_select_anchor')
                .html('Other');
            if(meal.meal == "other") {
                grid_meal_select_meal_other_anchor.attr('class', 'grid_meal_selected');
            }
            grid_meal_select_meal_other_anchor.click(function() {
                if(meal.meal == "other") {
                    return;
                }
                if(meal.meal == "breakfast" ) {
                    grid_meal_select_meal_breakfast_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "lunch" ) {
                    grid_meal_select_meal_lunch_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "dinner" ) {
                    grid_meal_select_meal_dinner_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "snack" ) {
                    grid_meal_select_meal_snack_anchor.removeClass('grid_meal_selected');
                }
                grid_meal_select_meal_other_anchor.attr('class', 'grid_meal_selected');
                meal.meal = "other";
                whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
                grid_meal.html(whichmeal);
                updateMealAjax(meal, "other");
            });
            grid_meal_select_meal_other_anchor.appendTo(grid_meal_select_meal_other);

            // build menu
            grid_meal_select_meal_breakfast.appendTo(grid_meal_select);
            grid_meal_select_meal_lunch.appendTo(grid_meal_select);
            grid_meal_select_meal_dinner.appendTo(grid_meal_select);
            grid_meal_select_meal_snack.appendTo(grid_meal_select);
            grid_meal_select_meal_other.appendTo(grid_meal_select);
            grid_meal_select.appendTo(grid_meal_select_div);

            // Define hover behaviors
            grid_meal.mouseenter(
                function(){
                    $('#meal_select_menu_div').css({ 'display': 'block' });
                }
            );

            grid_meal_select_div.mouseleave(
                function(){
                    $('#meal_select_menu_div').css({ 'display': 'none' });
                }
            );

            var grid_meal_clear = $(document.createElement('div'))
                .attr('class', 'clear');

            // Append meal
            grid_meal_pre.appendTo(class8);
            grid_meal.appendTo(class8);
            grid_meal_select_div.appendTo(class8);
            grid_meal_clear.appendTo(class8);

            // How many stars
            var grid_stars_pre = $(document.createElement('div'))
                .attr('class', 'grid_3')
                .html('Rating');

            // Rating selector container
            var grid_stars = $(document.createElement('div'))
                .attr('class', 'grid_5')
                .attr('id', 'pop_rating')
                .attr('name', 'name_rating');

            // Create a sub-div that will contain the star-elements
            var grid_stars_select_div = $(document.createElement('div'))
                .attr('class', 'stars_select_menu_div')
                .attr('id', 'stars_select_menu_div');

            // Start an unordered list
            var grid_stars_select = $(document.createElement('ul'))
                .attr('class', 'stars_select_menu')
                .attr('id', 'stars_select_menu')
                .attr('name', 'stars_select_menu');

            // There will be five of them
            var grid_stars_select_stars_0 = $(document.createElement('li'))
                .attr('class', 'star_select_menu_selection')
                .attr('name', 'star_select_menu_0')
                .attr('id', 'star_select_menu_0');

            var grid_stars_select_stars_0_anchor = $(document.createElement('a'))
                .attr('id', 'stars_select_stars_0_anchor')
                .attr('class', 'stars_select_anchor')
                .css({ 'color' : '#fff' })
                .html('&#11036');

            var grid_stars_select_stars_1_anchor = $(document.createElement('a'))
                .attr('id', 'stars_select_stars_1_anchor')
                .attr('class', 'stars_select_anchor')
                .html('&#9733;');

            var grid_stars_select_stars_2_anchor = $(document.createElement('a'))
                .attr('id', 'stars_select_stars_2_anchor')
                .attr('class', 'stars_select_anchor')
                .html('&#9733;');

            var grid_stars_select_stars_3_anchor = $(document.createElement('a'))
                .attr('id', 'stars_select_stars_3_anchor')
                .attr('class', 'stars_select_anchor')
                .html('&#9733;');

            var grid_stars_select_stars_4_anchor = $(document.createElement('a'))
                .attr('id', 'stars_select_stars_4_anchor')
                .attr('class', 'stars_select_anchor')
                .html('&#9733;');

            var grid_stars_select_stars_5_anchor = $(document.createElement('a'))
                .attr('id', 'stars_select_stars_5_anchor')
                .attr('class', 'stars_select_anchor')
                .html('&#9733;');

            // TODO - this could be more efficient 
            function reset_stars_select_classes_hover() {
                grid_stars_select_stars_0_anchor.removeClass("stars_unselected_star_hover");
                grid_stars_select_stars_1_anchor.removeClass("stars_unselected_star_hover");
                grid_stars_select_stars_2_anchor.removeClass("stars_unselected_star_hover");
                grid_stars_select_stars_3_anchor.removeClass("stars_unselected_star_hover");
                grid_stars_select_stars_4_anchor.removeClass("stars_unselected_star_hover");
                grid_stars_select_stars_5_anchor.removeClass("stars_unselected_star_hover");

                grid_stars_select_stars_0_anchor.removeClass("stars_selected_star_hover");
                grid_stars_select_stars_1_anchor.removeClass("stars_selected_star_hover");
                grid_stars_select_stars_2_anchor.removeClass("stars_selected_star_hover");
                grid_stars_select_stars_3_anchor.removeClass("stars_selected_star_hover");
                grid_stars_select_stars_4_anchor.removeClass("stars_selected_star_hover");
                grid_stars_select_stars_5_anchor.removeClass("stars_selected_star_hover");
            }

            // TODO - this could be more efficient 
            function reset_stars_select_classes() {
                grid_stars_select_stars_0_anchor.removeClass("stars_selected_star");
                grid_stars_select_stars_1_anchor.removeClass("stars_selected_star");
                grid_stars_select_stars_2_anchor.removeClass("stars_selected_star");
                grid_stars_select_stars_3_anchor.removeClass("stars_selected_star");
                grid_stars_select_stars_4_anchor.removeClass("stars_selected_star");
                grid_stars_select_stars_5_anchor.removeClass("stars_selected_star");

                grid_stars_select_stars_0_anchor.removeClass("stars_unselected_star");
                grid_stars_select_stars_1_anchor.removeClass("stars_unselected_star");
                grid_stars_select_stars_2_anchor.removeClass("stars_unselected_star");
                grid_stars_select_stars_3_anchor.removeClass("stars_unselected_star");
                grid_stars_select_stars_4_anchor.removeClass("stars_unselected_star");
                grid_stars_select_stars_5_anchor.removeClass("stars_unselected_star");

                if(meal.rating >= 1) {
                    grid_stars_select_stars_1_anchor.attr('class', 'stars_selected_star');
                }
                else {
                    grid_stars_select_stars_1_anchor.attr('class', 'stars_unselected_star');
                }

                if(meal.rating >= 2) {
                    grid_stars_select_stars_2_anchor.attr('class', 'stars_selected_star');
                }
                else {
                    grid_stars_select_stars_2_anchor.attr('class', 'stars_unselected_star');
                }

                if(meal.rating >= 3) {
                    grid_stars_select_stars_3_anchor.attr('class', 'stars_selected_star');
                }
                else {
                    grid_stars_select_stars_3_anchor.attr('class', 'stars_unselected_star');
                }
                if(meal.rating >= 4) {
                    grid_stars_select_stars_4_anchor.attr('class', 'stars_selected_star');
                }
                else {
                    grid_stars_select_stars_4_anchor.attr('class', 'stars_unselected_star');
                }
                if(meal.rating >= 5) {
                    grid_stars_select_stars_5_anchor.attr('class', 'stars_selected_star');
                }
                else {
                    grid_stars_select_stars_5_anchor.attr('class', 'stars_unselected_star');
                }
            }

            reset_stars_select_classes();

            function star_click(rating) {
                if(rating < 0 || rating > 5)
                    return false;
                if(meal.rating == rating)
                    return false;
                meal.rating = rating;
                updateRatingAjax(meal, rating);
                return false;
            }

            grid_stars_select_stars_0_anchor.mouseenter(
                function() {
                    reset_stars_select_classes_hover();
                    grid_stars_select_stars_1_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_2_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_3_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_4_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_5_anchor.addClass("stars_unselected_star_hover");
                    }
            );

            grid_stars_select_stars_0_anchor.click(function() {
                    star_click(0);
            });

            grid_stars_select_stars_0_anchor.appendTo(grid_stars_select_stars_0);

            var grid_stars_select_stars_1 = $(document.createElement('li'))
                .attr('class', 'star_select_menu_selection')
                .attr('name', 'star_select_menu_1')
                .attr('id', 'star_select_menu_1');

            grid_stars_select_stars_1_anchor.mouseenter(
                function() {
                    reset_stars_select_classes_hover();
                    grid_stars_select_stars_1_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_2_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_3_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_4_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_5_anchor.addClass("stars_unselected_star_hover");
                    }
            );

            grid_stars_select_stars_1_anchor.click(function() {
                    star_click(1);
            });

            grid_stars_select_stars_1_anchor.appendTo(grid_stars_select_stars_1);

            var grid_stars_select_stars_2 = $(document.createElement('li'))
                .attr('class', 'star_select_menu_selection')
                .attr('name', 'star_select_menu_2')
                .attr('id', 'star_select_menu_2');

            grid_stars_select_stars_2_anchor.mouseenter(
                function() {
                    reset_stars_select_classes_hover();
                    grid_stars_select_stars_1_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_2_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_3_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_4_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_5_anchor.addClass("stars_unselected_star_hover");
                }
            );
            grid_stars_select_stars_2_anchor.click(function() {
                    star_click(2);
            });

            grid_stars_select_stars_2_anchor.appendTo(grid_stars_select_stars_2);

            var grid_stars_select_stars_3 = $(document.createElement('li'))
                .attr('class', 'star_select_menu_selection')
                .attr('name', 'star_select_menu_3')
                .attr('id', 'star_select_menu_3');

            grid_stars_select_stars_3_anchor.mouseenter(
                function() {
                    reset_stars_select_classes_hover();
                    grid_stars_select_stars_1_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_2_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_3_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_4_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_5_anchor.addClass("stars_unselected_star_hover");
                }
            );

            grid_stars_select_stars_3_anchor.click(function() {
                    star_click(3);
            });
            grid_stars_select_stars_3_anchor.appendTo(grid_stars_select_stars_3);

            var grid_stars_select_stars_4 = $(document.createElement('li'))
                .attr('class', 'star_select_menu_selection')
                .attr('name', 'star_select_menu_4')
                .attr('id', 'star_select_menu_4');

            grid_stars_select_stars_4_anchor.mouseenter(
                function() {
                    reset_stars_select_classes_hover();
                    grid_stars_select_stars_1_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_2_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_3_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_4_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_5_anchor.addClass("stars_unselected_star_hover");
                }
            );

            grid_stars_select_stars_4_anchor.click(function() {
                    star_click(4);
            });
            grid_stars_select_stars_4_anchor.appendTo(grid_stars_select_stars_4);

            var grid_stars_select_stars_5 = $(document.createElement('li'))
                .attr('class', 'star_select_menu_selection')
                .attr('name', 'star_select_menu_5')
                .attr('id', 'star_select_menu_5');

            grid_stars_select_stars_5_anchor.mouseenter(
                function() {
                    reset_stars_select_classes_hover();
                    grid_stars_select_stars_1_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_2_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_3_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_4_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_5_anchor.addClass("stars_selected_star_hover");
                }
            );

            grid_stars_select_stars_5_anchor.click(function() {
                    star_click(5);
            });
            grid_stars_select_stars_5_anchor.appendTo(grid_stars_select_stars_5);

            grid_stars_select_div.mouseleave(function() {
                reset_stars_select_classes_hover();
                reset_stars_select_classes();
            });

            grid_stars_select_stars_0.appendTo(grid_stars_select);
            grid_stars_select_stars_1.appendTo(grid_stars_select);
            grid_stars_select_stars_2.appendTo(grid_stars_select);
            grid_stars_select_stars_3.appendTo(grid_stars_select);
            grid_stars_select_stars_4.appendTo(grid_stars_select);
            grid_stars_select_stars_5.appendTo(grid_stars_select);

            grid_stars_select.appendTo(grid_stars_select_div);

            // Append this to grid_stars..
            grid_stars_select_div.appendTo(grid_stars);
            
            var grid_stars_clear = $(document.createElement('div'))
                .attr('class', 'clear');

            // Append rating
            grid_stars_pre.appendTo(class8);
            grid_stars.appendTo(class8);
            grid_stars_clear.appendTo(class8);

            // If there's a restaurant associated with this meal, link to it
            if(restaurantId > 0 && restaurant != undefined) {
            }

            // If there's already a review, display it now
            var grid_review_pre = $(document.createElement('div'))
                .attr('class', 'grid_3')
                .html('Review');

            var review = "(not reviewed)";

            var grid_review = $(document.createElement('div'))
                .attr('class', 'grid_5')
                .attr('class', 'grid_review')
                .attr('id', 'pop_review')
                .attr('name', 'pop_review');


            if (meal.review != undefined && meal.review.length > 0) {
                review = meal.review;
            }

            var grid_review_textarea = $(document.createElement('textarea'))
                .attr('class', 'review_noedit')
                .attr('class', 'review_text_area')
                .attr('id', 'review_text_int')
                .attr('cols', textAreaWidthCols)
                .attr('rows', 20)
                .attr('readonly',  true)
                .html(review);

            grid_review_textarea.click(function() {

                $('#review_text_int').removeClass('review_noedit');
                $('#review_text_int').addClass('review_edit');
                $('#review_text_int').attr('readonly', false);

                // Zap the not-reviewed placeholder
                if(meal.review == undefined || meal.review.length <= 0) {
                    //grid_review_textarea.html('');
                    $('#review_text_int').html('');
                }
            });

            grid_review_textarea.keydown(function(e){
                var code = (e.keyCode ? e.keyCode : e.which);
                switch(code) {
                    case 9:
                        $('#review_text_int').blur();
                        return false;
                }
            });

            grid_review_textarea.blur(function() {
                var tmpText = $('#review_text_int').val();
                updateReviewAjax(meal, tmpText);
                if(tmpText == undefined || tmpText.length <= 0) {
                    $('#review_text_int').html('(not reviewed)');
                }
                meal.review = tmpText;

                $('#review_text_int').addClass('review_noedit');
                $('#review_text_int').removeClass('review_edit');
                $('#review_text_int').attr('readonly', true);

            });
            
            grid_review_textarea.appendTo(grid_review);

            var grid_review_clear = $(document.createElement('div'))
                .attr('class', 'clear');

            grid_review_pre.appendTo(class8);
            grid_review.appendTo(class8);
            grid_review_clear.appendTo(class8);

            // Delete this picture logic here. 
            var deletePre = $(document.createElement('div'))
                .attr('class', 'grid_3 delete_pre')
                .attr('id', 'delete_pre')
                .html('Delete');

            var deleteLink = $(document.createElement('div'))
                .attr('class', 'grid_5 delete_link')
                .attr('id', 'delete_link');

            var deleteAnchor = $(document.createElement('a'))
                .attr('class', 'delete_link_anchor')
                .attr('id', 'delete_link_anchor')
                .attr('href', 'javascript:void(0)')
                .attr('title', 'Delete this Meal')
                .html('Delete this Meal');

            var deleteClear = $(document.createElement('div'))
                .attr('class', 'clear');

            // This is a getJSON request:
            // 
            // REQUEST
            // * The username
            // * The timestamp of the deleted meal
            // * The timestamp of nextpage (if it exists)
            //
            // RESPONSE
            // * mealinfo of the new lastpicture (if it exists)
            // * new nextpage info (if it exists)
            // * previous page meals if this was the last meal on the page
            // * previous page prevpage if this was the last meal on the page
            //
            // The getJSON request and this delete-copy run concurrently.
            // It will be up to the ajax response function to load the new 
            // mealinfo and dismiss the modal.

            deleteAnchor.click(function() {

                var editGrid = $('#gridTimestamp' + meal.timestamp);
                var nextGrid = editGrid.next('.editgrid');
                var firstGrid = $('.editgrid').first();
                var lastGrid = $('.editgrid').last();
                var prevPage = 0;
                var count = 1;
                var lastPic = false;

                // If this is the last remaining picture on this page, request the previous page
                if(firstGrid.attr('id') == lastGrid.attr('id')) {
                    lastPic = true;
                    if(page_globals.prevPage > 0) {
                        count = page_globals.showMealsPerPage;
                        prevPage = page_globals.prevPage;
                    }
                    if(page_globals.nextmd > 0) {
                        console.log('deleteAnchor.click: page_globals nextmd is set for empty page?');
                    }
                }

                $.getJSON('/deletemeal',
                    {
                        username: meal.username,
                        timestamp: meal.timestamp,
                        nextmd: page_globals.nextmd,
                        nextts: page_globals.nextts,
                        prevmd: page_globals.prevmd,
                        prevts: page_globals.prevts,
                        count: count
                    },
                    function(response) {
                        if(response.errStr != undefined && response.errStr.length > 0) {
                            if(response.errStr == "signin") {
                                window.location.replace("/signin");
                            }
                            else {
                                console.log("getJSON response error is ", response.errStr);
                                window.location.replace("/");
                            }
                            return;
                        }

                        // If this was the last picture on the page & mealinfo is set, these meals belong
                        // to the previous page.  displayPictureGrid handles everything.
                        if(lastPic) {
                            displayPictureGrid(response.mealinfo, response.nextpage, response.prevpage);
                        }
                        else {

                            // Success case
                            if(response.mealinfo != undefined && response.mealinfo.length >= 1) {

                                // There's only one meal here- we'll be called when that loads
                                var newInternal = pictureDivInternal(response.mealinfo[0], function (showImages) {
                                    newInternal.appendTo(lastGrid);
                                    nextPrevPageLinks(parseInt(response.nextpage, 10), page_globals.prevPage);
                                });

                            }
                            else {

                                lastGrid.remove();
                                nextPrevPageLinks(parseInt(response.nextpage, 10), page_globals.prevPage);

                            }
                        }

                        elm.destroy();
                        popup.fadeOut(0);
                        $('#maskFade').css({'display':'none'});
                        popup.remove();

                    });

                // Walk gridpics, copying each into the last
                while(nextGrid && nextGrid.length) {

                    var intnl = editGrid.find('.editGridInternal');
                    var nxtin = nextGrid.find('.editGridInternal');

                    if(nxtin && nxtin.length) {

                        if(intnl && intnl.length) {
                            intnl.remove();
                        }
                        nxtin.remove();
                        nxtin.appendTo(editGrid);

                        // Remap id
                        var tsId = nextGrid.attr('id');
                        nextGrid.removeAttr('id');
                        editGrid.removeAttr('id');
                        editGrid.attr('id', tsId);

                        editGrid = nextGrid;
                    }

                    nextGrid = nextGrid.next();
                }
            });

            deleteAnchor.appendTo(deleteLink);

            // Append to modal
            deletePre.appendTo(class8);
            deleteLink.appendTo(class8);
            deleteClear.appendTo(class8);

            class8.appendTo(popup);

            var maskWidth = $(window).width();
//            var maskHeight = $(document).height();
            var maskHeight = '2000px';

            $('#maskFade').css({'width':maskWidth, 'height':maskHeight, 'opacity':0.6, 'display':'block'});

            $('#maskFade').click(function() {
                    elm.destroy();
                    popup.fadeOut(0);
                    $('#maskFade').css({'display':'none'});
                    popup.remove();
            });

            // Wait for the image to load
            //img.load(function() {
                var lft = 800 / 2;
                var winw = $(window).width()/2;
                var popleft = winw - lft;
                popup.css('top', 30);
                popup.css('left', popleft);
                popup.appendTo('#boxes');
                popup.fadeIn(500);
            //});

        }

        function showAttributes(username, timestamp) {

            $.getJSON('/ajaxgetmealinfo',
                    {
                        username: username,
                        timestamp: timestamp
                    },
                    function(response) {
                        if(response.errStr != undefined && response.errStr.length > 0) {
                            if(response.errStr == "signin") {
                                window.location.replace("/signin");
                            }
                            if(response.errStr == "wronguser") {
                                window.location.replace("/");
                            }
                            // TODO - draw an elegant page for this case
                            // TODO - elegant handling of all error - maybe have a box at the box
                            // which informs the user if/when this occurs
                            if(response.errStr == "nomeal") {
                                window.location.replace("/");
                            }
                        }
                        else {
                            showAttributesMealInfo(response.mealInfo, response.restaurantInfo, response.restaurantId);
                        }
                    });
        }

		function mealDateToDate(mealdate)
		{
		    var year = mealdate / 1000000; mealdate %= 1000000;
		    var month = mealdate /  10000; mealdate %=   10000;
		    var day  = mealdate /     100;
		    return new Date( year, month-1, day);
		}

        function pictureDivInternal(meal, callback, picturegrid, lastpic) {

            // I can manipulate this directly in the delete code.
            var editInternal = $(document.createElement('div'))
                .attr('class', 'editGridInternal');

            var center = $(document.createElement('center'));
            center.appendTo(editInternal);

            var mealtxt = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
            var hoverDate = (mealDateToDate(meal.mealDate)).toLocaleDateString();
            var hoverTxt = mealtxt + " on " + hoverDate;

            var editImageDiv = $(document.createElement('div'));

            editImageDiv.appendTo(center);

            var onClickStr = 'showAttributes("' + meal.username + '",' + meal.timestamp + ');';

            var anchor = $(document.createElement('a'))
                .attr('href', 'javascript:void(0)')
                .attr('onclick', onClickStr)
                .attr('title', hoverTxt);

            anchor.appendTo(editImageDiv);

            var imgSource;

            if(!meal.picInfo || meal.picInfo.length <= 0) {
                imgSource = '/images/nomeal.png';
            }
            else {
                // Cut 1: use the top picture
                imgSource = '/thumbs/' + meal.username + '/' + meal.picInfo[0].timestamp;
            }

            var image = $(document.createElement('img'))
                .attr('class', 'editImage')
                .attr('src', imgSource);

            if(callback) {
                image.load(function() {
                    callback(picturegrid, lastpic);
                });
            }

            image.appendTo(anchor);

            var titletext = $(document.createElement('div'))
                .attr('class', 'titleText');

            if(meal.title != undefined && meal.title.length > 0) {
                titletext.html(meal.title);
            }
            else {
                titletext.html('untitled');
            }

            titletext.appendTo(center);

            return editInternal;
        }

        function pictureDiv(meal, callback, pictureGrid, lastpic) {

            var tsId = 'gridTimestamp' + meal.timestamp;

            // Id this with both an index and a timestamp
            var editgrid = $(document.createElement('div'))
                .attr('id', tsId)
                .attr('class', 'grid_4 editheight editgrid');

            // Create an internal pictureDiv that I can switchout in the delete code
            var editInternal = pictureDivInternal(meal, callback, pictureGrid, lastpic);

            editInternal.appendTo(editgrid);

            // Return the top-level object
            return editgrid;
        }

        function nextPrevPageLinks(nextpage, prevpage) {
            var prevGrid;
            var nextGrid;
            var createdPrev=false;
            var createdNext=false;
            var nextPrev;

            if(
                (undefined == nextpage || nextpage <= 0) &&
                (undefined == prevpage || prevpage <= 0)
            )
            {
                return;
            }

            if(undefined != prevpage && prevpage > 0) {
                prevGrid = $(document.createElement('div'))
                    .attr('class', 'grid_2');

                var prevCenter = $(document.createElement('center'));

                // TODO - maybe change the href to an onclick ..?
                var prevAnchor = $(document.createElement('a'))
                    .attr('href', 'javascript:void(0)')
                    .html('Previous Page');

                prevAnchor.click(function() {
                    drawPrevMeals(prevpage);
                });

                prevCenter.appendTo(prevGrid);
                prevAnchor.appendTo(prevCenter);
                createdPrev = true;
            }

            if(undefined != nextpage && nextpage > 0) {
                nextGrid = $(document.createElement('div'))
                    .attr('class', 'grid_2');
                
                var nextCenter = $(document.createElement('center'));

                var nextAnchor = $(document.createElement('a'))
                    .attr('href', 'javascript:void(0)')
                    .html('Next Page');
                    
                nextAnchor.click(function() {
                    drawNextMeals(nextpage);
                });

                nextCenter.appendTo(nextGrid);
                nextAnchor.appendTo(nextCenter);
                createdNext = true;
            }

            if(createdPrev && !createdNext) {
                prevGrid.addClass('suffix_10');
            }

            if(!createdPrev && createdNext) {
                nextGrid.addClass('prefix_10');
            }

            if(createdPrev && createdNext) {
                prevGrid.addClass('suffix_4');
                nextGrid.addClass('prefix_4');
            }

            var clearnextprev = $(document.createElement('div'))
                .attr('class', 'clear');

            nextPrev = $('#nextprev');
            nextPrev.empty();

            if(createdPrev) {
                prevGrid.appendTo(nextPrev);
            }

            if(createdNext) {
                nextGrid.appendTo(nextPrev);
            }

            clearnextprev.appendTo(nextPrev);

            // Update globals
            page_globals.nextPage = nextpage;
            page_globals.prevPage = prevpage;
        }

        function pictureGridInner(mealinfo, showmeals, callback)
        {
            var pictureGrid = $(document.createElement('div'))
                .attr('class', 'pictureGrid');


            for(cnt = 0 ; cnt < showmeals; cnt++) {
                if(cnt < showmeals) {
                    var meal = mealinfo[cnt];
                    var gridpic = pictureDiv(meal, callback, pictureGrid, showmeals);

                    gridpic.appendTo(pictureGrid);

                    if(cnt % 3 == 2) {
                        var divclear = $(document.createElement('div'))
                            .attr('class', 'clear');
                        divclear.appendTo(pictureGrid);
                    }
                }
            }

            return pictureGrid; 
        }

        function displayPictureGrid(mealinfo, nextpage, prevpage) {

            var pictureGridContainer = $('#pictureGridContainer');
            var loaded = 0;
            
            if(mealinfo != undefined && mealinfo.length > 0) {

                // Determine last picture
                var endpic = (mealinfo.length < page_globals.showMealsPerPage) ? 
                    mealinfo.length : page_globals.showMealsPerPage;

                // Create the grid
                var pictureGridNew = pictureGridInner(mealinfo, endpic, function (showImages) {
                    loaded++;

                    if(loaded == endpic) {

                        $('#pictureGrid').remove();
                        pictureGridNew.css({'display': 'none'});
                        pictureGridNew.attr('id', 'pictureGrid');
                        pictureGridNew.appendTo($('#pictureGridDiv'));
                        pictureGridNew.css({'display': 'block'});
                        nextPrevPageLinks(nextpage, prevpage);
                    }
                });
            }
            else {
                // TODO - if this is the first time that a user has logged on, 
                // maybe a friendly 'To get you started' popup .. ?
                // Make this a pop-up - something that's informative.  It'll
                // be something you just dismiss.
                $('#pictureGrid').empty();
                $('#pictureGridDiv').html('<center><b>No Meals to View</b><center>');
            }

        }

        function drawNextMeals(nextpage) {

            // Make this an ajax request that will return enough information
            $.getJSON('/editpagenext',
                    {
                        username: page_globals.username,
                        nextpage: nextpage,
                        count: page_globals.showMealsPerPage
                    },
                    function(response) {
                        if(response.errStr != undefined && response.errStr.length > 0) {
                            // Send this error to a space at the top..
                            console.log('editpagenext error: ' + response.errStr);
                        }
                        else {
                            displayPictureGrid(response.mealinfo, response.nextpage, response.prevpage);
                        }
                    });
            return 0;
        }

        function drawPrevMeals(prevpage) {
            $.getJSON('/editpageprev',
                    {
                        username: page_globals.username,
                        prevpage: prevpage,
                        count: page_globals.showMealsPerPage
                    },
                    function(response) {
                        if(response.errStr != undefined && response.errStr.length > 0) {
                            // Send this error to a space at the top..
                            console.log('editpageprev error: ' + response.errStr);
                        }
                        else {
                            displayPictureGrid(response.mealinfo, response.nextpage, response.prevpage);
                        }
                    });
            return 0;
        }

        $(document).ready(function() {
            $.ajaxSetup ({ cache: false });

            // Add an easing function
            jQuery.extend( jQuery.easing,
            {
                easeOutExpo: function (x, t, b, c, d) {
                    return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
                }
            });

            var minfo = [];

            function truncMeal(username, timestamp, title, meal, mealDate, picInfo) {
                this.username = username;
                this.timestamp = timestamp;
                this.title = title;
                this.meal = meal;
                this.mealDate = mealDate;
                if(!picInfo) {
                    console.log('picinfo is null??');
                }
                this.picInfo = picInfo;
                return this;
            }

            function truncPicInfo(timestamp, mitimestamp, thumbwidth, thumbheight)
            {
                this.timestamp = timestamp;
                this.mitimestamp = mitimestamp;
                this.thumbwidth = thumbwidth;
                this.thumbheight = thumbheight;
                return this;
            }
            
            <% 
            if( mealinfo && mealinfo.length > 0 ) { 
                for(var i = 0 ; i < mealinfo.length ; i++) {
                    var meal = mealinfo[i];

            %>
                var pinfo<%= i %> = [];
            <%

                if(meal.picInfo && meal.picInfo.length > 0) {
                    for(var j = 0 ; j < meal.picInfo.length ; j++) {
                        var pic = meal.picInfo[j];
            %>

                pinfo<%= i %> [ <%= j %> ] = new truncPicInfo(
                        <%= pic.timestamp %>,
                        <%= pic.mitimestamp %>,
                        <%= pic.width %>,
                        <%= pic.height %>
                    );
            <%
                    }
                }
            %>

            // Start meals
            minfo[<%= i %>] = new truncMeal(
                    "<%= meal.username %>",
                    <%= meal.timestamp %>,
                    "<%= meal.title %>",
                    "<%= meal.meal %>",
                    <%= meal.mealDate %>,
                    pinfo<%= i %>);
            <%
                }
            }
            %>

            displayPictureGrid(minfo, page_globals.nextPage, page_globals.prevPage);
    });


    </script>


        <div class="boxesClass" id="boxes">
        <div class="container_12" id="boxes_container">

            <div class="grid_2 prefix_10">
                <!-- maybe a menu here.. ? -->
                <a href='javascript:void(0)' onclick='newMealPopup()'>New Meal</a>
            </div>
            <div class="clear"></div>

            <div class="grid_2 prefix_10">
                <div id='deleteModeDiv'> </div>
                <!-- Not sure about 'deletemode' yet -->
            </div>
            <div class="clear"></div>

            <div class="grid_2 prefix_10">
                <!-- maybe a menu here.. ? -->
                <a href="/signout">Logout</a>
            </div>
            <div class="clear"></div>
            <br><br>

            <div class='pictureGridDiv' id='pictureGridDiv' name='pictureGridDiv'>
                <div class='pictureGrid' id='pictureGrid' name='pictureGrid'>
                </div>
            </div>

            <div class='nextprev' id='nextprev' name='nextprev'>
            </div>

        </div> <!-- container_12 -->
        </div> <!-- boxes -->
        <div id="maskFade" class="maskClass"></div>
        <div id="hiddenElements" class="hiddenElements" name="hiddenElements"></div>
    </body>
</html>
