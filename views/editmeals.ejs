<!DOCTYPE html>
<!-- 

TODO:
* Make the upper left-hand corner menu nicer
* Make the 'next' and 'previous' page commands SLIDE new pictures on rather than
  load an entirely new page.
* Upload should be a pop-up on this page rather than a full-fledged page.  If 
  you upload via a pop-up, the pictures could shift so that the newly uploaded 
  picture is shown first.

-->

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <title>Edit Meals</title> <link rel="stylesheet" href="/css/reset.css" />
        <link rel="stylesheet" href="/css/960.css" />
        <link rel="stylesheet" href="/css/text.css" />
        <link rel="stylesheet" href="/css/mealdisp.css" />
        <link rel="stylesheet" href="/css/datePicker.css" />
    </head>
    <body>


    <script src="/jquery.js"></script>
    <!--    <script src="/jquery.slider.js"></script> -->
    <script src="/date.js"></script>
    <script src="/jquery.datePicker.js"></script>
    <script src="/carousel.js"></script>
    <script type="text/javascript">

    // Global minfo array holds the initial mealset
    var minfo = [];

    // Height of my nomeal picture
    var NOMEALHEIGHT = 256;

    // Global containing the user's name
    var username = "<%= user.username %>";

    // Create element wrapper
    var dc = function(a)
    {
        return document.createElement(a);
    };

    // Enable or disable debug trace
    debuglog = function(text) {
        console.log(text);
    }

    // Functionize mealinfo
    var MEALINFO = (function() {

        var NOMEAL = 0;
        var BREAKFAST = 1;
        var LUNCH = 2;
        var DINNER = 3;
        var SNACK = 4;
        var OTHER = 5;
        var MAXMEAL = 99;

        // Return constant given a string
        function mealToConst(meal)
        {
            if(meal == undefined || !meal)
            {
                return NOMEAL;
            }
            if(meal == "breakfast")
            {
                return BREAKFAST;
            }
            if(meal == "lunch")
            {
                return LUNCH;
            }
            if(meal == "dinner")
            {
                return DINNER;
            }
            if(meal == "snack")
            {
                return SNACK;
            }
            if(meal == "other")
            {
                return OTHER;
            }
            throw new Error("Invalid mealConst: " + meal);
        }

        // Utility function
		function mealDateToDate(mealdate)
		{
		    var year = mealdate / 1000000; mealdate %= 1000000;
		    var month = mealdate /  10000; mealdate %=   10000;
		    var day  = mealdate /     100;
		    return new Date(year, month-1, day);
		}

        function dateToMealDate(date, mealconst)
        {
            return  (date.getFullYear()    * 1000000) +
                    ((date.getMonth() + 1)   * 10000) +
                    (date.getDate()            * 100) +
                    (mealconst);
        }

        return {
            dateToMealDate  : dateToMealDate,
            mealDateToDate  : mealDateToDate,
            mealToConst     : mealToConst,
            NOMEAL          : NOMEAL,
            BREAKFAST       : BREAKFAST,
            LUNCH           : LUNCH,
            DINNER          : DINNER,
            SNACK           : SNACK,
            OTHER           : OTHER,
            MAXMEAL         : MAXMEAL
        };
    }());

    // Search for a specific timestamp
    var findpicidx = (function(cfg) {

        // 100 or less does better with linear search
        var optcutoff = (cfg && cfg.optcutoff) ? cfg.optcutoff : 100;

        // Binary search function
        function binarysearch(pinfo, timestamp) {

            var left = 0;
            var right = pinfo.length;
            var ii = Math.floor(left + ((right - left) / 2));

            // This shouldn't happen
            if(!pinfo || pinfo.length <= 0) {
                debuglog('Error: findpicidx called with a null pinfo');
            }

            // Loop
            while(true) {

                // Found index
                if(pinfo[ii].timestamp == timestamp)
                    return ii;

                // Change left endpoint
                if(timestamp > pinfo[ii].timestamp)
                    left = ii + 1;

                // Change right endpoint
                else if(timestamp < pinfo[ii].timestamp)
                    right = ii;

                // Didn't find it
                if(left >= right) return -1;

                // Next element
                ii = Math.floor(left + ( (right - left) / 2));
            }
        }

        // Linear search function
        function linearsearch(pinfo, timestamp) {
            for(var ii = 0 ; ii < pinfo.length ; ii++) {
                if(pinfo[ii].timestamp == timestamp)
                    return ii;
            }
            return -1;
        }

        // Use binary search if it pays off
        function optimalsearch(pinfo, timestamp) {
            if(pinfo.length < optcutoff) {
                return linearsearch(pinfo, timestamp);
            }
            else {
                return binarysearch(pinfo, timestamp);
            }
        }

        return {
            linearsearch    : linearsearch,
            binarysearch    : binarysearch,
            search          : optimalsearch
        };
    }( 
        // XXX Do different browsers have different cutoffs? XXX
        { optcutoff : 100 } 
    ));

    // Simple mealpage class
    function mealpage(timestamp) {

        this.timestamp = timestamp;
        return this;

    }

    // Create string format for dates
    Date.prototype.asMyString = function() {
        var monthNames = [ "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December" ];
        return monthNames[this.getMonth()] + ' ' + this.getDate() + ', ' + this.getFullYear();
    }

    // Create string format for griddates
    Date.prototype.asSlashString = function() {
        return (this.getMonth() + 1) + '/' + this.getDate() + '/' + this.getFullYear();
    }

    // jquery ready handler
    $(document).ready(function() {

        $.ajaxSetup ({ cache: false });

        // This might eventually configure itself according to the initial
        // size of the user's screen.  The server side can't possibly know what
        // that is, so I have the server send enough information to draw the 
        // maximum screen.  This code sets the nextpage variable to the correct 
        // timestamp based on the number of meals drawn.
        var nextpage = null;

        var mcount = picturegrid.mealcount();

        if(minfo.length > mcount) {

            nextpage = new mealpage(minfo[mcount].timestamp);

        }

        // Display the navigation bar
        if(undefined != gridnav)
            gridnav.displaynav();

        // Display the picture grid
        if(undefined != picturegrid)
            picturegrid.displaygrid(minfo, null, nextpage, 'forwards');


        /* Not yet - I have grand plans here.  Eventually I might allow
         * the user to enter in the restaurant for a given meal.  This would
         * be an autocomplete toolbar which takes the user's current location
         * into account. */

        /*
        if(navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                function(position) {
                    debuglog('updating position');
                    $.ajax({
                        url: '/updateposition',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(
                            {
                                username: meal.username,
                                position: position
                            }),
                        dataType: 'json',
    
                        complete: function(resp, astat){
                        }
                    });
                }, 
                function(error) {}, 
                { enableHighAccuracy: true }
            );
        }
        */
    });


    </script>


        <div class="boxesClass" id="boxes">
        <div class="container_12" id="boxes_container">

            <!--
            <div class="grid_2 prefix_10">
                <a id='newmealpopup' href='javascript:void(0)'>New Meal</a>
            </div>
            <div class="clear"></div>
            -->


            </div> <!-- container_12 -->

            <center>

            <div class='picturegridDiv' id='picturegridDiv' name='picturegridDiv'></div> 
            <div class='gridNavDiv' id='gridNavDiv'></div>

            </center>

        </div> <!-- boxes -->
        <div id="hiddenElements" class="hiddenElements" name="hiddenElements"></div>


        <script type="text/javascript">

// Show attributes 
showattributes = (function($jq) {

    // Cache jquery
    var $ = $jq;

    // Keep track of the maskfade width
    var maskfadewidth;

    // Grid object coresponding to modal
    var gridobj;

    // Set search function
    var findpicidx; 

    // Hold popup in here
    var popup;

    // Holds carousel object
    var elm;

    // Hold fademask in here
    var maskfade=null;

    // Minimum mask width
    var minmaskfadewidth;

    // Mask height
    var maskfadeheight;

    // Opacity
    var maskfadeopacity;

    // Where to append the 
    var appendpop;

    // Width of modal
    var modalwidth;

    // Hidden frame
    var hiddenframe;

    // Grid delete function
    var griddelete;

    // Set the display picture
    var setgriddisplay;

    // Set the grid title
    var setgridtitle;

    // Set the update count function
    var setgridcount;

    // Set the meal on the grid
    var setgridmeal;

    // Element creator
    var dc;

    // Keep track of the window's width
    var windowwidth;

    // Keep track of the window's height
    var windowheight;

    // Create a carousel
    var createcarousel;

    // Whether this is showing
    var isshowing;
 
    // Whether to show the calendar
    var showdate;

    // Must init before using
    function init(findp, makecarousel, cfg) {

        // Shorten function name
        cfg.hp = cfg.hasOwnProperty;

        // Set search function
        findpicidx = findp;

        // Set the create carousel function
        createcarousel = makecarousel;

        // Minimum mask width
        minmaskfadewidth = cfg.hp("minmaskfadewidth") ? cfg.minmaskfadewidth : 1024;
    
        // Mask height
        maskfadeheight = cfg.hp("maskfadeheight") ? cfg.maskfadeheight : 2000;
    
        // Opacity
        maskfadeopacity = cfg.hp("maskfadeopacity") ? cfg.maskfadeopacity : 0.6;
    
        // Where to append the 
        appendpop = cfg.hp("appendpop") ? cfg.appendpop : null;
    
        // Width of modal
        modalwidth = cfg.hp("modalwidth") ? cfg.modalwidth : 800;
    
        // Hidden frame
        hiddenframe = cfg.hp("hiddenframe") ? cfg.hiddenframe : $('#hiddenElements')[0];
    
        // Grid delete function
        griddelete = cfg.hp("griddelete") ? cfg.griddelete : null;
    
        // Set the display picture
        setgriddisplay = cfg.hp("setgriddisplay") ? cfg.setgriddisplay : null;
    
        // Set the grid title
        setgridtitle = cfg.hp("setgridtitle") ? cfg.setgridtitle : null;
    
        // Set the update count function
        setgridcount = cfg.hp("setgridcount") ? cfg.setgridcount : null;
    
        // Set the meal on the grid
        setgridmeal = cfg.hp("setgridmeal") ? cfg.setgridmeal : null;

        // Set the show calendar 
        showdate = cfg.hp("showdate") ? cfg.showdate : false;

        // We are not showing
        isshowing = false;

        // Element creator
        dc = cfg.hp("createelm") ? cfg.createelm : function(a) {
            return document.createElement(a);
        }
    
        // Keep track of the window's width
        windowwidth = $(window).width();
    
        // Keep track of the window's height
        windowheight = $(window).height();

        // Create the background for this
        maskfade = $(dc('div'))
            .attr('id', 'maskfade')
            .attr('class', 'maskclass')
            .css({'display':'none'})
            .appendTo('body');
    
        // Click handler for background
        maskfade.click(function() {
    
            destroymodal();
    
        });
    }

    // Update the rating
    function updateRatingAjax(meal, rating) {
        $.ajax({
            url: '/saverating',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(
                {
                    username: meal.username,
                    timestamp: meal.timestamp,
                    rating: rating
                }),
            dataType: 'json',
            complete: function(resp, astat) {
                //debuglog('put a breakpoint here');
            }
        });
    }
    
    // Make this a key picture
    function makeKeyPicAjax(meal, picInfo) {
        $.ajax({
            url: '/updatekeypic',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(
                {
                    username: meal.username,
                    mealts: meal.timestamp,
                    keyts: picInfo.timestamp,
                }),
            dataType: 'json',
            complete: function(resp, astat) {
            }
        });
    }
    
    // Delete this picture
    function deletePicAjax(meal, picInfo) {
        $.ajax({
            url: '/deletepic',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(
                {
                    username: meal.username,
                    mealts: meal.timestamp,
                    timestamp: picInfo.timestamp,
                }),
            dataType: 'json',
            complete: function(resp, astat) {
            }
        });
    }
    
    // Update the server meal
    function updateMealAjax(meal, newMeal) {
        $.ajax({
            url: '/savemeal',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(
                {
                    username: meal.username,
                    timestamp: meal.timestamp,
                    meal: newMeal
                }),
            dataType: 'json',
            complete: function(resp, astat) {
            }
        });
    }
    
    // Update the server review
    function updateReviewAjax(meal, review) {
        $.ajax({
            url: '/savereview',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(
                {
                    username: meal.username,
                    timestamp: meal.timestamp,
                    review: review
                }),
            dataType: 'json',
            // TODO: consolidated JSON response handling
            complete: function(resp, astat){
            }
        });
    }
    
    // Update the server mealdate
    function updateMealDateAjax(meal, mealdate) {
        $.ajax({
            url: '/savemealdate',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(
                {
                    username: meal.username,
                    timestamp: meal.timestamp,
                    mealdate: mealdate
                }),
            dataType: 'json',
            // TODO: consolidated JSON response handling
            complete: function(resp, astat){
            }
        });
    }

    // Set the griddelete function
    function setgriddeletecallback(callback) {

        griddelete = callback;

    }

    // Calculate size of the modal textarea
    function gettextareawidth() {

        $.browser.chrome = /chrome/.test(navigator.userAgent.toLowerCase());

        // Return 65 if we're mozilla
        if($.browser.mozilla) {
            return 65;
        }

        // Return 57 if we're chrome
        if($.browser.chrome) {
            return 57;
        }

        // Default to 65
        return 65;
    }

    // Set textarea width
    var textareawidth = gettextareawidth();

    // Glue to set the grid title 
    function setgridtitlecallback(callback) {

        setgridtitle = callback;

    }

    // Glue to set the grid display picture
    function setgriddisplaycallback(callback) {

        setgriddisplay = callback;

    }

    // Callback to update the grid counter
    function setgridcountcallback(callback) {

        setgridcount = callback;

    }

    // Callback to update grid meal
    function setgridmealcallback(callback) {

        setgridmeal = callback;

    }


    // Tear down
    function destroymodal(faded) {

        // Destroy carousel
        elm.destroy();

        // Nullify
        elm = null;

        // See if 
        if(!faded) {

            // Fade out popup
            popup.fadeOut(0);

            // Remove background
            maskfade.css({'display':'none'});
        }

        // Remove popup
        popup.remove();

        // nullify attribute
        popup = null;

        // nullify gridobj
        gridobj = null;

        // We are not showing
        isshowing = false;

    }

    // Return true if the modal is showing
    function modalisshowing() {

        return isshowing;

    }

    // Fade then tear down
    function fadedestroymodal() {

        var fadedcnt=0;

        // Fade out the popup
        popup.fadeOut(
            500,
            function() { 
                ++fadedcnt;
                if(2 == fadedcnt) {
                    destroymodal(true); 
                }
            }
        );

        // Fade out the background
        maskfade.fadeOut(
            500,
            function() { 
                ++fadedcnt;
                if(2 == fadedcnt) {
                    destroymodal(true); 
                }
            }
        );
    }

    // Update sizes
    function updatewindowdims() {

        // Set width of the window
        windowwidth = $(window).width();

        // Set height of the window
        windowheight = $(window).height();

    }

    // Set dimensions & display modal
    function positionmodal() {

        // Half the width of the modal
        var left = modalwidth / 2;

        // Half the width of the mask
        var halfmaskwidth = maskfadewidth / 2;

        // Location of the left side of the popup
        var popupleft = halfmaskwidth - left;

        // Top stays static
        popup.css('top', 30);

        // Set the left
        popup.css('left', popupleft);

    }

    // TODO: resize handler function

    // Set dimensions & display background
    function showmaskfade() {

        // Get window width
        var wid = windowwidth;

        // Set sane minimum
        if(wid < minmaskfadewidth) 
            wid = minmaskfadewidth;

        // Set css
        maskfade.css(
            {
                'width':wid + 'px', 
                'height': maskfadeheight + 'px', 
                'opacity':maskfadeopacity, 
                'display':'block'
            }
        );

        // Set new maskfadewidth
        maskfadewidth = wid;
    }

    // Meal attributes / edit modal
    function uploadmealpopup(username, mealts, callback) {
    
        $(hiddenframe).empty();
    
        var hiddeniframe = $(dc('iframe'))
            .attr('style', 'width:0px;height:0px;border:0px;')
            .attr('name', 'hiddeniframe')
            .attr('id', 'hiddeniframe');
    
        var uploadform = $(dc('form'))
            .attr('id', 'uploadform')
            .attr('name', 'uploadform')
            .attr('method', 'post')
            .attr('enctype', 'multipart/form-data')
            .attr('action', '/editmealsupload')
            .attr('target', 'hiddeniframe');
    
        uploadform.appendTo(hiddeniframe);
    
        // Wait for the html of the hidden iframe to change: tells you that
        // the upload was successful.
        var fileupload = $(dc('input'))
            .attr('type', 'file')
            .attr('name', 'inputupload')
            .attr('id', 'inputupload');
    
        // Pass the userid.
        var userid = $(dc('input'))
            .attr('type', 'hidden')
            .attr('name', 'username')
            .attr('id', 'username')
            .val(username);
    
        // Send the timestamp of the corresponding meal
        var mealtimestamp = $(dc('input'))
            .attr('type', 'hidden')
            .attr('name', 'mealInfo')
            .attr('id', 'mealInfo')
            .val(mealts);
    
        hiddeniframe.appendTo(hiddenframe);
    
        var cnt = 0;
    
        // TODO - this could be slow.. maybe i could show a popup bar 
        // saying that things are uploading?
        function checkuploaded() {
    
            // Jquery-ize hidden iframe
            var $hiddeniframe = $(hiddeniframe);

            // Grab the text
            var bodytext = $hiddeniframe.contents().find('body').html();
    
            // The format is 'SUCCESS <timestamp> <mealheight> <thumbheight>"
            var regex = /^SUCCESS [0-9]+ [0-9]+ [0-9]+$/;
    
            // TODO: put a reasonable hard-timeout here.
            //
            // if the timeout expires, reload the 'main' page with a special
            // tag that says 'edit the first picture if it's greater than the 
            // first picture I've ever seen (pass that in the request).  Otherwise, 
            // print an error message.
            if(null == bodytext || bodytext == "") {

                debuglog('checkuploaded bodytext is null - resetting timeout, cnt is ' + cnt++);
                setTimeout(checkuploaded, 500);
                return;

            }
    
            // Success case 
            if(regex.test(bodytext)) {
    
                // Split on the spaces
                var ar = bodytext.split(" ");
    
                // Retrieve picture timestamp
                var picts = parseInt(ar[1], 10);
    
                // Retrieve picture height
                var height = parseInt(ar[2], 10);
    
                // Retrieve thumbnail height
                var thumbheight = parseInt(ar[3], 10);
    
                // Create minimal picinfo
                var pinfo = { 'timestamp' : picts, 'height': height, 'thumbheight': thumbheight };
    
                // Debug messages
                debuglog('checkuploaded timestamp is ' + picts);
                debuglog('checkuploaded height is ' + height);
                debuglog('cnt is ' + cnt++);
    
                // Add to the picture-mobile
                callback(null, pinfo);
                return;
            }
            else {

                // Redirect to the homepage on error
                debuglog('Error from server: ' + bodytext);
                window.location.replace("/");
            }
        }
    
        // Invoked when the user selects a file
        fileupload.change(function() {

            uploadform.submit();
            setTimeout(checkuploaded, 500);

        });
    
        // Append these to the form
        fileupload.appendTo(uploadform);
        userid.appendTo(uploadform);
        mealtimestamp.appendTo(uploadform);
    
        // Display a dialog box
        $(fileupload).click();
    
    }

    // function which creates the delete anchor
    function createdeleteanchor(meal) {

        var deleteAnchor = $(dc('a'))
            .attr('id', 'deletePictureAnchor')
            .attr('class', 'carousel_caption deletePictureAnchor grid_3')
            .html('Delete Picture');
    
        // Click handler
        deleteAnchor.click(function() {
    
            // Remove picture from carousel
            elm.removepicture(function(removed, pinfo) {
    
                if(removed) {
    
                    // Find index of removed photo
                    var ii = findpicidx(meal.picInfo, pinfo.timestamp);
    
                    // Remove this picture
                    if(ii >= 0) {
                        meal.picInfo.splice(ii, 1);
                    }
    
                    var changepic = false;
    
                    // Delete from mongo
                    deletePicAjax(meal, pinfo);
    
                    // Was this a key picture
                    if(pinfo.timestamp == meal.keytimestamp) {
    
                        changepic = true;
                        meal.keytimestamp = 0;
    
                    }
    
                    // If this was the first picture
                    if(!meal.keytimestamp && ii == 0) {
                        changepic = true;
                    }
    
                    // Changing the displaypic
                    if(changepic) {
                        var pinfo0;
    
                        // Get new key picture
                        if(meal.picInfo.length > 0) {
                            pinfo0 = meal.picInfo[0];
                        }
    
                        // Set new display picture
                        if(setgriddisplay) {
                            setgriddisplay(meal, pinfo0);
                        }
                    }
    
                    // Update grid picture count
                    if(setgridcount)
                        setgridcount(meal);
                }
            });
        });

        return deleteAnchor;
    }
    
    // Internal function to create the key anchor
    function createkeyanchor(meal) {
        var makeKeyAnchor = $(dc('a'))
            .attr('id', 'keyAnchor')
            .attr('class', 'carousel_caption keyAnchor grid_2')
            .html('Make Key Photo');
    
        // Make this general & use same code for delete [0] case
        makeKeyAnchor.click(function() {
    
            // ajax for username, mealts, and keyts
            elm.makekeypicture(function(success, pinfo) {
    
                if(success) {
    
                    // Update mongo on the server
                    makeKeyPicAjax(meal, pinfo);
    
                    // Set the display picture
                    if(setgriddisplay) {
                        setgriddisplay(meal, pinfo);
                    }
                }
            });
        });
        return makeKeyAnchor;
    }


    // Internal function creates the subcarousel upload anchor
    function createuploadanchor(meal) {

        // Create anchor object
        var uploadAnchor = $(dc('a'))
            .attr('id', 'uploadPictureAnchor')
            .attr('class', 'carousel_caption uploadPictureAnchor grid_3')
            .html('Upload New Picture');
    
        // Click function for the upload anchor
        uploadAnchor.click(function() {
    
            // Popup works from a hidden frame
            uploadmealpopup(meal.username, meal.timestamp, function(err, pinfo) {
    
                // Throw any errors
                if(err) throw(err);
    
                // Add this to the carousel
                elm.addpicture(pinfo, false, false, function(added, ckfirst, ts) {
    
                    if(added) {
    
                        // Make key photo if this was the first
                        if(ckfirst && setgriddisplay) {
                            setgriddisplay(meal, pinfo);
                        }
    
                        debuglog('pushing ' + pinfo.timestamp + ' ts is ' + ts);
    
                        // Push this picture onto the meal.picInfo array
                        meal.picInfo.push(pinfo);
    
                        // Update picture count
                        if(setgridcount) 
                            setgridcount(meal);
                    }
    
                    // Set the focus back on the carousel
                    elm.focus();
                });
    
            });
        });

        return uploadAnchor;
    }
    
    // Meal attributes / edit modal
    function showattributesmealinfo(username, meal, restaurant, restaurantId) {
    
        var username = meal.username;
        var timestamp = meal.timestamp;
    
        // Create the popup div
        popup = $(dc('div'))
            .attr('id', 'mealAttributes')
            .attr('class', 'mealAttributesPopup')
            .css('z-index', '9999')
            .css('padding', '20px');
    
        // Center things on this popup.  
        var centr = $(dc('center'));
    
        // Carousel div
        var carouselDivContainer = $(dc('div'))
            .attr('id', 'mealCarouselContainer')
            .attr('class', 'mealCarouselContainer');
    
        // Create a carousel
        elm = createcarousel(username, 'pics', 
                meal.picInfo, findpicidx, meal.keytimestamp);
    
        // Append it to the div
        elm.appendTo(carouselDivContainer);
    
        // Append carousel to popup
        carouselDivContainer.appendTo(centr);
    
        // Create a container for the dismiss box
        var closexContainer = $(dc('div'))
            .attr('id', 'mealAttributesCloseContainer')
            .attr('class', 'mealAttributesCloseContainer');
    
        // Create an anchor for the dismiss box
        var closex = $(dc('a'))
            .attr('id', 'mealAttributesCloseButton')
            .attr('class', 'mealAttributesCloseButton')
            .html('x');
    
        // Click handler for dismiss box
        closex.click(function(){
            destroymodal();
        });
    
        // Append to popup
        closex.appendTo(closexContainer);
        closexContainer.appendTo(popup);
    
        // Append center to popup
        centr.appendTo(popup);
    
        // Create a class_8 container
        var class8 = $(dc('div'))
            .attr('id', 'mealAttributesClass8')
            .attr('class', 'container_8');
    
        // Hold objects directly beneath the carousel
        var subcarousel = $(dc('div'))
            .attr('id', 'subcarousel')
            .attr('class', 'carousel_caption');
    
        // Create my upload anchor
        var uploadAnchor = createuploadanchor(meal);
    
        // Retrieve a delete anchor
        var makeKeyAnchor = createkeyanchor(meal);
    
        // Create delete picture anchor
        var deleteAnchor = createdeleteanchor(meal);
    
        // Add to the carousel fadeobjs
        elm.addfadeobj(makeKeyAnchor.get(0));
    
        // Add to the carousel fade objects
        elm.addfadeobj(deleteAnchor.get(0));
    
        // Clear 
        var carouselClear = $(dc('div'))
            .attr('class', 'clear');
    
        // Attach to popup
        uploadAnchor.appendTo(subcarousel);
        makeKeyAnchor.appendTo(subcarousel);
        deleteAnchor.appendTo(subcarousel);
        subcarousel.appendTo(class8);
        carouselClear.appendTo(class8);
    
        // Lets skip a line
        var skipLine = $(dc('div'))
            .attr('class', 'grid_8 skipline')
            .html('.');
        var skipClear = $(dc('div'))
            .attr('class', 'clear');
    
        skipLine.appendTo(class8);
        skipClear.appendTo(class8);
    
        // Create a grid to hold the title
        var grid_title_pre = $(dc('div'))
            .attr('class', 'grid_3')
            .html('Title');
    
        var title = "<i>Click to edit title</i>";
    
        if(undefined != meal.title && meal.title.length > 0) {
            title = meal.title;
        }
    
        var hovertitle = $(dc('a'))
            .attr('id', 'titleEdit')
            .attr('class', 'titleEdit')
            .attr('title', 'click to edit')
            .html(title);
    
        // Title grid
        var grid_title = $(dc('div'))
            .attr('class', 'grid_5')
            .attr('id', 'pop_title');
    
        hovertitle.appendTo(grid_title);
    
        hovertitle.click(function(){
    
            var titleEditInput = $(dc('input'))
                .attr('type', 'text')
                .attr('class', 'titleEditInput')
                .attr('name', 'titleEditInput')
                .attr('maxlength', '29')
                .attr('size', '29')
                .val(meal.title);
    
            titleEditInput.appendTo(grid_title);
            $('#titleEdit').css({'display':'none'});
    
            titleEditInput.focus();
    
            // Disable carosel arrow behavior
            elm.disablekeydown();
    
            function blurTitleInput(meal, titleEditInput, keepcurrent) {
                if(titleEditInput.val() != meal.title && keepcurrent == 0) {
    
                    var titleEdit; 

                    meal.title = titleEditInput.val();

                    // If this is empty
                    if(undefined == meal.title || meal.title.length <= 0) {

                        // Change modal title
                        $(hovertitle).html("<i>Click to edit title</i>");

                    }
                    else {

                        // Change modal title
                        $(hovertitle).html(meal.title);

                    }

                    // Change grid title
                    if(setgridtitle) {
                        setgridtitle(meal);
                    }
    
                    $.ajax({
                        url: '/savetitle',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(
                            {
                                username: meal.username,
                                timestamp: meal.timestamp,
                                title: titleEditInput.val()
                            }),
                        dataType: 'json',
                        complete: function(resp, astat) {
                        }
                    });
                }

                // Change grid title css
                $(hovertitle).css({'display':'inline-block'});

                // Remove input box
                titleEditInput.remove();

                // Allow keyboard carousel control
                elm.enablekeydown();
            }
    
    
            // I want certain keys (return or tab) to force a blur
            titleEditInput.keydown(function(e){
                var code = (e.keyCode ? e.keyCode : e.which);
                switch(code) {
                    // XXX 
                    case 39:
                    case 37:
                        return true;
                        break;
                    case 13:
                    case 9:
                        titleEditInput.blur();
                        return false;
                        break;
                    case 27:
                        blurTitleInput(meal, titleEditInput, 1);
                        return false;
                        break;
                }
            });
    
            titleEditInput.blur(function() {
                    blurTitleInput(meal, titleEditInput, 0);
            });
        });
    
        var grid_title_clear = $(dc('div'))
            .attr('class', 'clear');
    
        // Append title
        grid_title_pre.appendTo(class8);
        grid_title.appendTo(class8);
        grid_title_clear.appendTo(class8);
    
        if(showdate) {
    
            var grid_date_pre = $(dc('div'))
                .attr('class', 'grid_3')
                .html('Date');
            
            var grid_date = $(dc('div'))
                .attr('class', 'grid_5')
                .attr('id', 'pop_date');
        
            var mealDate = MEALINFO.mealDateToDate(meal.mealDate);
        
            var grid_date_anchor = $(dc('a'))
                .attr('id', 'pop_date_anchor')
                .attr('class', 'pop_date_anchor')
                .attr('title', 'click to edit')
                .css({'display':'inline-block'});
        
            var grid_date_text = $(dc('div'))
                .attr('id', 'pop_date_text')
                .attr('class', 'pop_date_text')
                .html(new Date(mealDate).asMyString());
        
            grid_date_text.appendTo(grid_date_anchor);
        
            var grid_date_input = $(dc('input'))
                .attr('type', 'text')
                .attr('class', 'pop_date_input')
                .attr('id', 'pop_date_input')
                .attr('name', 'pop_date_input')
                .val(new Date(mealDate).asString());
        
            // This append *must* occur before the call to datePicker.
            grid_date_input.appendTo(grid_date);
        
            grid_date_anchor.appendTo(grid_date);
        
            grid_date_input.datePicker( { createButton: false, startDate: new Date(1990, 0, 1) } );
        
            grid_date_input.css({'display':'none'});
        
            grid_date_text.click(function() {
                grid_date_input.dpDisplay(grid_date);
            });
        
            grid_date_input.on('dateSelected', function(e, sdate, td, selected) {
                // Set the pop-up date
                $('#pop_date_text').html(sdate.asMyString());
        
                // Calculate the mealdate
                var md = MEALINFO.dateToMealDate(sdate, MEALINFO.mealToConst(meal.meal));
        
                // Update server side
                updateMealDateAjax(meal, md);
        
                return false;
            });
        
            var grid_date_clear = $(dc('div'))
                .attr('class', 'clear');
        
            grid_date_pre.appendTo(class8);
            grid_date.appendTo(class8);
            grid_date_clear.appendTo(class8);
    
        }
    
        var whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
    
        // Which meal
        var grid_meal_pre = $(dc('div'))
            .attr('class', 'grid_3')
            .html('Meal');
    
        var grid_meal = $(dc('div'))
            .attr('class', 'grid_5')
            .attr('id', 'pop_meal');
    
        // Create the which-meal selection menu
        var grid_meal_select_div = $(dc('div'))
            .attr('class', 'meal_select_menu_div')
            .attr('id', 'meal_select_menu_div')
            .css({'display': 'block'});
    
        var grid_meal_select = $(dc('ul'))
            .attr('class', 'meal_select_menu')
            .attr('id', 'meal_select_menu')
            .attr('name', 'meal_select_menu');
    
        // BREAKFAST
        var grid_meal_select_meal_breakfast = $(dc('li'))
            .attr('class', 'meal_select_menu_selection')
            .attr('name', 'meal_select_menu_breakfast')
            .attr('id', 'meal_select_menu_breakfast');
    
        var grid_meal_select_meal_breakfast_anchor = $(dc('a'))
            .attr('id', 'meal_select_breakfast_anchor')
            .attr('class', 'meal_select_anchor')
            .html('Breakfast');
    
        if(meal.meal == "breakfast") {
            grid_meal_select_meal_breakfast_anchor.attr('class', 'grid_meal_selected');
        }
        
        grid_meal_select_meal_breakfast_anchor.click(function() {
            if(meal.meal == "breakfast") {
                return;
            }
            if(meal.meal == "lunch" ) {
                grid_meal_select_meal_lunch_anchor.removeClass('grid_meal_selected');
            }
            if(meal.meal == "dinner" ) {
                grid_meal_select_meal_dinner_anchor.removeClass('grid_meal_selected');
            }
            if(meal.meal == "snack" ) {
                grid_meal_select_meal_snack_anchor.removeClass('grid_meal_selected');
            }
            if(meal.meal == "other" ) {
                grid_meal_select_meal_other_anchor.removeClass('grid_meal_selected');
            }
            grid_meal_select_meal_breakfast_anchor.attr('class', 'grid_meal_selected');
            meal.meal = "breakfast";
            whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
            grid_meal.html(whichmeal);
            updateMealAjax(meal, "breakfast");
            if(setgridmeal) setgridmeal(meal);
        });
    
        grid_meal_select_meal_breakfast_anchor.appendTo(grid_meal_select_meal_breakfast);
    
        // LUNCH
        var grid_meal_select_meal_lunch = $(dc('li'))
            .attr('class', 'meal_select_menu_selection')
            .attr('name', 'meal_select_menu_lunch')
            .attr('id', 'meal_select_menu_lunch');
    
        var grid_meal_select_meal_lunch_anchor = $(dc('a'))
            .attr('id', 'meal_select_lunch_anchor')
            .attr('class', 'meal_select_anchor')
            .html('Lunch');
        if(meal.meal == "lunch") {
            grid_meal_select_meal_lunch_anchor.attr('class', 'grid_meal_selected');
        }
        grid_meal_select_meal_lunch_anchor.click(function() {
            if(meal.meal == "lunch") {
                return;
            }
            if(meal.meal == "breakfast" ) {
                grid_meal_select_meal_breakfast_anchor.removeClass('grid_meal_selected');
            }
            if(meal.meal == "dinner" ) {
                grid_meal_select_meal_dinner_anchor.removeClass('grid_meal_selected');
            }
            if(meal.meal == "snack" ) {
                grid_meal_select_meal_snack_anchor.removeClass('grid_meal_selected');
            }
            if(meal.meal == "other" ) {
                grid_meal_select_meal_other_anchor.removeClass('grid_meal_selected');
            }
            grid_meal_select_meal_lunch_anchor.attr('class', 'grid_meal_selected');
            meal.meal = "lunch";
            whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
            grid_meal.html(whichmeal);
            updateMealAjax(meal, "lunch");
            if(setgridmeal) setgridmeal(meal);
        });
        grid_meal_select_meal_lunch_anchor.appendTo(grid_meal_select_meal_lunch);
    
        // DINNER
        var grid_meal_select_meal_dinner = $(dc('li'))
            .attr('class', 'meal_select_menu_selection')
            .attr('name', 'meal_select_menu_dinner')
            .attr('id', 'meal_select_menu_dinner');
        var grid_meal_select_meal_dinner_anchor = $(dc('a'))
            .attr('id', 'meal_select_dinner_anchor')
            .attr('class', 'meal_select_anchor')
            .html('Dinner');
        if(meal.meal == "dinner") {
            grid_meal_select_meal_dinner_anchor.attr('class', 'grid_meal_selected');
        }
        grid_meal_select_meal_dinner_anchor.click(function() {
            if(meal.meal == "dinner") {
                return;
            }
            if(meal.meal == "breakfast" ) {
                grid_meal_select_meal_breakfast_anchor.removeClass('grid_meal_selected');
            }
            if(meal.meal == "lunch" ) {
                grid_meal_select_meal_lunch_anchor.removeClass('grid_meal_selected');
            }
            if(meal.meal == "snack" ) {
                grid_meal_select_meal_snack_anchor.removeClass('grid_meal_selected');
            }
            if(meal.meal == "other" ) {
                grid_meal_select_meal_other_anchor.removeClass('grid_meal_selected');
            }
            grid_meal_select_meal_dinner_anchor.attr('class', 'grid_meal_selected');
            meal.meal = "dinner";
            whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
            grid_meal.html(whichmeal);
            updateMealAjax(meal, "dinner");
            if(setgridmeal) setgridmeal(meal);
        });
        grid_meal_select_meal_dinner_anchor.appendTo(grid_meal_select_meal_dinner);
    
        // SNACK
        var grid_meal_select_meal_snack = $(dc('li'))
            .attr('class', 'meal_select_menu_selection')
            .attr('name', 'meal_select_menu_snack')
            .attr('id', 'meal_select_menu_snack');
        var grid_meal_select_meal_snack_anchor = $(dc('a'))
            .attr('id', 'meal_select_snack_anchor')
            .attr('class', 'meal_select_anchor')
            .html('Snack');
        if(meal.meal == "snack") {
            grid_meal_select_meal_snack_anchor.attr('class', 'grid_meal_selected');
        }
        grid_meal_select_meal_snack_anchor.click(function() {
            if(meal.meal == "snack") {
                return;
            }
            if(meal.meal == "breakfast" ) {
                grid_meal_select_meal_breakfast_anchor.removeClass('grid_meal_selected');
            }
            if(meal.meal == "lunch" ) {
                grid_meal_select_meal_lunch_anchor.removeClass('grid_meal_selected');
            }
            if(meal.meal == "dinner" ) {
                grid_meal_select_meal_dinner_anchor.removeClass('grid_meal_selected');
            }
            if(meal.meal == "other" ) {
                grid_meal_select_meal_other_anchor.removeClass('grid_meal_selected');
            }
            grid_meal_select_meal_snack_anchor.attr('class', 'grid_meal_selected');
            meal.meal = "snack";
            whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
            grid_meal.html(whichmeal);
            updateMealAjax(meal, "snack");
            if(setgridmeal) setgridmeal(meal);
        });
        grid_meal_select_meal_snack_anchor.appendTo(grid_meal_select_meal_snack);
    
        var grid_meal_select_meal_other = $(dc('li'))
            .attr('class', 'meal_select_menu_selection')
            .attr('name', 'meal_select_menu_other')
            .attr('id', 'meal_select_menu_other');
        var grid_meal_select_meal_other_anchor = $(dc('a'))
            .attr('id', 'meal_select_other_anchor')
            .attr('class', 'meal_select_anchor')
            .html('Other');
        if(meal.meal == "other") {
            grid_meal_select_meal_other_anchor.attr('class', 'grid_meal_selected');
        }
        grid_meal_select_meal_other_anchor.click(function() {
            if(meal.meal == "other") {
                return;
            }
            if(meal.meal == "breakfast" ) {
                grid_meal_select_meal_breakfast_anchor.removeClass('grid_meal_selected');
            }
            if(meal.meal == "lunch" ) {
                grid_meal_select_meal_lunch_anchor.removeClass('grid_meal_selected');
            }
            if(meal.meal == "dinner" ) {
                grid_meal_select_meal_dinner_anchor.removeClass('grid_meal_selected');
            }
            if(meal.meal == "snack" ) {
                grid_meal_select_meal_snack_anchor.removeClass('grid_meal_selected');
            }
            grid_meal_select_meal_other_anchor.attr('class', 'grid_meal_selected');
            meal.meal = "other";
            whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
            grid_meal.html(whichmeal);
            updateMealAjax(meal, "other");
            if(setgridmeal) setgridmeal(meal); });
        grid_meal_select_meal_other_anchor.appendTo(grid_meal_select_meal_other);
    
        // build menu
        grid_meal_select_meal_breakfast.appendTo(grid_meal_select);
        grid_meal_select_meal_lunch.appendTo(grid_meal_select);
        grid_meal_select_meal_dinner.appendTo(grid_meal_select);
        grid_meal_select_meal_snack.appendTo(grid_meal_select);
        grid_meal_select_meal_other.appendTo(grid_meal_select);
        grid_meal_select.appendTo(grid_meal_select_div);
    
        // Define hover behaviors
        /*
        grid_meal.mouseenter(
            function(){
                $('#meal_select_menu_div').css({ 'display': 'block' });
            }
        );
    
        grid_meal_select_div.mouseleave(
            function(){
                $('#meal_select_menu_div').css({ 'display': 'none' });
            }
        );
        */
    
        var grid_meal_clear = $(dc('div'))
            .attr('class', 'clear');
    
        // Append meal
        grid_meal_pre.appendTo(class8);
        grid_meal.appendTo(class8);
        grid_meal_select_div.appendTo(class8);
        grid_meal_clear.appendTo(class8);
    
        // How many stars
        var grid_stars_pre = $(dc('div'))
            .attr('class', 'grid_3')
            .html('Rating');
    
        // Rating selector container
        var grid_stars = $(dc('div'))
            .attr('class', 'grid_5')
            .attr('id', 'pop_rating')
            .attr('name', 'name_rating');
    
        // Create a sub-div that will contain the star-elements
        var grid_stars_select_div = $(dc('div'))
            .attr('class', 'stars_select_menu_div')
            .attr('id', 'stars_select_menu_div');
    
        // Start an unordered list
        var grid_stars_select = $(dc('ul'))
            .attr('class', 'stars_select_menu')
            .attr('id', 'stars_select_menu')
            .attr('name', 'stars_select_menu');
    
        // There will be five of them
        var grid_stars_select_stars_0 = $(dc('li'))
            .attr('class', 'star_select_menu_selection')
            .attr('name', 'star_select_menu_0')
            .attr('id', 'star_select_menu_0');
    
        var grid_stars_select_stars_0_anchor = $(dc('a'))
            .attr('id', 'stars_select_stars_0_anchor')
            .attr('class', 'stars_select_anchor')
            .css({ 'color' : '#fff' })
            .html('&#11036');
    
        var grid_stars_select_stars_1_anchor = $(dc('a'))
            .attr('id', 'stars_select_stars_1_anchor')
            .attr('class', 'stars_select_anchor')
            .html('&#9733;');
    
        var grid_stars_select_stars_2_anchor = $(dc('a'))
            .attr('id', 'stars_select_stars_2_anchor')
            .attr('class', 'stars_select_anchor')
            .html('&#9733;');
    
        var grid_stars_select_stars_3_anchor = $(dc('a'))
            .attr('id', 'stars_select_stars_3_anchor')
            .attr('class', 'stars_select_anchor')
            .html('&#9733;');
    
        var grid_stars_select_stars_4_anchor = $(dc('a'))
            .attr('id', 'stars_select_stars_4_anchor')
            .attr('class', 'stars_select_anchor')
            .html('&#9733;');
    
        var grid_stars_select_stars_5_anchor = $(dc('a'))
            .attr('id', 'stars_select_stars_5_anchor')
            .attr('class', 'stars_select_anchor')
            .html('&#9733;');
    
        // TODO - this could be more efficient 
        function reset_stars_select_classes_hover() {
            grid_stars_select_stars_0_anchor.removeClass("stars_unselected_star_hover");
            grid_stars_select_stars_1_anchor.removeClass("stars_unselected_star_hover");
            grid_stars_select_stars_2_anchor.removeClass("stars_unselected_star_hover");
            grid_stars_select_stars_3_anchor.removeClass("stars_unselected_star_hover");
            grid_stars_select_stars_4_anchor.removeClass("stars_unselected_star_hover");
            grid_stars_select_stars_5_anchor.removeClass("stars_unselected_star_hover");
    
            grid_stars_select_stars_0_anchor.removeClass("stars_selected_star_hover");
            grid_stars_select_stars_1_anchor.removeClass("stars_selected_star_hover");
            grid_stars_select_stars_2_anchor.removeClass("stars_selected_star_hover");
            grid_stars_select_stars_3_anchor.removeClass("stars_selected_star_hover");
            grid_stars_select_stars_4_anchor.removeClass("stars_selected_star_hover");
            grid_stars_select_stars_5_anchor.removeClass("stars_selected_star_hover");
        }
    
        // TODO - this could be more efficient 
        function reset_stars_select_classes() {
            grid_stars_select_stars_0_anchor.removeClass("stars_selected_star");
            grid_stars_select_stars_1_anchor.removeClass("stars_selected_star");
            grid_stars_select_stars_2_anchor.removeClass("stars_selected_star");
            grid_stars_select_stars_3_anchor.removeClass("stars_selected_star");
            grid_stars_select_stars_4_anchor.removeClass("stars_selected_star");
            grid_stars_select_stars_5_anchor.removeClass("stars_selected_star");
    
            grid_stars_select_stars_0_anchor.removeClass("stars_unselected_star");
            grid_stars_select_stars_1_anchor.removeClass("stars_unselected_star");
            grid_stars_select_stars_2_anchor.removeClass("stars_unselected_star");
            grid_stars_select_stars_3_anchor.removeClass("stars_unselected_star");
            grid_stars_select_stars_4_anchor.removeClass("stars_unselected_star");
            grid_stars_select_stars_5_anchor.removeClass("stars_unselected_star");
    
            if(meal.rating >= 1) {
                grid_stars_select_stars_1_anchor.attr('class', 'stars_selected_star');
            }
            else {
                grid_stars_select_stars_1_anchor.attr('class', 'stars_unselected_star');
            }
    
            if(meal.rating >= 2) {
                grid_stars_select_stars_2_anchor.attr('class', 'stars_selected_star');
            }
            else {
                grid_stars_select_stars_2_anchor.attr('class', 'stars_unselected_star');
            }
    
            if(meal.rating >= 3) {
                grid_stars_select_stars_3_anchor.attr('class', 'stars_selected_star');
            }
            else {
                grid_stars_select_stars_3_anchor.attr('class', 'stars_unselected_star');
            }
            if(meal.rating >= 4) {
                grid_stars_select_stars_4_anchor.attr('class', 'stars_selected_star');
            }
            else {
                grid_stars_select_stars_4_anchor.attr('class', 'stars_unselected_star');
            }
            if(meal.rating >= 5) {
                grid_stars_select_stars_5_anchor.attr('class', 'stars_selected_star');
            }
            else {
                grid_stars_select_stars_5_anchor.attr('class', 'stars_unselected_star');
            }
        }
    
        reset_stars_select_classes();
    
        function star_click(rating) {
            if(rating < 0 || rating > 5)
                return false;
            if(meal.rating == rating)
                return false;
            meal.rating = rating;
            updateRatingAjax(meal, rating);
            return false;
        }
    
        grid_stars_select_stars_0_anchor.mouseenter(
            function() {
                reset_stars_select_classes_hover();
                grid_stars_select_stars_1_anchor.addClass("stars_unselected_star_hover");
                grid_stars_select_stars_2_anchor.addClass("stars_unselected_star_hover");
                grid_stars_select_stars_3_anchor.addClass("stars_unselected_star_hover");
                grid_stars_select_stars_4_anchor.addClass("stars_unselected_star_hover");
                grid_stars_select_stars_5_anchor.addClass("stars_unselected_star_hover");
                }
        );
    
        grid_stars_select_stars_0_anchor.click(function() {
                star_click(0);
        });
    
        grid_stars_select_stars_0_anchor.appendTo(grid_stars_select_stars_0);
    
        var grid_stars_select_stars_1 = $(dc('li'))
            .attr('class', 'star_select_menu_selection')
            .attr('name', 'star_select_menu_1')
            .attr('id', 'star_select_menu_1');
    
        grid_stars_select_stars_1_anchor.mouseenter(
            function() {
                reset_stars_select_classes_hover();
                grid_stars_select_stars_1_anchor.addClass("stars_selected_star_hover");
                grid_stars_select_stars_2_anchor.addClass("stars_unselected_star_hover");
                grid_stars_select_stars_3_anchor.addClass("stars_unselected_star_hover");
                grid_stars_select_stars_4_anchor.addClass("stars_unselected_star_hover");
                grid_stars_select_stars_5_anchor.addClass("stars_unselected_star_hover");
                }
        );
    
        grid_stars_select_stars_1_anchor.click(function() {
                star_click(1);
        });
    
        grid_stars_select_stars_1_anchor.appendTo(grid_stars_select_stars_1);
    
        var grid_stars_select_stars_2 = $(dc('li'))
            .attr('class', 'star_select_menu_selection')
            .attr('name', 'star_select_menu_2')
            .attr('id', 'star_select_menu_2');
    
        grid_stars_select_stars_2_anchor.mouseenter(
            function() {
                reset_stars_select_classes_hover();
                grid_stars_select_stars_1_anchor.addClass("stars_selected_star_hover");
                grid_stars_select_stars_2_anchor.addClass("stars_selected_star_hover");
                grid_stars_select_stars_3_anchor.addClass("stars_unselected_star_hover");
                grid_stars_select_stars_4_anchor.addClass("stars_unselected_star_hover");
                grid_stars_select_stars_5_anchor.addClass("stars_unselected_star_hover");
            }
        );
        grid_stars_select_stars_2_anchor.click(function() {
                star_click(2);
        });
    
        grid_stars_select_stars_2_anchor.appendTo(grid_stars_select_stars_2);
    
        var grid_stars_select_stars_3 = $(dc('li'))
            .attr('class', 'star_select_menu_selection')
            .attr('name', 'star_select_menu_3')
            .attr('id', 'star_select_menu_3');
    
        grid_stars_select_stars_3_anchor.mouseenter(
            function() {
                reset_stars_select_classes_hover();
                grid_stars_select_stars_1_anchor.addClass("stars_selected_star_hover");
                grid_stars_select_stars_2_anchor.addClass("stars_selected_star_hover");
                grid_stars_select_stars_3_anchor.addClass("stars_selected_star_hover");
                grid_stars_select_stars_4_anchor.addClass("stars_unselected_star_hover");
                grid_stars_select_stars_5_anchor.addClass("stars_unselected_star_hover");
            }
        );
    
        grid_stars_select_stars_3_anchor.click(function() {
                star_click(3);
        });
        grid_stars_select_stars_3_anchor.appendTo(grid_stars_select_stars_3);
    
        var grid_stars_select_stars_4 = $(dc('li'))
            .attr('class', 'star_select_menu_selection')
            .attr('name', 'star_select_menu_4')
            .attr('id', 'star_select_menu_4');
    
        grid_stars_select_stars_4_anchor.mouseenter(
            function() {
                reset_stars_select_classes_hover();
                grid_stars_select_stars_1_anchor.addClass("stars_selected_star_hover");
                grid_stars_select_stars_2_anchor.addClass("stars_selected_star_hover");
                grid_stars_select_stars_3_anchor.addClass("stars_selected_star_hover");
                grid_stars_select_stars_4_anchor.addClass("stars_selected_star_hover");
                grid_stars_select_stars_5_anchor.addClass("stars_unselected_star_hover");
            }
        );
    
        grid_stars_select_stars_4_anchor.click(function() {
                star_click(4);
        });
        grid_stars_select_stars_4_anchor.appendTo(grid_stars_select_stars_4);
    
        var grid_stars_select_stars_5 = $(dc('li'))
            .attr('class', 'star_select_menu_selection')
            .attr('name', 'star_select_menu_5')
            .attr('id', 'star_select_menu_5');
    
        grid_stars_select_stars_5_anchor.mouseenter(
            function() {
                reset_stars_select_classes_hover();
                grid_stars_select_stars_1_anchor.addClass("stars_selected_star_hover");
                grid_stars_select_stars_2_anchor.addClass("stars_selected_star_hover");
                grid_stars_select_stars_3_anchor.addClass("stars_selected_star_hover");
                grid_stars_select_stars_4_anchor.addClass("stars_selected_star_hover");
                grid_stars_select_stars_5_anchor.addClass("stars_selected_star_hover");
            }
        );
    
        grid_stars_select_stars_5_anchor.click(function() {
                star_click(5);
        });
        grid_stars_select_stars_5_anchor.appendTo(grid_stars_select_stars_5);
    
        grid_stars_select_div.mouseleave(function() {
            reset_stars_select_classes_hover();
            reset_stars_select_classes();
        });
    
        grid_stars_select_stars_0.appendTo(grid_stars_select);
        grid_stars_select_stars_1.appendTo(grid_stars_select);
        grid_stars_select_stars_2.appendTo(grid_stars_select);
        grid_stars_select_stars_3.appendTo(grid_stars_select);
        grid_stars_select_stars_4.appendTo(grid_stars_select);
        grid_stars_select_stars_5.appendTo(grid_stars_select);
    
        grid_stars_select.appendTo(grid_stars_select_div);
    
        // Append this to grid_stars..
        grid_stars_select_div.appendTo(grid_stars);
        
        var grid_stars_clear = $(dc('div'))
            .attr('class', 'clear');
    
        // Append rating
        grid_stars_pre.appendTo(class8);
        grid_stars.appendTo(class8);
        grid_stars_clear.appendTo(class8);
    
        // If there's a restaurant associated with this meal, link to it
        if(restaurantId > 0 && restaurant != undefined) {
        }
    
        // If there's already a review, display it now
        var grid_review_pre = $(dc('div'))
            .attr('class', 'grid_3')
            .html('Review');
    
        var review = "(click to edit review)";
    
        var grid_review = $(dc('div'))
            .attr('class', 'grid_5')
            .attr('class', 'grid_review')
            .attr('id', 'pop_review')
            .attr('name', 'pop_review');
    
    
        if (meal.review != undefined && meal.review.length > 0) {
            review = meal.review;
        }
    
        var grid_review_textarea = $(dc('textarea'))
            .attr('class', 'review_noedit')
            .attr('class', 'review_text_area')
            .attr('id', 'review_text_int')
            .attr('cols', textareawidth)
            .attr('rows', 20)
            .attr('readonly',  true)
            .html(review);
    
        grid_review_textarea.click(function() {
    
            elm.disablekeydown();
    
            $('#review_text_int').removeClass('review_noedit');
            $('#review_text_int').addClass('review_edit');
            $('#review_text_int').attr('readonly', false);
    
            // Zap the not-reviewed placeholder
            if(meal.review == undefined || meal.review.length <= 0) {
                //grid_review_textarea.html('');
                $('#review_text_int').html('');
            }
        });
    
        grid_review_textarea.keydown(function(e){
            var code = (e.keyCode ? e.keyCode : e.which);
            switch(code) {
                case 27:
                case 9:
                    $('#review_text_int').blur();
                    return false;
            }
        });
    
        grid_review_textarea.blur(function() {
            var tmpText = $('#review_text_int').val();
            updateReviewAjax(meal, tmpText);
            if(tmpText == undefined || tmpText.length <= 0) {
                $('#review_text_int').html('(click to edit review)');
            }
            meal.review = tmpText;
    
            $('#review_text_int').addClass('review_noedit');
            $('#review_text_int').removeClass('review_edit');
            $('#review_text_int').attr('readonly', true);
    
            elm.enablekeydown();
        });
        
        grid_review_textarea.appendTo(grid_review);
    
        var grid_review_clear = $(dc('div'))
            .attr('class', 'clear');
    
        grid_review_pre.appendTo(class8);
        grid_review.appendTo(class8);
        grid_review_clear.appendTo(class8);
    
        // Delete this picture logic here. 
        /*
        var deletePre = $(dc('div'))
            .attr('class', 'grid_3 delete_pre')
            .attr('id', 'delete_pre')
            .html('Delete');
        */
    
        var deleteLink = $(dc('div'))
            .attr('class', 'grid_8 delete_link')
            .attr('id', 'delete_link');
    
        var deleteMealAnchor = $(dc('a'))
            .attr('class', 'delete_link_anchor')
            .attr('id', 'delete_link_anchor')
            .attr('href', 'javascript:void(0)')
            .attr('title', 'Delete this Meal')
            .html('Delete this Meal');
    
        var deleteClear = $(dc('div'))
            .attr('class', 'clear');
    
        deleteMealAnchor.click(function() {

            if(griddelete) {

                griddelete(meal, fadedestroymodal);
            }

        });
    
        deleteMealAnchor.appendTo(deleteLink);
    
        // Append to modal
        // deletePre.appendTo(class8);
        deleteLink.appendTo(class8);
        deleteClear.appendTo(class8);
    
        class8.appendTo(popup);

        // Display background
        showmaskfade();
       
        // Wait for the first carousel image to load
        elm.loadcarousel(function(alen) {

            positionmodal();

            if(appendpop) {
                popup.appendTo(appendpop);
            }
            else {
                popup.appendTo('body');
            }
            popup.fadeIn({ queue: true, duration: 500 });
        });
    }

    // Getter for the showattributes gridobject
    function getgridobj() {

        return gridobj;

    }

    // Setter for the showattributes gridobject
    function setgridobj(griddiv) {

        gridobj = griddiv;

    }

    function show(username, timestamp, griddiv) {

        if(isshowing) {
            return false;
        }

        isshowing = true;

        // Latch griddiv immediately
        if(griddiv) {
            gridobj = griddiv;
        }

        $.getJSON('/ajaxgetmealinfo',
            {
                username: username,
                timestamp: timestamp
            },
            function(response) {
                if(response.errStr != undefined && response.errStr.length > 0) {
                    if(response.errStr == "signin") {
                        window.location.replace("/signin");
                    }
                    if(response.errStr == "wronguser") {
                        window.location.replace("/");
                    }
                    // TODO - draw an elegant page for this case
                    // TODO - elegant handling of all error - maybe have a box at the box
                    // which informs the user if/when this occurs
                    if(response.errStr == "nomeal") {
                        window.location.replace("/");
                    }
                }
                else {
                    if(griddiv) {
                        response.mealInfo.gridobj = griddiv;
                    }
                    showattributesmealinfo(username, response.mealInfo, 
                            response.restaurantInfo, response.restaurantId);
                }
            }
        );
    }

    return {
        init                        : init,
        show                        : show,
        setgridobj                  : setgridobj,
        getgridobj                  : getgridobj,
        destroy                     : destroymodal,
        setgriddeletecallback       : setgriddeletecallback,
        setgriddisplaycallback      : setgriddisplaycallback,
        setgridcountcallback        : setgridcountcallback,
        setgridtitlecallback        : setgridtitlecallback,
        setgridmealcallback         : setgridmealcallback,
        modalisshowing              : modalisshowing
    };

}(jQuery));  

// Initialize showattributes object
showattributes.init(
        findpicidx.search, 
        picturecarousel.create,
        { 
            hiddenframe     : $('#hiddenElements')[0]
        }
);

// Grid navigation bar - should maintain nextpage, prevpage, fast-scan,
// and the 'new-meal'
var gridnav = (function ($jq) {

    // Cache jQuery
    var $ = $jq;

    // Where this will appear on the page
    var parentdiv;

    // Who is running this
    var username;

    // Left margin
    var marginleft;

    // Right margin
    var marginright;

    // Top margin
    var margintop;

    // Bottom margin
    var marginbottom;
    
    // The nav div
    var navcontainer;

    // The inner div
    var navinner;

    // The container width
    var gridnavwidth;

    // Derived bar width
    var gridinnerwidth;

    // The container height
    var gridnavheight;

    // The next page div
    var nextpagediv;

    // Prev page div
    var prevpagediv;

    // The next page li
    var nextli;

    // The prev page li
    var prevli;

    // New meal div
    var newmealdiv;

    // Date nav div
    var datenavdiv;

    // Set to true when gridnav is being displayed
    var isdisplayed = false;

    // Reference to the unordered list
    var ulist;

    // Count of the list elements
    var menucount;

    // Width of each width element
    var menuelementwidth;
 
    // Outer margin left
    var outermarginleft;

    // Outer margin right
    var outermarginright;

    // Outer margin top
    var outermargintop;

    // Outer margin bottom
    var outermarginbottom;

    // Top menu margin
    var menumargintop;

    // Bottom menu margin
    var menumarginbottom;

    // Right menu margin
    var menumarginright;

    // Left menu margin
    var menumarginleft;

    // Set to 1 if we want a next
    var hasnextpage;

    // Set 1 if we want to display the prevdiv
    var hasprevpage;

    // Set 1 if we want a newmeal icon
    var hasnewmeal;

    // Set 1 if we want the date navigator
    var hasdatenav;

    // Holds the 'prev-page' div
    var prevdiv;

    // Holds the 'next-page' div
    var nextdiv;

    // Holds the newmeal anchor
    var newmealanchor;

    // Create element wrapper
    var dc = function(a) {
        return document.createElement(a);
    }

    // Get / create the nextpagediv
    function getnextpagediv() {

        if(!nextpagediv) {

            nextpagediv = navdiv('nextpagediv', 'nextpagediv').html('Next Page');

        }
        return nextpagediv;
    }

    // Get / create the datenav div
    function getdatenavdiv() {

        if(!datenavdiv) {

            datenavdiv = navdiv('datenavdiv', 'datenavdiv').html('Date Navigator');

        }
        return datenavdiv;
    }

    // Get / create the newmealdiv
    function getnewmealdiv() {

        if(!newmealdiv) {

            newmealdiv = navdiv('newmealdiv', 'newmealdiv');

            // Create new meal anchor
            var nma = $(dc('a'))
                .attr('id', 'newmealpopup')
                .attr('href', 'javascript:void(0)')
                .html('New Meal');

            // Append to the navdiv
            nma.appendTo(newmealdiv);

            // Get non-jquery version
            newmealanchor = nma[0];

        }
        return newmealdiv;
    }

    // Get / create the prevpagediv
    function getprevpagediv() {

        if(!prevpagediv) {

            prevpagediv = navdiv('prevpage', 'prevpage').html('Previous Page');

        }
        return prevpagediv;
    }

    // Return the newmealanchor
    function getnewmealanchor() {

        if(!newmealanchor) {
            getnewmealdiv();
        }

        return newmealanchor;
    }

    // Create the navigation container
    function makecontainer() {

        // Create the navcontainer
        navcontainer = $(dc('div'))
            .attr('id', 'navcontainer')
            .attr('class', 'navcontainer')
            .css('width', gridnavwidth + 'px')
            .css('height', gridnavheight + 'px')
            .css('box-shadow', '3px 3px 5px #444')
            .css('-webkit-box-shadow', '3px 3px 5px #444')
            .css('-moz-box-shadow', '3px 3px 5px #444')
            .css('-moz-border-radius', '15px')
            .css('border-radius', '15px')
            .css('border', '1px solid')
            .css('background-color', '#eee')
            .css('position', 'relative');

        // Make the inner div
        navinner = $(dc('div'))
            .attr('id', 'navinner')
            .attr('class', 'navinner')
            .css('margin-left', outermarginleft + 'px')
            .css('margin-right', outermarginright + 'px')
            .css('width', gridinnerwidth + 'px')
            .css('position', 'absolute');

        // Append this to the navcontainer
        navinner.appendTo(navcontainer);

        return navcontainer;

    }

    // Return the next-page div
    function nextpage() {
        return (getnextpagediv())[0];
    }

    // Return the prev-page link
    function prevpage() {
        return (getprevpagediv())[0];
    }

    // Get a standard nav-div
    function navdiv(name, cls) {

        var ndiv = $(dc('div'))
            .attr('id', name)
            .attr('class', cls)
            .css('background-color', '#fff')
            .css('width', (menuelementwidth - (menumarginleft + menumarginright)) + 'px')
            .css('height', (gridnavheight - (menumargintop + menumarginbottom)) + 'px')
            .css('box-shadow', '3px 3px 5px #444')
            .css('-webkit-box-shadow', '3px 3px 5px #444')
            .css('-moz-box-shadow', '3px 3px 5px #444')
            .css('margin-top', menumargintop + 'px')
            .css('margin-bottom', menumarginbottom + 'px')
            .css('margin-left', menumarginleft + 'px')
            .css('margin-right', menumarginright + 'px')
            .css('float', 'left')
            .css('text-align', 'center');

        return ndiv;
    }

    // Create a li
    function navli(name, cls) {

        var nli = $(dc('li'))
            .attr('id', name)
            .attr('class', cls)
            .css('float', 'left')
            .css('padding', '0px')
            .css('text-align', 'center')
            .css('position', 'relative')
            .css('margin-left', '0px')
            .css('margin-right', '0px')
            .css('margin-top', '0px')
            .css('margin-bottom', '0px')
            .css('display', 'inline-block')
            .css('height', gridnavheight + 'px')
            .css('width', menuelementwidth + 'px')
            .css('display', 'inline-block');

        return nli;
    }

    // Create the newmeal list element
    function newmealli() {

        // Create the newmeal li
        var newmli = navli('newmeal', 'newmeal');

        // Get the newmealli div
        var newmdiv = getnewmealdiv();

        // Append to the newmealli
        newmdiv.appendTo(newmli);

        // Return it
        return newmli;
    }

    // Create the previous list element
    function prevpageli() {

        // Create the prev li
        var prevli = navli('prevpage', 'prevpage');

        // Get prevpage div
        var prevdiv = getprevpagediv();

        // Append it to the prevli
        prevdiv.appendTo(prevli);

        // Return it
        return prevli;
    }

    // Create the nextpage list element
    function nextpageli() {

        // Create the prev li
        var nextli = navli('nextpage', 'nextpage');

        // Next page div
        var nextdiv = getnextpagediv();

        // Append it to the prevli
        nextdiv.appendTo(nextli);

        // Return it
        return nextli;

    }

    // Create the datenav list element
    function datenavli() {

        // Create the date nav li
        var dateli = navli('datenav', 'datenav');

        // Get the datenav div
        var datediv = getdatenavdiv();

        // Append it to the dateli
        datediv.appendTo(dateli);

        // Return it
        return dateli;

    }

    // Callback for the grid object
    // TODO HERE TODO XXX
    function nextprevcallback( pvpage, nxpage, pvanchor, nxanchor ) {

        if(pvpage) {

            // Detach prevpagediv from whatever
            prevpagediv.detach();

            // Clear out pvanchor if its there
            prevli.empty();

            // Append new prevanchor 
            pvanchor.appendTo(prevli);

            // Append prevpagediv to prevanchor
            prevpagediv.appendTo(pvanchor);

        }
        else {

            // Detach prevpagediv from whatever
            prevpagediv.detach();

            // Clear prevli - zap prevanchor
            prevli.empty();

            // Append
            prevpagediv.appendTo(prevli);

            // TODO : shadow this out somehow?
        }

        if(nxpage) {

            // Detach nextpagediv
            nextpagediv.detach();

            // Clear out nxanchor if its there
            nextli.empty();

            // Append new nxanchor
            nxanchor.appendTo(nextli);

            // Append nextpagediv to nxanchor
            nextpagediv.appendTo(nxanchor);
        }
        else {

            // Detach nextpagediv
            nextpagediv.detach();

            // Clear nextli - zap nextanchor
            nextli.empty();

            // Append
            nextpagediv.appendTo(nextli);
        }
    }

    // Create and draw the nav object
    function displaynav() {

        // Don't redraw
        if(isdisplayed) {
            return false;
        }

        // We'll be displaying soon
        isdisplayed = true;

        // Create the container
        makecontainer();

        // Attach this to the parent div
        if(parentdiv) {
            navcontainer.appendTo(parentdiv);
        }

        // Create an unordered list
        ulist = $(dc('ul'))
            .attr('id', 'gridnavid')
            .attr('class', 'gridnavul')
            .css('position', 'static')
            .css('clear', 'both')
            .css('overflow', 'hidden')
            .css('list-style-type', 'none')
            .css('padding', '0px')
            .css('float', 'left')
            .css('margin', '0px')
            .css('text-align', 'center')
            .css('height', gridnavheight + 'px')
            .css('width', gridinnerwidth + 'px');

        // Append to the container
        ulist.appendTo(navinner);

        // Add prevpage if that was requested
        if(hasprevpage) {

            // Create prev list element
            prevli = prevpageli();
    
            // Append prevli to the ul
            prevli.appendTo(ulist);

        }

        // Maybe newmeal comes first
        if(hasnewmeal) {

            // Create the newmeal li element
            var newmli = newmealli();

            // Append newmealli to the ul
            newmli.appendTo(ulist);

        }

        // Add datenav if that was requested
        if(hasdatenav) {

            // Create the date nav element
            var datenv = datenavli();

            // Append it to the ul
            datenv.appendTo(ulist);

        }

        // Add nextpage if that was requested
        if(hasnextpage) {

            // Create next list element
            nextli = nextpageli();

            // Append nextli to the ul
            nextli.appendTo(ulist);

        }
    }

    // Initialize the gridnav object
    function init(indiv, uname, cfg) {

        // Shorten function name
        cfg.hp = cfg.hasOwnProperty;

        // Where this will appear on the page
        parentdiv = indiv;

        // Current user
        username = uname;

        // Top margin
        margintop = cfg.hp("margintop") ? cfg.margintop : 10;

        // Bottom margin
        marginbottom = cfg.hp("marginbottom") ? cfg.marginbottom : 10;

        // Width
        gridnavwidth = cfg.hp("gridnavwidth") ? cfg.gridnavwidth : 1180;

        // Height
        gridnavheight = cfg.hp("gridnavheight") ? cfg.gridnavheight : 100;

        // Top outer margin
        outermargintop = cfg.hp("outermargintop") ? cfg.outermargintop : 10;

        // Bottom outer margin
        outermarginbottom = cfg.hp("outermarginbottom") ? cfg.outermarginbottom : 10;

        // Left outer margin
        outermarginleft = cfg.hp("outermarginleft") ? cfg.outermarginleft : 10;

        // Right outer margin
        outermarginright = cfg.hp("outermarginrigh") ? cfg.outermarginright : 10;

        // Top menu margin
        menumargintop = cfg.hp("menumargintop") ? cfg.menumargintop : 10;

        // Bottom menu margin
        menumarginbottom = cfg.hp("menumarginbottom") ? cfg.menumarginbottom : 10;

        // Right menu margin
        menumarginright = cfg.hp("menumarginright") ? cfg.menumarginright : 20;

        // Left menu margin
        menumarginleft = cfg.hp("menumarginleft") ? cfg.menumarginleft : 20;

        // Set to 1 if has next div
        hasnextpage = cfg.hp("hasnextpage") ? (cfg.hasnextpage ? 1 : 0 ) : 1;

        // Set to 1 if has prev div
        hasprevpage = cfg.hp("hasprevpage") ? (cfg.hasnextpage ? 1 : 0 ) : 1;

        // Set to 1 if we have a newmeal icon
        hasnewmeal = cfg.hp("hasnewmeal") ? (cfg.hasnewmeal ? 1 : 0 ) : 1;

        // Set to 1 if we have a date navigator
        hasdatenav = cfg.hp("hasdatenav") ? (cfg.hasdatenav ? 1 : 0 ) : 0;

        // Set the menucount
        menucount = (hasnextpage + hasprevpage + hasnewmeal + hasdatenav);

        // Get the inner width
        gridinnerwidth = gridnavwidth - (outermarginleft + outermarginright);

        // Calculate the width of a single menu element
        menuelementwidth = Math.floor( (gridinnerwidth) / menucount );

    }

    // Exposed functions
    return {
        init                        : init,
        displaynav                  : displaynav,
        nextprevcallback            : nextprevcallback,
        getnewmealanchor            : getnewmealanchor,
        nextpage                    : nextpage,
        prevpage                    : prevpage
    };

}(jQuery));

// The picture grid
var picturegrid = (function ($jq) {

    // Cache jquery
    var $ = $jq;

    // Previous page
    var gridprevpage;

    // Next page
    var gridnextpage;

    // Where this will appear on the page
    var parentdiv;

    // Name of the user
    var username;

    // What's the left margin
    var marginleft;

    // What's the right margin
    var marginright;

    // What's the top margin
    var margintop;

    // What's the picture border
    var picborder;

    // What's the bottom margin
    var marginbottom;

    // Container margin top
    var containermargintop;

    // Container margin bottom
    var containermarginbottom;

    // Container margin right
    var containermarginright;

    // Container margin left
    var containermarginleft;

    // What's the width of a picture
    var picturewidth;

    // What's the heigth of a picture
    var pictureheight;

    // What's the height of the picture footer
    var footerheight;

    // What's the font size in the footer
    var footerfontsize;

    // Number of pictures font size
    var subfooterfontsize;

    // What's the space between the picture and footer
    var footerspace;

    // How many pictures per row
    var mealsperrow;

    // How many rows per page
    var rowsperpage;

    // Derived: how many meals per grid
    var mealspergrid;

    // Derived: how many pixels wide?
    var gridwidth;

    // Allow 
    var nxpvcallback;

    // Easing function
    var grideasing;

    // Speed to change pages
    var gridspeed;

    // Viewport width leaves a little breathing room at the edges
    var viewportwidth;

    // Some fudge for stripe text
    var stripefudge;

    // Set the anchor click function
    var anchorclickfn;

    // cache the last mealinfo array
    var lastmealinfo;

    // New meal anchor
    //var newmealanchor;

    // Use hover text
    var usehovertext;

    // Calculate the container grid height
    var containerheight;

    // Calculate the outer container width
    //var containerwidth;

    // Calculate the outer container grid height
    var outercontainerheight;

    // Calculate the outer container grid width
    var outercontainerwidth;

    // Calculate the outercontainer margin top
    var outercontainermargintop;

    // Calculate the outercontainer margin bottom
    var outercontainermarginbottom;

    // Calculate the outercontainer margin left
    var outercontainermarginleft;

    // Calculate the outercontainer margin right
    var outercontainermarginright;

    // Keep track of what's currently displayed
    var currentgrid;

    // How to locate a picindex
    var findpicidx;

    // Viewport for grid
    var gridviewport;

    // Container for grid
    var gridcontainer;

    // Outer-container for grid
    var gridoutercontainer;

    // Maintain the height of viewport
    var viewportheight;

    // Set to true if we're displaying
    var displaying;

    // Set to true to display picture count trace
    var picturecounttrace;

    // Set to true to display time trace
    var picturetimetrace;

    // Set to true to display slashed date format
    var slasheddate;

    // Set to the footer alignment
    var footeralign;

    // Set to true to display picture title
    var titletrace;

    // Font color of the title
    var titlefontcolor;

    // Set to true to animate grid pages
    var animatenextprev;

    // I can either delete a meal in place or redraw the grid
    var deletebehavior;

    // A callback that returns true if the modal is up, false otherwise
    var modalisup;

    // Spacer width
    //var spacerwidth;

    // Create element wrapper
    var dc = function(a)
    {
        return document.createElement(a);
    }

    // Return the number of meals per grid
    function mealcount() {

        return mealspergrid;

    }

    function modalisshowing() {

        if(modalisup) {
            return modalisup();
        }

        return false;
    }

    // Create a new meal via an ajax request & then show it's attributes
    function newmealpopup() {

        if(modalisshowing()) {
            return false;
        }

        $.getJSON(
            '/newmeal',
            {
                username: username
            },
            function(response) {
                if(response.message == undefined || response.message != "success") {
                    if("baduser" == response.message) {
                        window.location.replace("/signin");
                    }
                    else {
                        debuglog("Response error is ", response.message);
                        window.location.replace("/");
                    }
                    return;
                }
    
                // Create a new grid
                drawnextmeals( 
                    new mealpage(parseInt(response.timestamp,10)),
                    showattributes.setgridobj
                );

                // Display a popup
                showattributes.show(username, response.timestamp);
            
            }
        );
    }

    // Return the number of meals per grid
    function mealcount() {

        return mealspergrid;

    }

    // Set the newmeal anchor
    function setnewmealanchor(anchor) {

        //newmealanchor = anchor;

        // Invoke the popup handler if it's clicked
        $(anchor).click(function() {
            newmealpopup();
        });

    }

    // Updates title displayed on the grid
    function updatetitle(meal) {

        if(titletrace) {

            // Grab the gridobj
            if(!meal.gridobj) meal.gridobj = showattributes.getgridobj();

            // Paragraph object
            var titlesp = $(meal.gridobj).find('.titlespan'); 

            // Format title string
            var title = titlestring(meal);

            // Special case no-title
            if (title.length <= 0) {
    
                titlesp.css('color', '#fff');
                title = ".";
            }
            else {
                titlesp.css('color', titlefontcolor);
            }
    
            // Set the html
            titlesp.html(title);
        }
    }

    // Updates hover meal text displayed on the grid
    function updatemeal(meal) {

        // Grab the gridobj
        if(!meal.gridobj) meal.gridobj = showattributes.getgridobj();
        
        // Capitalize
        var mealtxt = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);

        // Complete text
        var hovertxt = mealtxt + " created on " + 
            new Date(meal.timestamp).asMyString();

        // Div object
        var div = $(meal.gridobj).find('div > center > div > a');

        // Set the title
        if(div) div.attr('title', hovertxt);
    }

    // Updates picture count displayed on the grid
    function updatepicturecount(meal) {

        if(picturecounttrace) {

            // Grab the gridobj
            if(!meal.gridobj) meal.gridobj = showattributes.getgridobj();

            // Grid object
            var paragraph = $(meal.gridobj).find('.pcountspan'); 

            // Update string
            var picturecountstring = pcountstring(meal);
                //meal.picInfo.length + " pictures";

            // Set the html
            paragraph.html(picturecountstring);

        }
    }

    // Request previous pages meals from the server
    function drawprevmeals(prevpage) {

        $.getJSON('/editpageprev',
        {
            username: username,
            prevts: prevpage.timestamp,
            count: mealspergrid
        },
        function(response) {
            if(response.errStr != undefined && response.errStr.length > 0) {

                // Send this error to a space at the top..
                debuglog('editpageprev error: ' + response.errStr);
            }
            else {
                var nextpage = new mealpage(parseInt(response.nextts,10));
                var prevpage = new mealpage(parseInt(response.prevts,10));

                displaygrid(response.mealinfo, prevpage, nextpage, 'backwards');
            }
        });
        return 0;
    }

    // Request the next page of meals
    function drawnextmeals(nextpage, callback) {
    
        // Make this an ajax request that will return enough information
        $.getJSON('/editpagenext',
            {
                username: username,
                nextts: nextpage.timestamp,
                count: mealspergrid
            },
            function(response) {
                if(response.errStr != undefined && response.errStr.length > 0) {
                    // Send this error to a space at the top..
                    debuglog('editpagenext error: ' + response.errStr);
                }
                else {
                    var nextpage = new mealpage(
                        parseInt(response.nextts,10) 
                    );
                    var prevpage = new mealpage(
                        parseInt(response.prevts,10)
                    );
                    displaygrid(response.mealinfo, prevpage, nextpage, 'forwards', callback);
                }
            }
        );
        return 0;
    }
    
    // Create div & link for a next or prev page
    function nextprevlnk(page, drawmeals) {

        // Create click anchor
        var anchor = $(dc('a'))
            .attr('href', 'javascript:void(0)');

        // Invoke the callback if clicked
        anchor.click(function() {
            drawmeals(page);
        });

        // Return the anchor
        return anchor;
    } 

    // Set up the links for the next and previous page
    function nextprevpagelinks(nextpage, prevpage) {
    
        // Pointer to possible prevanchor
        var prevanchor;

        // Pointer to possible nextanchor
        var nextanchor;

        // Set object nextpage
        gridnextpage = nextpage;

        // Set object prevpage
        gridprevpage = prevpage;

        // Normalize nextpage argument
        nextpage = nextpage && nextpage.timestamp > 0 ? nextpage : null;

        // Normalize prevpage argument
        prevpage = prevpage && prevpage.timestamp > 0 ? prevpage : null;
    
        // Prevpage div
        if(prevpage) {

            // Create a prev anchor
            var prevanchor = nextprevlnk(prevpage, drawprevmeals);

        }
    
        // Nextpage div
        if(nextpage) {

            // Create a next div
            var nextanchor = nextprevlnk(nextpage, drawnextmeals);

        }

        // Update globals
        if(nxpvcallback) {

            // Call the nextprev callback
            nxpvcallback(prevpage, nextpage, prevanchor, nextanchor);

        }
    }

   // Updates the grid display picture to this timestamp
    function updatedisplaypicture(meal, picinfo) {

        // Get the gridobj
        if(!meal.gridobj) meal.gridobj = showattributes.getgridobj();

        // Jquery-ize
        var griddiv = $(meal.gridobj);

        // Get the image element
        var gridpic = griddiv.find('div > center > div > a > img');

        // Init thumb height
        var thumbheight = 0;

        // New source for key timestamp
        var imgsrc;

        // Pulling from picinfo
        if(picinfo) {

            thumbheight = picinfo.thumbheight;
            imgsrc = '/thumbs/' + meal.username + '/' + picinfo.timestamp;

        }
        // Show the nomeal picture
        else {
            thumbheight = NOMEALHEIGHT;
            imgsrc = '/images/nomeal.png';
        }

        // Error checking
        if(thumbheight <= 0) {
            debuglog("ERROR!  Thumbheight is an invalid value: " + 
                    thumbheight);
        }

        // Set image source
        gridpic.attr('src', imgsrc);

        // Set correct height and margin
        griddiv.css('height', (thumbheight + (2 * picborder)) + 'px')
            .css('margin-top', (pictureheight - thumbheight) + 'px');

        // Update keytimestamp in meal object
        if(picinfo) {
            meal.keytimestamp = picinfo.timestamp;
        }
        else {
            meal.keytimestamp = 0;
        }
    }

    // Return the height of the key-pic, the first pic, or no-meal
    function calculatethumbheight(meal) {

        var thumbheight;

        // Find the key pic in the picInfo array
        if(meal.keytimestamp) {

            var idx = findpicidx(meal.picInfo, meal.keytimestamp);

            if(idx >= 0) thumbheight = meal.picInfo[idx].thumbheight;
        }

        // Otherwise use the first picture
        else if(meal.picInfo && meal.picInfo.length > 0) {

            thumbheight = meal.picInfo[0].thumbheight;
        }

        // Height of the nomeal picture
        else {
            thumbheight = NOMEALHEIGHT;
        }

        return thumbheight;
    }

    // Return the title string
    function titlestring(meal) {
        var tstring;

        if(meal.title != undefined && meal.title.length > 0) {
            tstring = meal.title;
        }
        else {
            tstring = "";
        }

        return tstring;
    }

    // Return a paragraph object with the correct title
    function titlespan(meal) {

        // Grab title string
        var tstring = titlestring(meal);

        // Create paragraph with this as the html
        var span = $(dc('span'))
                .attr('class', 'titlespan')
                .css('font-size', footerfontsize + 'px')
                .css('border', 'none');

        // Special case no-title
        if (tstring.length <= 0) {

            span.css('color', '#fff');
            tstring = ".";
        }
        else {
            span.css('color', titlefontcolor);
        }

        // Set the title string
        span.html(tstring);

        // Return it
        return span;
    }


    // Return a sub-footer paragraph object
    function subfooterp(meal) {
        var par = $(dc('p'))
            .attr('class', 'subfooterp')
            .css('text-align', footeralign)
            .css('line-height', (subfooterfontsize - 10) + 'px')
            .css('font-size', subfooterfontsize + 'px')
            .css('border', 'none');

        // Return it
        return par;
    }

    // Return the picture time string
    function ptimestring(meal, both) {

        // Dateify the meal timestamp
        //var datest = new Date(meal.timestamp).asGridString();
        var datest;
        
        // Use slashdate format
        if(slasheddate) {
            datest = new Date(meal.timestamp).asSlashString();
        }

        // Use normal format
        else {
            datest = new Date(meal.timestamp).asMyString();
        }

        // Add a comma if more is on this line
        // if (both) datest += ', ';

        // Return it
        return datest;

    }

    // Return a span object with the picture timestamp
    function ptimespan(meal, both) {

        // Grab picture time string
        var ptime = ptimestring(meal, both);

        // Create span with this as the html
        //var span = $(dc('span'))
        var span = $(dc('p'))
            .attr('class', 'ptimespan')
            .css('color', '#777')
            .css('text-align', footeralign)
            .css('line-height', (subfooterfontsize - 10) + 'px')
            .css('font-size', subfooterfontsize + 'px')
            .css('border', 'none')
            .html(ptime);

        // Return it
        return span;
    }

    // Return the picture count string
    function pcountstring(meal) {

        var picturecountstring;

        // 0 is plural in english
        if(!meal.picInfo || meal.picInfo.length == 0) {
            picturecountstring = "0 pictures";
        }
        // 1 is singular
        else if(meal.picInfo.length == 1) {
            picturecountstring = "1 picture";
        }
        // Everything else is plural
        else {
            picturecountstring = meal.picInfo.length + " pictures";
        }

        return picturecountstring;
    }

    // Return a span object with the correct pcount string
    function pcountspan(meal) {

        // Grab picture count string
        var pcount = pcountstring(meal);

        // Create span with this as the html
        var span = $(dc('p'))
            .attr('class', 'pcountspan')
            .css('color', '#777')
            .css('text-align', footeralign)
            .css('line-height', 0 + 'px')
            .css('font-size', subfooterfontsize + 'px')
            .css('border', 'none')
            .html(pcount);

        // Return it
        return span;
    }

    // The internal grid object contains the click logic
    function pdivint(meal, editgrid) {

        // Thumb height
        var thumbheight = calculatethumbheight(meal);

        // I can manipulate this directly in the delete code.
        var editInternal = $(dc('div'))
            .css('class', 'internalmargin')
            .css('margin-top', picborder + 'px')
            .css('float', 'top');
    
        // Center tag
        var center = $(dc('center'));

        // Append to internal-div
        center.appendTo(editInternal);
    
        // Image div
        var editImageDiv = $(dc('div'));
    
        // Append to center
        editImageDiv.appendTo(center);

        // Create an anchor with this text
        var anchor = $(dc('a'))
            .attr('href', 'javascript:void(0)');

        // Use a callback to set the anchor's target
        if(anchorclickfn) {
            anchor.click(function() {
                anchorclickfn(meal.username, meal.timestamp, editgrid);
            });
        }

        // Add hover text if we want it 
        if(usehovertext) {

            // Uppercase first letter of the meal
            var mealtxt = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
    
            // Format hover string
            var hovertxt = mealtxt + " created on " + 
                new Date(meal.timestamp).asMyString();
    
            // Set the hover text
            anchor.attr('title', hovertxt);
        }

        // Append to the image div
        anchor.appendTo(editImageDiv);
    
        // Text containing the image source
        var imgsource;
    
        // Default nomeal
        if(!meal.picInfo || meal.picInfo.length <= 0) {
            imgsource = '/images/nomeal.png';
        }

        // Use the key picture
        else if (meal.keytimestamp) {
            imgsource = '/thumbs/' + meal.username + '/' + meal.keytimestamp;
        }

        // Use the first picture
        else{
            imgsource = '/thumbs/' + meal.username + '/' + meal.picInfo[0].timestamp;
        }
    
        // Image teag
        var image = $(dc('img'))
            .attr('class', 'gridimage')
            .attr('src', imgsource);

        // Append to my anchor
        image.appendTo(anchor);

        // Return the newly created object 
        return editInternal;
    }

    // Create an inner (attributed) pdiv object
    function pdivinner(meal) {
    
        // Calculate the thumb height here
        var thumbheight = calculatethumbheight(meal);

        // Create the editgrid div
        var editgrid = $(dc('div'))
            .attr('class', 'editgridbg')
            .css('border-top', '1px solid')
            .css('border-left', '1px solid')
            .css('border-right', '1px solid')
            .css('border-color', '#ddd') // same as the background color
            .css('background-color', '#fff')
            .css('position', 'relative')
            .css('margin-top', (pictureheight - thumbheight) + 'px')
            .css('float','top')
            .css('box-shadow', '3px 3px 5px #444')
            .css('-webkit-box-shadow', '3px 3px 5px #444')
            .css('-moz-box-shadow', '3px 3px 5px #444')
            .css('width', picturewidth + (2 * picborder) + 'px')
            .css('height', (thumbheight + (2 * picborder)) + 'px');

        // Create the footer
        var footer = $(dc('div'))
            .attr('class', 'editgridfooter')
            .css('background-color', '#fff')
            .css('box-shadow', '3px 3px 5px #444')
            .css('-webkit-box-shadow', '3px 3px 5px #444')
            .css('-moz-box-shadow', '3px 3px 5px #444')
            .css('border-left', '1px solid')
            .css('border-right', '1px solid')
            .css('border-bottom', '1px solid')
            .css('border-color', '#ddd')
            .css('position', 'absolute')
            .css('bottom', '-' + (footerheight + footerspace) + 'px')
            .css('left', '-1px')
            .css('clear', 'both')
            .css('width', picturewidth + (2 * picborder) + 'px')
            .css('height', footerheight)
            .css('font-size', footerfontsize + 'px')
            .css('color', '#333')
            .css('line-height', (footerfontsize + 15) + 'px')
            .css('text-align', footeralign)
            .css('text-indent', '10px');

        // Append a title
        if (titletrace) {

            // Create a title paragraph object
            var titlesp = titlespan(meal);

            // Append to the footer
            titlesp.appendTo(footer);

        }

        // Variable to hold subfooter paragraph if we need one
        var sfoot = null;

        // Create a paragraph for either or both of these
        /*
        if (picturecounttrace || picturetimetrace) {

            // Create a sub-footer paragraph
            sfoot = subfooterp(meal);

            // Append it to the footer
            sfoot.appendTo(footer);

        }
        */

        // Append a time
        if (picturetimetrace) {

            // Create a time-trace span
            var ptimesp = ptimespan(meal, picturecounttrace);

            // Append to the footer
            // ptimesp.appendTo(sfoot);
            ptimesp.appendTo(footer);

        }

        // Append a picture count
        if (picturecounttrace) {

            // Create a pcount paragraph object
            var pcountsp = pcountspan(meal);
    
            // Append to the footer
            //pcountsp.appendTo(sfoot);
            pcountsp.appendTo(footer);
    
        }

        // I can switch the internal div in the delete code
        var intn = pdivint(meal, editgrid);
    
        // Append this to the edit grid
        intn.appendTo(editgrid);

        // Append the footer
        footer.appendTo(editgrid);

        // Return grid
        return editgrid;
    }

    // Create a pdiv
    function pdiv(meal) {

        // Create an outer shell container 
        var egcontainer = $(dc('li'))
            .attr('class', 'egcontainer')
            .css('float', 'left')
            .css('float', 'bottom')
            .css('position', 'relative')
            .css('width', picturewidth + (2 * picborder) + 'px')
            .css('height', (pictureheight + footerheight + picborder) + 'px')
            .css('margin-top', margintop + 'px')
            .css('margin-bottom', marginbottom + 'px')
            .css('margin-left', marginleft + 'px')
            .css('margin-right', marginright + 'px')
            .css('display', '-moz-inline-stack')
            .css('display', 'inline-block')[0];

        // Create the grid components
        var editgrid = pdivinner(meal);

        // Append my editgrid (with size info) to the container
        editgrid.appendTo(egcontainer);

        // Direct lookup for editgrid
        egcontainer.editgrid = editgrid[0];
    
        // Return the top-level object
        return egcontainer;
    }

    // Append picture to the end of the grid
    function addmealtogrid(griddiv, gridpic, loadcb) {

        var hdiv = null;

        // Return false if we're filled up
        if(griddiv.count >= mealspergrid) {
            return false;
        }

        // Create the ul if this is the first
        if(griddiv.count == 0) {

            // Create unordered list
            var $ul = $(dc('ul'))
                .css('width', gridwidth + 'px')
                .css('height', containerheight + 'px')
                .css('float', 'left');

            // Append to the grid
            $ul.appendTo(griddiv);

            // Keep a reference
            griddiv.ulist = $ul[0];

        }

        // Update last picture
        if(griddiv.lastg) {

            // Current last's 'next' will point to this
            griddiv.lastg.nextg = gridpic;

            // This prev will be the current last
            gridpic.prevg = griddiv.lastg;
        }
        else {
            gridpic.prevg = null;
        }

        // Nothing after
        gridpic.nextg = null;

        // This is the new last
        griddiv.lastg = gridpic;

        // It's also the first if there is none
        if(!griddiv.firstg) {

            // Make this the first picture
            griddiv.firstg = gridpic;
        }

        // Append to the ul
        $(gridpic).appendTo(griddiv.ulist);

        // Increment count
        griddiv.count++;

        // Invoke 'pic-is-loaded' callback
        if(loadcb) {
            var image = $(gridpic).find('.gridimage');
            image.on('load.picdivinternal', function() {
                image.off('load.picdivinternal');
                loadcb(griddiv);
            });
        }

        return true;
    }

    // Redraw the grid when I delete a meal
    function dmealredraw(meal, callback) {

        var editgrid;

        var newmealinfo = false;

        var nmealtime = 0;

        var pmealtime = 0;

        var reqcount = 1;

        var newgrid = false;

        // Get the gridobj
        if(!meal.gridobj) meal.gridobj = showattributes.getgridobj();

        // Grab gridobj directly - i think this can only be gridobj
        editgrid = $(meal.gridobj).parent()[0];

        // If there's a next page..
        if(gridnextpage) {
            // ..ask for a single meal
            nmealtime = gridnextpage.timestamp;
        }

        // If this is the last picture and there is a previous picture
        if(currentgrid.firstg == currentgrid.lastg && gridprevpage) {

            // Send the previous page timestamp
            pmealtime = gridprevpage.timestamp;

            // Request this many 
            reqcount = mealspergrid;

            // This is a newgrid request
            newgrid = true;
        }

        // Ask server to delete the meal
        $.getJSON('/deletemeal',
            {
                username: meal.username,
                timestamp: meal.timestamp,
                nextts: nmealtime,
                prevts: pmealtime,
                count: reqcount
            },
            function(response) {
                if(response.errStr != undefined && response.errStr.length > 0) {
                    if(response.errStr == "signin") {
                        window.location.replace("/signin");
                    }
                    else {
                        debuglog("getJSON response error is ", response.errStr);
                        window.location.replace("/");
                    }
                    return;
                }

                // Create a new nextpage
                var nextpage = new mealpage(parseInt(response.nextts,10));

                if(newgrid) {

                    // Create a new prevpage
                    var prevpage = new mealpage(parseInt(response.prevts,10));



                    // Redraw the grid
                    displaygrid(response.mealinfo, prevpage, nextpage, 'forwards');
                }

                else {

                    // Find the index of the deleted picture
                    var idx = findpicidx(lastmealinfo, meal.timestamp);

                    if(idx < 0) {
                        debuglog("Error - deleted picture is not in lastmealinfo.");
                    }
                    else {
                        // Remove this picture
                        lastmealinfo.splice(idx, 1);

                        if(response.mealinfo.length >= 1) {

                            lastmealinfo.push(response.mealinfo[0]);

                        }

                        // Display
                        displaygrid(lastmealinfo, gridprevpage, nextpage, 'backwards');
                    }

                }

                if(callback) callback();
            }
        );
    }

    // Delete a meal from the grid
    function dmealreplace(meal, callback) {

        var editgrid;

        // Get the gridobj
        if(!meal.gridobj) meal.gridobj = showattributes.getgridobj();

        // Grab gridobj directly - i think this can only be gridobj
        editgrid = $(meal.gridobj).parent()[0];

        // Grab a pointer to the first
        var firstgrid = currentgrid.firstg;

        // Grab a pointer to the last
        var lastgrid = currentgrid.lastg;
        
        // How many pictures to request from the server
        var reqcount = 1;

        // Set to redraw entire grid
        var redraw = false;

        // Next-meal request variable
        var nmealtime = 0;

        // Prev-meal request variable
        var pmealtime = 0;

        // Last remaining picture on the grid
        if(firstgrid == lastgrid) {

            // We'll want to redraw the previous page
            redraw = true;

            // Ask the server for the previous page
            if(gridprevpage) {

                // Grab prevmeal timestamp
                pmealtime = gridprevpage.timestamp;

                // Ask for an entire grid
                reqcount = mealspergrid;
            }
        }

        // If there's a next page..
        else if(gridnextpage) {
            // ..ask for a single meal
            nmealtime = gridnextpage.timestamp;
        }

        // Get pointer to next
        var nextgrid = editgrid.nextg;

        // Remove meal
        $(editgrid.editgrid).remove();

        // Walk gridpics, copying each into the last
        while(nextgrid) {

            // Repoint me to next
            editgrid.editgrid = nextgrid.editgrid;

            // Jquery wrapper for internal
            var $igrid = $(nextgrid.editgrid);

            // Detach from nextgrid
            $igrid.detach();

            // Reattach to currentgrid
            $igrid.appendTo(editgrid);

            // Set editgrid to nextgrid
            editgrid = nextgrid;

            // Set nextgrid to nextgrid.next
            nextgrid = editgrid.nextg;
        }

        // Zap internals- this may be filled above
        editgrid.editgrid = null;

        /* 
         * This request has two flavors.  If prevts is set at all, the
         * backend assumes that this is the last picture on the page,
         * and sends the information for the previous page.  If it is
         * 0, then this is a normal delete.
         */

        // Ask server to delete the meal
        $.getJSON('/deletemeal',
            {
                username: meal.username,
                timestamp: meal.timestamp,
                nextts: nmealtime,
                prevts: pmealtime,
                count: reqcount
            },
            function(response) {
                if(response.errStr != undefined && response.errStr.length > 0) {
                    if(response.errStr == "signin") {
                        window.location.replace("/signin");
                    }
                    else {
                        debuglog("getJSON response error is ", response.errStr);
                        window.location.replace("/");
                    }
                    return;
                }

                // Create a new prevpage
                var prevpage = new mealpage(parseInt(response.prevts,10));

                // Create a new nextpage
                var nextpage = new mealpage(parseInt(response.nextts,10));

                // Redraw the grid
                if(redraw) {

                    displaygrid(response.mealinfo, prevpage, nextpage, 'backwards');

                }

                // Normal case
                else {

                    // Update nextpage with the server response
                    gridnextpage = nextpage;

                    // Found a new last meal
                    if(response.mealinfo && response.mealinfo.length >= 1) {

                        // Create a pdiv
                        var $newpic = $(pdivinner(response.mealinfo[0]));

                        // Switch out internals
                        lastgrid.editgrid = $newpic[0];

                        // Append
                        $newpic.appendTo(lastgrid);

                        // Grab the image tag
                        var image = $newpic.find('.gridimage');

                        // Wait for this to load
                        image.on('load.deletepic', function() {

                            // Cancel event trigger
                            image.off('load.deletepic');

                            // Set up next and prev page links
                            nextprevpagelinks(nextpage, prevpage);
                        });
                    }

                    // Delete last grid object
                    else {

                        // Get a pointer to the previous
                        var prev = lastgrid.prevg;

                        // Cut out of the linked list
                        prev.nextg = null;

                        // Update the lastgrid
                        currentgrid.lastg = prev;

                        // Might have to delete stripe
                        if(prev.stripe != lastgrid.stripe) {

                            // New last stripe
                            currentgrid.laststripe = prev.stripe;

                            // Nullify next
                            currentgrid.laststripe.nextst = null;

                            // Remove the lastgrid stripe
                            lastgrid.stripe.remove();
                            
                        }

                        // Remove the grid
                        else {

                            // Remove the lastgrid
                            $(lastgrid).remove();

                            // If there's a spacer, remove it 
                            if(lastgrid.spacer)
                                $(lastgrid.spacer).remove();

                        }

                        // Decrement count
                        currentgrid.count--;

                        // Set next and prev links
                        nextprevpagelinks(nextpage, gridprevpage);

                    }
                }

                // Tear down modal
                if(callback) callback();

            }
        );  // getJSON
    }

    function deletemealfromgrid(meal, callback) {

        if(deletebehavior == "shiftmeals") {

            dmealreplace(meal, callback);

        }
        else if(deletebehavior == "redrawgrid") {

            dmealredraw(meal, callback);

        }
        else {

            debuglog("Error in deletemealfromgrid: behavior not specified");
            // Fail big
            // dmealreplace(meal, callback);

        }
    }

    // Fill a picture grid from an array
    function fillfromarray(griddiv, mealinfo, callback) {

        // For each mealinfo
        for(cnt = 0 ; cnt < mealinfo.length ; cnt++) {

            // Create a gridpic
            var gridmeal = pdiv(mealinfo[cnt]);

            // Add it to the grid
            if(!addmealtogrid(griddiv, gridmeal, callback))
                break;
        }
    }

    // Create the picture grid
    function makegrid() {

        // Width string
        //var widthpx = gridwidth + 'px';

        var griddiv = $(dc('div'))
            .attr('class', 'picturegrid')
            //.css('margin-left', 'auto')
            //.css('margin-right', 'auto')
            .css('position', 'absolute')
            .css('float', 'left')
            .css('width', gridwidth + 'px');
    
        // Set first picture to null
        griddiv.first = null;

        // Set last picture to null
        griddiv.last = null;

        // Set count to 0
        griddiv.count = 0;

        return griddiv; 
    }

    // Universal display function
    function displaygrid(mealinfo, prevpage, nextpage, direction, callback) {

        // Short circuit if were already displaying
        if (displaying) {
            debuglog("displaygrid is already displaying");
            return false;
        }

        // Scrub arguments
        if (mealinfo == undefined || mealinfo.length <= 0) {
            debuglog("empty mealinfo");
            return false;
        }

        // Toggle displaying
        displaying = true;

        // Normalize nextpage
        nextpage = (null != nextpage) ? nextpage : gridnextpage;

        // Normalize prevpage
        prevpage = (null != prevpage) ? prevpage : gridprevpage;

        // If this isn't defined roll forward
        // direction = direction ? direction : 'forward';
        var forward = direction && direction == 'backwards' ? 
            false : true;

        // Keep count of pictures which have loaded
        var loaded = 0;

        // Determine last picture
        var endpic = (mealinfo.length < mealspergrid) ? 
            mealinfo.length : mealspergrid;

        // Make a new picture grid
        var newgrid = makegrid();

        // Cache the last mealinfo
        lastmealinfo = mealinfo;

        // The callback is fired once per meal in the array
        fillfromarray(newgrid, mealinfo, function(showImages) {

            if(++loaded == endpic) {

                // jQuery reference to currentgrid
                var $cg = currentgrid ? currentgrid : null;

                // jQuery reference to newgrid
                var $ng = $(newgrid);

                // Direction token
                var direction;

                // Last wins counter
                var count = 0;

                // How we know we're finished
                var target = $cg ? 2 : 1;

                // Animate if configured for it
                if(animatenextprev) {
    
                    // Set the left offscreen
                    $ng.css('left', '-10000px');
    
                    // Attach to viewport
                    $ng.appendTo(gridviewport);

                    // Position and direction token
                    if(forward) {
    
                        // Set direction
                        direction = '-=';
    
                        // Put just out of view in front
                        $ng.css('left', gridwidth + 'px');
    
                    }
                    else {
    
                        // Set direction
                        direction = '+=';
    
                        // Put just out of view in back
                        $ng.css('left', -gridwidth + 'px');
    
                    }
    
                    // Completion function
                    function alldone() {
    
                        // Last to run wins
                        if(++count == target) {
    
                            // Remove this entirely 
                            if($cg) $cg.remove();
    
                            // Set up my next and previous page links
                            nextprevpagelinks(nextpage, prevpage);
    
                            // This is the new current
                            currentgrid = newgrid;
    
                            // Invoke callback to link first picture
                            if(callback) {
    
                                // Normalize
                                var gobj = currentgrid.firstg ? 
                                    currentgrid.firstg.editgrid : null;
    
                                // Set gridobj
                                callback(gobj);
                            }
    
                            // End display mode
                            displaying = false;
                        }
                    }
    
                    // Animate entering grid
                    $ng.stop().animate(
                        { left : direction + gridwidth + 'px'},
                        gridspeed,
                        grideasing,
                        alldone
                    );
    
                    // Annimate leaving grid
                    if(currentgrid) {
                        $cg.stop().animate(
                            { left : direction + gridwidth + 'px'},
                            gridspeed,
                            grideasing,
                            alldone
                        )
                    }
                }
                else {

                    // Remove this entirely 
                    if($cg) $cg.remove();

                    // Attach to viewport
                    $ng.appendTo(gridviewport);

                    // Position nextgrid correctly
                    $ng.css('left', '0px');

                    // This is the new current
                    currentgrid = newgrid;

                    // Set up my next and previous page links
                    nextprevpagelinks(nextpage, prevpage);

                    if(callback) {

                        // Normalize
                        var gobj = currentgrid.firstg ? 
                            currentgrid.firstg.editgrid : null;

                        // Set gridobj
                        callback(gobj);
                    }
                    // End display mode
                    displaying = false;

                } // animatenextprev
            } // ++loaded == endpic
        }); // fillfromarray
    }

    // Return the container width
    function containerwidth() {

        return outercontainerwidth;

    }

    // Must be called before anything else
    function init(indiv, uname, pvpg, nxpg, cfg) {

        // Shorten function name
        cfg.hp = cfg.hasOwnProperty;

        // Where this will appear on the page
        parentdiv = indiv;

        // User's name
        username = uname;

        // Previous-page 
        gridprevpage = pvpg;

        // Next-page
        gridnextpage = nxpg;

        // Configurables
        //marginleft = cfg.hp("marginleft") ? cfg.marginleft : 36;
        marginleft = cfg.hp("marginleft") ? cfg.marginleft : 10;

        // What's the right margin
        //marginright = cfg.hp("marginright") ? cfg.marginright : 4;
        marginright = cfg.hp("marginright") ? cfg.marginright : 10;
    
        // What's the top margin
        margintop = cfg.hp("margintop") ? cfg.margintop : 20;

        // What's the bottom margin
        marginbottom = cfg.hp("marginbottom") ? cfg.marginbottom : 60;

        // What's the picture border
        picborder = cfg.hp("picborder") ? cfg.picborder : 10;

        // What's the container's top margin
        containermargintop = cfg.hp("containermargintop") ? 
            cfg.containermargintop : 10;
    
        // What's the container's bottom margin
        containermarginbottom = cfg.hp("containermarginbottom") ? 
            cfg.containermarginbottom : 10;

        // What's the container's right margin
        containermarginright = cfg.hp("containermarginright") ?
            cfg.containermarginright : 10;

        // What's the container's left margin
        containermarginleft = cfg.hp("containermarginleft") ? 
            cfg.containermarginleft : 10;

        // What's the width of a picture
        picturewidth = cfg.hp("picturewidth") ? cfg.picturewidth : 300;
    
        // What's the max heigth of a picture
        pictureheight = cfg.hp("pictureheight") ? cfg.pictureheight : 300;

        // What's the max height of a footer
        footerheight = cfg.hp("footerheight") ? cfg.footerheight : 60;

        // What's the footer's font size
        footerfontsize = cfg.hp("footerfontsize") ? cfg.footerfontsize : 16;

        // What's the size of the picture count text
        subfooterfontsize = cfg.hp("subfooterfontsize") ? cfg.subfooterfontsize : 13;

        // Space between footer and picture
        footerspace = cfg.hp("footerspace") ? cfg.footerspace : 0;
    
        // How many pictures per row
        mealsperrow = cfg.hp("mealsperrow") ? cfg.mealsperrow : 3;
    
        // How many rows per page
        rowsperpage = cfg.hp("rowsperpage") ? cfg.rowsperpage : 3;
    
        // Derived: how many meals per grid
        mealspergrid = mealsperrow * rowsperpage;
    
        // Calculate spacer width
        //spacerwidth = cfg.hp("spacerwidth") ? cfg.spacerwidth : 20;

        // Derived: how many pixels wide?
        gridwidth = ((picturewidth + marginleft + marginright + 
            (2 * picborder)) * mealsperrow);
    
        // Allow 
        nxpvcallback = cfg.hp("nxpvcallback") ? cfg.nxpvcallback : null;
    
        // Easing function
        grideasing = cfg.hp("grideasing") ? cfg.grideasing : 'grideasingfunc';
    
        // Speed to change pages
        gridspeed = cfg.hp("gridspeed") ? cfg.gridspeed : 1000;
    
        // Viewport width leaves a little breathing room at the edges
        // viewportwidth = gridwidth + marginleft + marginright;
        viewportwidth = gridwidth;
    
        // Set the anchor click function
        anchorclickfn = cfg.hp("anchorclickfn") ? cfg.anchorclickfn : null;
    
        // Set the use-hover-text flag
        usehovertext = cfg.hp("usehovertext") ? cfg.usehovertext : null;

        // Set the top margin for the outer container
        outercontainermargintop = cfg.hp("outercontainermargintop") ? 
            cfg.outercontainermargintop : 10;

        // Set the top margin for the outer container
        outercontainermarginbottom = cfg.hp("outercontainermarginbottom") ? 
            cfg.outercontainermarginbottom : 10;

        // Set the left margin for the outer container
        outercontainermarginleft = cfg.hp("outercontainermarginleft") ? 
            cfg.outercontainermarginleft : 0;

        // Set the left margin for the outer container
        outercontainermarginright = cfg.hp("outercontainermarginright") ? 
            cfg.outercontainermarginright : 0;

        // Calculate the container grid height
        containerheight = rowsperpage * (pictureheight + footerheight +
                + (2 * picborder) + margintop + marginbottom);

        // Outer container height
        outercontainerheight = containerheight + containermargintop +
            containermarginbottom;

        // Outer container width
        outercontainerwidth = viewportwidth + containermarginleft +
            containermarginright;

        // We are not running display code
        displaying = false;

        // Display 'picture count' underneath the grid
        picturecounttrace = cfg.hp("picturecounttrace") ? 
            cfg.picturecounttrace : true;

        // Display 'picture time' underneath the grid
        picturetimetrace = cfg.hp("picturetimetrace") ?
            cfg.picturetimetrace : true;

        // Display date in slashed (MM/DD/YYYY) format.
        slasheddate = cfg.hp("slasheddate") ? 
            cfg.slasheddate : false;

        // Configure alignment of the footer text
        footeralign = cfg.hp("footeralign") ? cfg.footeralign : 'center';

        // Display a picture's title underneath the grid
        titletrace = cfg.hp("titletrace") ? cfg.titletrace : true;

        // Grid pic title's font color
        titlefontcolor = cfg.hp("titlefontcolor") ? cfg.titlefontcolor : "#555";

        // Animate next and prev page
        animatenextprev = cfg.hp("animatenextprev") ? cfg.animatenextprev : 
            false;

        // Set the modalisup callback
        modalisup = cfg.hp("modalisup") ? cfg.modalisup : null;

        // Default to 'shiftmeals' because it's already written
        deletebehavior = "redrawgrid";

        // Set the delete meal behavior
        if(cfg.hp("deletebehavior")) {

            // I can either delete in place or redraw the grid
            if(cfg.deletebehavior == "shiftmeals")
                deletebehavior = "shiftmeals";

            if(cfg.deletebehavior == "redrawgrid")
                deletebehavior = "redrawgrid";
        }
        

        // Set the easing function in jQuery
        if(!$.easing[grideasing]) {
            $.easing[grideasing] = function (x, t, b, c, d) {
                return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
            }
        }
    
        // Linear find picindex 
        function findpicidxlinear(pinfo, timestamp) {
    
            for(var ii = 0 ; ii < pinfo.length ; ii++) {
                if(pinfo[ii].timestamp == timestamp)
                    return ii;
            }
            return -1;
        }
    
        // Set findpicidx
        findpicidx = cfg.hp("findpicidx") ? cfg.findpicidx : findpicidxlinear;

        // Height will change as pictures are added
        gridviewport = $(dc('div'))
            .attr('id', 'gridviewport')
            .attr('class', 'gridviewport')
            //.css('position', 'relative')
            .css('top', '0px')
            .css('float', 'left')
            .css('height', containerheight + 'px')
            .css('width', viewportwidth + 'px');
    
        // Container holds viewport which will hide picture edges
        gridcontainer = $(dc('div'))
            .attr('id', 'gridcontainer')
            .attr('class', 'gridcontainer')
            .css('height', containerheight + 'px')
            .css('width', gridwidth + 'px')
            .css('overflow', 'hidden')
            .css('position', 'relative');
    
        // Outer container is background
        gridoutercontainer = $(dc('div'))
            .attr('id', 'gridoutercontainer')
            .attr('class', 'gridoutercontainer')
            .css('height', outercontainerheight + 'px')
            .css('width', outercontainerwidth + 'px')
            .css('margin-top', outercontainermargintop + 'px')
            .css('margin-bottom', outercontainermarginbottom + 'px')
            .css('margin-left', outercontainermarginleft + 'px')
            .css('margin-right', outercontainermarginright + 'px')
            .css('-moz-border-radius', '15px')
            .css('border-radius', '15px')
            .css('border', '1px solid')
            .css('background-color', '#eee')
            .css('position', 'relative');

        // Set the viewport height dynamically
        viewportheight = 0;
    
        // Append the viewport to the container
        gridviewport.appendTo(gridcontainer);

        gridcontainer.appendTo(gridoutercontainer);
    
        // Append this to the parentdiv if there is one
        if(parentdiv) {
            gridoutercontainer.appendTo(parentdiv);
        }
    }

    // Exposed functions
    return {
        init                        : init,
        displaygrid                 : displaygrid,
        mealcount                   : mealcount,
        updatedisplaypicture        : updatedisplaypicture,
        deletemealfromgrid          : deletemealfromgrid,
        updatepicturecount          : updatepicturecount,
        updatetitle                 : updatetitle,
        updatemeal                  : updatemeal,
        setnewmealanchor            : setnewmealanchor,
        containerwidth              : containerwidth
    };
}(jQuery));

// Initialize grid
picturegrid.init(
        document.getElementById('picturegridDiv'), 
        "<%= user.username %>",
        new mealpage(<%= prevts != undefined ? prevts : 0 %>), 
        new mealpage(<%= nextts != undefined ? nextts : 0 %>),
        { 
            nextdiv             : gridnav.nextpage,
            prevdiv             : gridnav.prevpage,
            nxpvcallback        : gridnav.nextprevcallback,
            anchorclickfn       : showattributes.show,
            findpicidx          : findpicidx.search,
            modalisup           : showattributes.modalisshowing,
            titletrace          : true,
            picturecounttrace   : true,
            animatenextprev     : true,
            rowsperpage         : 2
        
        }
);

// Initialize the gridnav object
gridnav.init(
        document.getElementById('gridNavDiv'),
        "<% user.username %>",
        {
            gridnavwidth        : picturegrid.containerwidth()
        }
);

// Another way to do this is to have a showattributes function that 
// takes a grid, and to have it use that grid directly.

// Set the newmeal anchor
picturegrid.setnewmealanchor(gridnav.getnewmealanchor());

// Set attributes callback for deleting a picture
showattributes.setgriddeletecallback(picturegrid.deletemealfromgrid);

// Set grid-display callback in modal
showattributes.setgriddisplaycallback(picturegrid.updatedisplaypicture);

// Set grid-update picture count
showattributes.setgridcountcallback(picturegrid.updatepicturecount);

// Set grid-update title callback
showattributes.setgridtitlecallback(picturegrid.updatetitle);

// Set grid update meal callback
showattributes.setgridmealcallback(picturegrid.updatemeal);

// Truncated meal class
function truncMeal(username, timestamp, keytimestamp, title, meal, 
        mealDate, picInfo) 
{
    this.username = username;
    this.timestamp = timestamp;
    this.keytimestamp = keytimestamp;
    this.title = title;
    this.meal = meal;
    this.mealDate = mealDate;
    if(!picInfo) {
        debuglog('picinfo is null??');
    }
    this.picInfo = picInfo;
    return this;
}

// Truncated picinfo class
function truncPicInfo(timestamp, mitimestamp, width, height, 
        thumbwidth, thumbheight)
{
    this.timestamp = timestamp;
    this.mitimestamp = mitimestamp;
    this.width = width;
    this.height = height;
    this.thumbwidth = thumbwidth;
    this.thumbheight = thumbheight;
    return this;
}

// Put embedded js which expands to more than one line at the end so
// that browser line-numbers match up with whats in the editor

// Initial mealset
<% 
if( mealinfo && mealinfo.length > 0 ) { 
    for(var i = 0 ; i < mealinfo.length ; i++) {
        var meal = mealinfo[i];

%>
var pinfo<%= i %> = [];
<%

    if(meal.picInfo && meal.picInfo.length > 0) {
        for(var j = 0 ; j < meal.picInfo.length ; j++) {
            var pic = meal.picInfo[j];
%>

pinfo<%= i %> [ <%= j %> ] = new truncPicInfo(
        <%= pic.timestamp %>,
        <%= pic.mitimestamp %>,
        <%= pic.width %>,
        <%= pic.height %>,
        <%= pic.thumbwidth %>,
        <%= pic.thumbheight %>
        );
<%
        }
    }
%>

// Initial minfo array
minfo[<%= i %>] = new truncMeal(
        "<%= meal.username %>",
        <%= meal.timestamp %>,
        <%= meal.keytimestamp %>,
        "<%= meal.title %>",
        "<%= meal.meal %>",
        <%= meal.mealDate %>,
        pinfo<%= i %>);
<%
    }
}
%>

// Display the initial grid
// picturegrid.displaygrid(minfo, null, null, 'forwards');

        </script>
    </body>
</html>
