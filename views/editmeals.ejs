<!DOCTYPE html>
<!-- 

TODO:
* Make the upper left-hand corner menu nicer
* Make the 'next' and 'previous' page commands SLIDE new pictures on rather than
  load an entirely new page.
* Upload should be a pop-up on this page rather than a full-fledged page.  If 
  you upload via a pop-up, the pictures could shift so that the newly uploaded 
  picture is shown first.

-->

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <title>Edit Meals</title> <link rel="stylesheet" href="/css/reset.css" />
        <link rel="stylesheet" href="/css/960.css" />
        <link rel="stylesheet" href="/css/text.css" />
        <link rel="stylesheet" href="/css/mealdisp.css" />
        <link rel="stylesheet" href="/css/datePicker.css" />
    </head>
    <body>


    <script src="/jquery.js"></script>
    <!--    <script src="/jquery.slider.js"></script> -->
    <script src="/date.js"></script>
    <script src="/jquery.datePicker.js"></script>
    <script src="/carousel.js"></script>
    <script type="text/javascript">

        // My own Date-string type
        Date.prototype.asMyString = function() {
            var monthNames = [ "January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December" ];
            return monthNames[this.getMonth()] + ' ' + this.getDate() + ', ' + this.getFullYear();
        }

        // Create element wrapper
        var dc = function(a)
        {
            return document.createElement(a);
        };

        // Enable or disable debug trace
        debuglog = function(text) {
            console.log(text);
        }


/* Not yet */
/*
        if(navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                function(position) {
                    debuglog('updating position');
                    $.ajax({
                        url: '/updateposition',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(
                            {
                                username: meal.username,
                                position: position
                            }),
                        dataType: 'json',

                        complete: function(resp, astat){
                        }
                    });
                }, 
                function(error) {}, 
                { enableHighAccuracy: true }
            );
        }
*/

        function global_editmeals(username, showMealsPerPage, nextmd, nextts, prevmd, prevts) {
            this.username = username;
            this.showMealsPerPage = showMealsPerPage;
            this.nextmd = nextmd;
            this.nextts = nextts;
            this.prevmd = prevmd;
            this.prevts = prevts;
            //this.carousel_interval = 5000;
            //this.carousel_fadetime = 0;
            return this;
        }

        var page_globals = global_editmeals(
                "<%= user.username %>", 
                <%= user.showMealsPerPage %>,
                <%= nextmd != undefined ? nextmd:0 %>,
                <%= nextts != undefined ? nextts:0 %>,
                <%= prevmd != undefined ? prevmd:0 %>,
                <%= prevts != undefined ? prevts:0 %>);

        // Functionize mealinfo
        var MEALINFO = (function() {

            var NOMEAL = 0;
            var BREAKFAST = 1;
            var LUNCH = 2;
            var DINNER = 3;
            var SNACK = 4;
            var OTHER = 5;
            var MAXMEAL = 99;
    
            function mealToConst(meal)
            {
                if(meal == undefined || !meal)
                {
                    return NOMEAL;
                }
                if(meal == "breakfast")
                {
                    return BREAKFAST;
                }
                if(meal == "lunch")
                {
                    return LUNCH;
                }
                if(meal == "dinner")
                {
                    return DINNER;
                }
                if(meal == "snack")
                {
                    return SNACK;
                }
                if(meal == "other")
                {
                    return OTHER;
                }
                throw new Error("Invalid mealConst: " + meal);
            }
    
            // Utility function
    		function mealDateToDate(mealdate)
    		{
    		    var year = mealdate / 1000000; mealdate %= 1000000;
    		    var month = mealdate /  10000; mealdate %=   10000;
    		    var day  = mealdate /     100;
    		    return new Date(year, month-1, day);
    		}
    
            function dateToMealDate(date, mealconst)
            {
                return  (date.getFullYear()    * 1000000) +
                        ((date.getMonth() + 1)   * 10000) +
                        (date.getDate()            * 100) +
                        (mealconst);
            }

            return {
                dateToMealDate : dateToMealDate,
                mealDateToDate : mealDateToDate,
                NOMEAL : NOMEAL,
                BREAKFAST : BREAKFAST,
                LUNCH : LUNCH,
                DINNER : DINNER,
                SNACK : SNACK,
                OTHER : OTHER,
                MAXMEAL : MAXMEAL
            };
        }());

        function updateMealDateAjax(meal, mealdate) {
            $.ajax({
                url: '/savemealdate',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(
                    {
                        username: meal.username,
                        timestamp: meal.timestamp,
                        mealdate: mealdate
                    }),
                dataType: 'json',
                // TODO: consolidated JSON response handling
                complete: function(resp, astat){
                }
            });
        }

        function updateReviewAjax(meal, review) {
            $.ajax({
                url: '/savereview',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(
                    {
                        username: meal.username,
                        timestamp: meal.timestamp,
                        review: review
                    }),
                dataType: 'json',
                // TODO: consolidated JSON response handling
                complete: function(resp, astat){
                }
            });
        }

        function updateRatingAjax(meal, rating) {
            $.ajax({
                url: '/saverating',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(
                    {
                        username: meal.username,
                        timestamp: meal.timestamp,
                        rating: rating
                    }),
                dataType: 'json',
                complete: function(resp, astat) {
                    //debuglog('put a breakpoint here');
                }
            });
        }

        function makeKeyPicAjax(meal, picInfo) {
            $.ajax({
                url: '/updatekeypic',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(
                    {
                        username: meal.username,
                        mealts: meal.timestamp,
                        keyts: picInfo.timestamp,
                    }),
                dataType: 'json',
                complete: function(resp, astat) {
                }
            });
        }

        function deletePicAjax(meal, picInfo) {
            $.ajax({
                url: '/deletepic',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(
                    {
                        username: meal.username,
                        mealts: meal.timestamp,
                        timestamp: picInfo.timestamp,
                    }),
                dataType: 'json',
                complete: function(resp, astat) {
                }
            });
        }

        function updateMealAjax(meal, newMeal) {
            $.ajax({
                url: '/savemeal',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(
                    {
                        username: meal.username,
                        timestamp: meal.timestamp,
                        meal: newMeal
                    }),
                dataType: 'json',
                complete: function(resp, astat) {
                }
            });
        }

        var textAreaWidthCols = 65;

        $.browser.chrome = /chrome/.test(navigator.userAgent.toLowerCase());

        if($.browser.mozilla) {
            textAreaWidthCols = 65;
        }
        else if($.browser.chrome) {
            textAreaWidthCols = 57;
        }

        // Create a new meal via an ajax request & then show it's attributes
        function newMealPopup() {
            $.getJSON('/newmeal',
                {
                    username: page_globals.username
                },
                function(response) {
                    if(response.message == undefined || response.message != "success") {
                        if("baduser" == response.message) {
                            window.location.replace("/signin");
                        }
                        else {
                            debuglog("Response error is ", response.message);
                            window.location.replace("/");
                        }
                        return;
                    }

                    $('#pictureGridDiv').html('');
                    drawNextMeals(response.timestamp);
                    showAttributes(page_globals.username, response.timestamp, 0);
                });
        }

        function uploadMealPopup(mealts, callback) {

            var hiddenElements = $('#hiddenElements');

            hiddenElements.empty();

            var hiddenIFrame = $(dc('iframe'))
                .attr('style', 'width:0px;height:0px;border:0px;')
                .attr('name', 'hiddenIFrame')
                .attr('id', 'hiddenIFrame');

            var uploadForm = $(dc('form'))
                .attr('id', 'uploadForm')
                .attr('name', 'uploadForm')
                .attr('method', 'post')
                .attr('enctype', 'multipart/form-data')
                .attr('action', '/editmealsupload')
                .attr('target', 'hiddenIFrame');

            uploadForm.appendTo(hiddenIFrame);

            // Wait for the html of the hidden iframe to change: tells you that
            // the upload was successful.
            var fileUpload = $(dc('input'))
                .attr('type', 'file')
                .attr('name', 'inputUpload')
                .attr('id', 'inputUpload');

            // pass the userid.
            var userId = $(dc('input'))
                .attr('type', 'hidden')
                .attr('name', 'username')
                .attr('id', 'username')
                .val(page_globals.username);

            // Send the timestamp of the corresponding meal
            var mealTimestamp = $(dc('input'))
                .attr('type', 'hidden')
                .attr('name', 'mealInfo')
                .attr('id', 'mealInfo')
                .val(mealts);

            hiddenIFrame.appendTo(hiddenElements);

            var cnt = 0;

            // TODO - this could be slow.. maybe i could show a popup saying that things are uploading?
            function checkUploaded() {

                var hiddenIFrame = $('#hiddenIFrame');
                var bodyText = hiddenIFrame.contents().find('body').html();
                var regex = /^SUCCESS [0-9]+ [0-9]+$/;

                // Put a reasonable hard-timeout here.  Uploading seems to be wanky - 
                // if the timeout expires, reload the 'main' page with a special
                // tag that says 'edit the first picture if it's greater than the 
                // first picture I've ever seen (pass that in the request).  Otherwise, 
                // print an error message.
                if(null == bodyText || bodyText == "") {
                    debuglog('checkUploaded bodyText is null - resetting timeout, cnt is ' + cnt++);
                    setTimeout(checkUploaded, 1000);
                    return;
                }

                // Success case 
                if(regex.test(bodyText)) {

                    // Split on the spaces
                    var ar = bodyText.split(" ");

                    // Retrieve picture timestamp
                    var picts = parseInt(ar[1], 10);

                    // Retrieve picture height
                    var height = parseInt(ar[2], 10);

                    // Create minimal picinfo
                    var pinfo = { 'timestamp' : picts, 'height': height };

                    // Debug message
                    debuglog('checkUploaded timestamp is ' + picts);
                    debuglog('checkUploaded height is ' + height);
                    debuglog('cnt is ' + cnt++);

                    // Add to the picture-mobile
                    callback(null, pinfo);
                    return;
                }
                else {
                    // Redirect to the homepage on error
                    debuglog('Error from server: ' + bodyText);
                    window.location.replace("/");
                }
            }

            fileUpload.change(function() {
                uploadForm.submit();
                setTimeout(checkUploaded, 1000);
            });

            fileUpload.appendTo(uploadForm);
            userId.appendTo(uploadForm);
            mealTimestamp.appendTo(uploadForm);

            $('#inputUpload').click();

        } /* uploadMealPopup */

        // Create a div which will display the nomeal icon in the carousel
        function nomealdiv(elm) {

            // If this has already been created return it
            if(elm.$nomealdiv) {
                return elm.$nomealdiv;
            }

            // Create div to contain this picture
            var $dv = $(dc('div'))
                .attr('id', 'pic-div-nomeal')
                .attr('class', 'pic-div')
                .css('width', '0px');

            // Internal class
            var $dvint = $(dc('div'))
                .attr('class', 'pic-div-int')
                .css('width', '780px');

            // Click-anchor 
            var anchor = $(dc('a'))
                .attr('class', 'pic-div-anchor');

            // Source string
            var img_source = '/images/nomeal.png';

            // Image tag
            var img = $(dc('img'))
                .attr('class', 'pic-div-image')
                .attr('src', img_source);

            // Append these 
            img.appendTo(anchor);
            anchor.appendTo($dvint);
            $dvint.appendTo($dv);

            $dv[0].pinfo = { height: 256, width: 256, timestamp: -1 };
                
            // Cache 
            elm.$nomealdiv = $dv;

            return $dv;
        }

        // Create an div which will contain a carousel picture
        function picturediv(elm, pinfo) {

            // Create div to contain this picture
            var $dv = $(dc('div'))
                .attr('id', 'pic-div-' + pinfo.timestamp)
                .attr('class', 'pic-div')
                .css('width', '0px');

            var $dvint = $(dc('div'))
                .attr('class', 'pic-div-int')
                .css('position', 'absolute')
                .css('height', pinfo.height + 'px')
                .css('width', '780px');

            // Store pinfo 
            $dv[0].pinfo = pinfo;

            // Click-anchor 
            var anchor = $(dc('a'))
                .attr('class', 'pic-div-anchor');

            // Source string
            var img_source = '/pics/' + page_globals.username + '/' + pinfo.timestamp;

            // Image tag
            var img = $(dc('img'))
                .attr('class', 'pic-div-image')
                .attr('src', img_source);

            // TODO write picture click handler
            /* 
            anchor.click(function(){

                if(elm.stopped == false) {

                    clearTimeout(elm.pictimeout);
                    elm.stopped = true;

                }
                else{

                    elm.stopped = false;
                    rotatepictures(elm);

                }
            });
            */

            // Append image to anchor
            img.appendTo(anchor);

            // Append anchor to internal-div
            anchor.appendTo($dvint);

            // Append internal-div to div
            $dvint.appendTo($dv);

            return $dv;
        }

        // Binary search for a specific timestamp
        function findpicidx(pinfo, timestamp) {

            var left = 0;
            var right = pinfo.length;
            var ii = Math.floor(left + ( (right - left) / 2));

            // This shouldn't happen
            if(!pinfo || pinfo.length <= 0) {
                debuglog('Error: findpicidx called with a null pinfo');
            }

            // Loop
            while(true) {

                // Found index
                if(pinfo[ii].timestamp == timestamp)
                    return ii;

                // Change left endpoint
                if(timestamp > pinfo[ii].timestamp)
                    left = ii + 1;

                // Change right endpoint
                else if(timestamp < pinfo[ii].timestamp)
                    right = ii;

                // Didn't find it
                if(left >= right) return -1;

                // Next element
                ii = Math.floor(left + ( (right - left) / 2));
            }
        }

        // Meal attributes / edit modal
        function showAttributesMealInfo(meal, restaurant, restaurantId) {

            var username = meal.username;
            var timestamp = meal.timestamp;

            var popup = $(dc('div'))
                .attr('id', 'mealAttributes')
                .attr('class', 'mealAttributesPopup');

            // Center things on this popup.  
            // The center-tag is a little old-school these days.
            var centr = $(dc('center'));

            // Carousel div
            var carouselDivContainer = $(dc('div'))
                .attr('id', 'mealCarouselContainer')
                .attr('class', 'mealCarouselContainer');

            // Create a carousel
            var elm = createPictureCarousel(meal.picInfo, findpicidx, meal.keytimestamp);

            // Append it to the div
            elm.appendTo(carouselDivContainer);

            // Append carousel to popup
            carouselDivContainer.appendTo(centr);

            var closexContainer = $(dc('div'))
                .attr('id', 'mealAttributesCloseContainer')
                .attr('class', 'mealAttributesCloseContainer');

            var closex = $(dc('a'))
                .attr('id', 'mealAttributesCloseButton')
                .attr('class', 'mealAttributesCloseButton')
                .html('x');

            // Click handler for close button
            closex.click(function(){

                // Destroy carousel
                elm.destroy();

                // Fade out popup
                popup.fadeOut(0);

                // Remove background
                $('#maskFade').css({'display':'none'});

                // Remove popup
                popup.remove();
            });

            closex.appendTo(closexContainer);
            closexContainer.appendTo(popup);

            // They look best below
            centr.appendTo(popup);

            // Create a class_8 container .. everything goes in here
            var class8 = $(dc('div'))
                .attr('id', 'mealAttributesClass8')
                .attr('class', 'container_8');

            var subcarousel = $(dc('div'))
                .attr('id', 'subcarousel')
                .attr('class', 'carousel_caption');

            var uploadAnchor = $(dc('a'))
                .attr('id', 'uploadPictureAnchor')
                .attr('class', 'carousel_caption uploadPictureAnchor grid_3')
                .html('Upload New Picture');


            function updatepicturecount(meal) {

                // Update grid
                var divstr = '#gridTimestamp' + meal.timestamp + ' > div > center > .picturecount';

                var div = $(divstr);

                var picturecountstring;

                if(meal.picInfo.length == 1) {
                    picturecountstring = "1 picture";
                }
                else {
                    picturecountstring = meal.picInfo.length + " pictures";
                }

                div.html(picturecountstring);
            }

            // TODO - this should cleaned up!
            function setdisplaypicture(meal, timestamp) {

                // New source for key timestamp
                var imgsrc;

                // Update grid
                var gridstr = '#gridTimestamp' + meal.timestamp + ' > div > center > div > a > img';

                // Get the element
                var gridpic = $(gridstr);

                if(timestamp > 0) {
                    imgsrc = '/thumbs/' + meal.username + '/' + timestamp;
                }
                else {
                    imgsrc = '/images/nomeal.png';
                }

                // Set image source
                gridpic.attr('src', imgsrc);

                // Update keytimestamp in meal object
                meal.keytimestamp = timestamp;
            }

            // Click function for the upload anchor
            uploadAnchor.click(function() {

                // Popup works from a hidden frame
                uploadMealPopup(meal.timestamp, function(err, pinfo) {

                    // Throw any errors
                    if(err) throw(err);

                    // Add this to the carousel
                    elm.addpicture(pinfo, false, false, function(added, ckfirst, ts) {

                        if(added) {

                            // Make key photo if this was the first
                            if(ckfirst) {
                                setdisplaypicture(meal, ts);
                            }

                            debuglog('pushing ' + pinfo.timestamp + ' ts is ' + ts);

                            // Push this picture onto the meal.picInfo array
                            meal.picInfo.push(pinfo);


                            // Update picture count
                            updatepicturecount(meal);
                        }

                        // Set the focus back on the carousel
                        elm.focus();
                    });

                });
            });

            var makeKeyAnchor = $(dc('a'))
                .attr('id', 'keyAnchor')
                .attr('class', 'carousel_caption keyAnchor grid_2')
                .html('Make Key Photo');

            // Make this general & use same code for delete [0] case
            makeKeyAnchor.click(function() {

                // ajax for username, mealts, and keyts
                elm.makekeypicture(function(success, pinfo) {

                    if(success) {

                        // Update mongo on the server
                        makeKeyPicAjax(meal, pinfo);

                        // Set the display picture
                        setdisplaypicture(meal, pinfo.timestamp);
                    }
                });
            });

            // Create delete picture anchor
            var deleteAnchor = $(dc('a'))
                .attr('id', 'deletePictureAnchor')
                .attr('class', 'carousel_caption deletePictureAnchor grid_3')
                .html('Delete Picture');

            // Click handler
            deleteAnchor.click(function() {

                // Remove picture from carousel
                elm.removepicture(function(removed, pinfo) {

                    if(removed) {

                        // Find index of removed photo
                        var ii = findpicidx(meal.picInfo, pinfo.timestamp);

                        // Remove this picture
                        if(ii >= 0) {
                            meal.picInfo.splice(ii, 1);
                        }

                        var changepic = false;

                        // Delete from mongo
                        deletePicAjax(meal, pinfo);

                        // Was this a key picture
                        if(pinfo.timestamp == meal.keytimestamp) {

                            changepic = true;
                            meal.keytimestamp = 0;

                        }

                        // If this was the first picture
                        if(!meal.keytimestamp && ii == 0) {
                            changepic = true;
                        }

                        // Changing the displaypic
                        if(changepic) {
                            var newts = 0;

                            // Get new key picture
                            if(meal.picInfo.length > 0) {
                                newts = meal.picInfo[0].timestamp;
                            }

                            // Set new display picture
                            setdisplaypicture(meal, newts);
                        }

                        // Update grid picture count
                        updatepicturecount(meal);
                    }
                });
            });

            // Add to the carousel fadeobjs
            elm.addfadeobj(makeKeyAnchor.get(0));

            // Add to the carousel fade objects
            elm.addfadeobj(deleteAnchor.get(0));

            // Clear 
            var carouselClear = $(dc('div'))
                .attr('class', 'clear');

            // Attach to popup
            uploadAnchor.appendTo(subcarousel);
            makeKeyAnchor.appendTo(subcarousel);
            deleteAnchor.appendTo(subcarousel);
            subcarousel.appendTo(class8);
            carouselClear.appendTo(class8);

            /*
            uploadAnchor.appendTo(class8);
            makeKeyAnchor.appendTo(class8);
            deleteAnchor.appendTo(class8);
            */

            // Lets skip a line
            var skipLine = $(dc('div'))
                .attr('class', 'grid_8 skipline')
                .html('.');
            var skipClear = $(dc('div'))
                .attr('class', 'clear');

            skipLine.appendTo(class8);
            skipClear.appendTo(class8);

            // Create a grid to hold the title
            var grid_title_pre = $(dc('div'))
                .attr('class', 'grid_3')
                .html('Title');

            var title = "untitled";

            if(undefined != meal.title && meal.title.length > 0) {
                title = meal.title;
            }

            var hovertitle = $(dc('a'))
                .attr('id', 'titleEdit')
                .attr('class', 'titleEdit')
                .attr('title', 'click to edit')
                .html(title);

            // Title grid
            var grid_title = $(dc('div'))
                .attr('class', 'grid_5')
                .attr('id', 'pop_title');

            hovertitle.appendTo(grid_title);

            hovertitle.click(function(){

                var titleEditInput = $(dc('input'))
                    .attr('type', 'text')
                    .attr('class', 'titleEditInput')
                    .attr('name', 'titleEditInput')
                    .attr('maxlength', '29')
                    .attr('size', '29')
                    .val(meal.title);

                titleEditInput.appendTo(grid_title);
                $('#titleEdit').css({'display':'none'});

                titleEditInput.focus();

                // Disable carosel arrow behavior
//                $(document).off("keydown.carousel");
                elm.disablekeydown();

                function blurTitleInput(meal, titleEditInput, keepcurrent) {
                    if(titleEditInput.val() != meal.title && keepcurrent == 0) {

                        var titleEdit = '#gridTimestamp' + meal.timestamp + ' > div > center > .titleText';

                        meal.title = titleEditInput.val();
                        $('#titleEdit').html(meal.title);
                        $(titleEdit).html(meal.title);

                        $.ajax({
                            url: '/savetitle',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(
                                {
                                    username: meal.username,
                                    timestamp: meal.timestamp,
                                    title: titleEditInput.val()
                                }),
                            dataType: 'json',
                            complete: function(resp, astat) {
                            }
                        });
                    }
                    $('#titleEdit').css({'display':'inline-block'});
                    titleEditInput.remove();
                    elm.enablekeydown();
                }


                // I want certain keys (return or tab) to force a blur
                titleEditInput.keydown(function(e){
                    var code = (e.keyCode ? e.keyCode : e.which);
                    switch(code) {
                        // XXX 
                        case 39:
                        case 37:
                            return true;
                            break;
                        case 13:
                        case 9:
                            titleEditInput.blur();
                            return false;
                            break;
                        case 27:
                            blurTitleInput(meal, titleEditInput, 1);
                            return false;
                            break;
                    }
                });

                titleEditInput.blur(function() {
                        blurTitleInput(meal, titleEditInput, 0);
                });
            });

            var grid_title_clear = $(dc('div'))
                .attr('class', 'clear');

            // Append title
            grid_title_pre.appendTo(class8);
            grid_title.appendTo(class8);
            grid_title_clear.appendTo(class8);

            // When uploaded.  Maybe this belongs somewhere else?  maybe there should be 
            // an inputable calendar (i think theres a jquery plugin for that)?  
            // will think about it.
            //
            // yes - got it
            //
            /*
            var grid_uploaded_pre = $(dc('div'))
                .attr('class', 'grid_3')
                .html('Uploaded');

            var localeDate = new Date(meal.timestamp).toLocaleDateString();

            var grid_uploaded = $(dc('div'))
            .attr('class', 'grid_5')
                .attr('id', 'pop_date_uploaded')
                .html(localeDate);

            var grid_uploaded_clear = $(dc('div'))
                    .attr('class', 'clear');

            grid_uploaded_pre.appendTo(class8);
            grid_uploaded.appendTo(class8);
            grid_uploaded_clear.appendTo(class8);
            */

            var grid_date_pre = $(dc('div'))
                .attr('class', 'grid_3')
                .html('Date');
            
            var grid_date = $(dc('div'))
                .attr('class', 'grid_5')
                .attr('id', 'pop_date');

            var mealDate = MEALINFO.mealDateToDate(meal.mealDate);

            var grid_date_anchor = $(dc('a'))
                .attr('id', 'pop_date_anchor')
                .attr('class', 'pop_date_anchor')
                .attr('title', 'click to edit')
                .css({'display':'inline-block'});

            var grid_date_text = $(dc('div'))
                .attr('id', 'pop_date_text')
                .attr('class', 'pop_date_text')
                .html(new Date(mealDate).asMyString());

            grid_date_text.appendTo(grid_date_anchor);

            var grid_date_input = $(dc('input'))
                .attr('type', 'text')
                .attr('class', 'pop_date_input')
                .attr('id', 'pop_date_input')
                .attr('name', 'pop_date_input')
                .val(new Date(mealDate).asString());

//            $('#pop_date_input').css({'display':'none'});

            // This append *must* occur before the call to datePicker.
            //grid_date_input.appendTo(grid_date_anchor);
            grid_date_input.appendTo(grid_date);

            grid_date_anchor.appendTo(grid_date);

            grid_date_input.datePicker( { createButton: false, startDate: new Date(1990, 0, 1) } );

            grid_date_input.css({'display':'none'});
//            grid_date.css({'display':'inline-block'});

            grid_date_text.click(function() {
                // grid_date_input.css({'display':'inline-block'});
                grid_date_input.dpDisplay(grid_date);
            });

            grid_date_input.on('dateSelected', function(e, sdate, td, selected) {
                // Set the pop-up date
                $('#pop_date_text').html(sdate.asMyString());

                // Calculate the mealdate
                var md = MEALINFO.dateToMealDate(sdate, MEALINFO.mealToConst(meal.meal));

                // Update server side
                updateMealDateAjax(meal, md);

                return false;
            });

                /*
            grid_date.blur(function() {
                debuglog('I am blurred');
            });
            */

            //grid_date_input.mouseleave(function() {
                //grid_date_input.dpClose();
            //});

            var grid_date_clear = $(dc('div'))
                .attr('class', 'clear');


            //grid_date_input.val(mealDate.asString());

            // Create a calendar in this div
            // TODO - declare an input, and make it the 'datePick' class

            grid_date_pre.appendTo(class8);
            grid_date.appendTo(class8);
            grid_date_clear.appendTo(class8);

            // 
            var whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);

            // Which meal
            var grid_meal_pre = $(dc('div'))
                .attr('class', 'grid_3')
                .html('Meal');

            var grid_meal = $(dc('div'))
                .attr('class', 'grid_5')
                .attr('id', 'pop_meal');
//                .html(whichmeal);

            // Create the which-meal selection menu
            var grid_meal_select_div = $(dc('div'))
                .attr('class', 'meal_select_menu_div')
                .attr('id', 'meal_select_menu_div')
                .css({'display': 'block'});
                //.css({'display': 'none'});

            var grid_meal_select = $(dc('ul'))
                .attr('class', 'meal_select_menu')
                .attr('id', 'meal_select_menu')
                .attr('name', 'meal_select_menu');

            // BREAKFAST
            var grid_meal_select_meal_breakfast = $(dc('li'))
                .attr('class', 'meal_select_menu_selection')
                .attr('name', 'meal_select_menu_breakfast')
                .attr('id', 'meal_select_menu_breakfast');
            var grid_meal_select_meal_breakfast_anchor = $(dc('a'))
                .attr('id', 'meal_select_breakfast_anchor')
                .attr('class', 'meal_select_anchor')
                .html('Breakfast');
            if(meal.meal == "breakfast") {
                grid_meal_select_meal_breakfast_anchor.attr('class', 'grid_meal_selected');
            }
            
            grid_meal_select_meal_breakfast_anchor.click(function() {
                if(meal.meal == "breakfast") {
                    return;
                }
                if(meal.meal == "lunch" ) {
                    grid_meal_select_meal_lunch_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "dinner" ) {
                    grid_meal_select_meal_dinner_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "snack" ) {
                    grid_meal_select_meal_snack_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "other" ) {
                    grid_meal_select_meal_other_anchor.removeClass('grid_meal_selected');
                }
                grid_meal_select_meal_breakfast_anchor.attr('class', 'grid_meal_selected');
                meal.meal = "breakfast";
                whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
                grid_meal.html(whichmeal);
                updateMealAjax(meal, "breakfast");
            });

            grid_meal_select_meal_breakfast_anchor.appendTo(grid_meal_select_meal_breakfast);

            // LUNCH
            var grid_meal_select_meal_lunch = $(dc('li'))
                .attr('class', 'meal_select_menu_selection')
                .attr('name', 'meal_select_menu_lunch')
                .attr('id', 'meal_select_menu_lunch');

            var grid_meal_select_meal_lunch_anchor = $(dc('a'))
                .attr('id', 'meal_select_lunch_anchor')
                .attr('class', 'meal_select_anchor')
                .html('Lunch');
            if(meal.meal == "lunch") {
                grid_meal_select_meal_lunch_anchor.attr('class', 'grid_meal_selected');
            }
            grid_meal_select_meal_lunch_anchor.click(function() {
                if(meal.meal == "lunch") {
                    return;
                }
                if(meal.meal == "breakfast" ) {
                    grid_meal_select_meal_breakfast_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "dinner" ) {
                    grid_meal_select_meal_dinner_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "snack" ) {
                    grid_meal_select_meal_snack_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "other" ) {
                    grid_meal_select_meal_other_anchor.removeClass('grid_meal_selected');
                }
                grid_meal_select_meal_lunch_anchor.attr('class', 'grid_meal_selected');
                meal.meal = "lunch";
                whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
                grid_meal.html(whichmeal);
                updateMealAjax(meal, "lunch");
            });
            grid_meal_select_meal_lunch_anchor.appendTo(grid_meal_select_meal_lunch);

            // DINNER
            var grid_meal_select_meal_dinner = $(dc('li'))
                .attr('class', 'meal_select_menu_selection')
                .attr('name', 'meal_select_menu_dinner')
                .attr('id', 'meal_select_menu_dinner');
            var grid_meal_select_meal_dinner_anchor = $(dc('a'))
                .attr('id', 'meal_select_dinner_anchor')
                .attr('class', 'meal_select_anchor')
                .html('Dinner');
            if(meal.meal == "dinner") {
                grid_meal_select_meal_dinner_anchor.attr('class', 'grid_meal_selected');
            }
            grid_meal_select_meal_dinner_anchor.click(function() {
                if(meal.meal == "dinner") {
                    return;
                }
                if(meal.meal == "breakfast" ) {
                    grid_meal_select_meal_breakfast_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "lunch" ) {
                    grid_meal_select_meal_lunch_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "snack" ) {
                    grid_meal_select_meal_snack_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "other" ) {
                    grid_meal_select_meal_other_anchor.removeClass('grid_meal_selected');
                }
                grid_meal_select_meal_dinner_anchor.attr('class', 'grid_meal_selected');
                meal.meal = "dinner";
                whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
                grid_meal.html(whichmeal);
                updateMealAjax(meal, "dinner");
            });
            grid_meal_select_meal_dinner_anchor.appendTo(grid_meal_select_meal_dinner);

            // SNACK
            var grid_meal_select_meal_snack = $(dc('li'))
                .attr('class', 'meal_select_menu_selection')
                .attr('name', 'meal_select_menu_snack')
                .attr('id', 'meal_select_menu_snack');
            var grid_meal_select_meal_snack_anchor = $(dc('a'))
                .attr('id', 'meal_select_snack_anchor')
                .attr('class', 'meal_select_anchor')
                .html('Snack');
            if(meal.meal == "snack") {
                grid_meal_select_meal_snack_anchor.attr('class', 'grid_meal_selected');
            }
            grid_meal_select_meal_snack_anchor.click(function() {
                if(meal.meal == "snack") {
                    return;
                }
                if(meal.meal == "breakfast" ) {
                    grid_meal_select_meal_breakfast_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "lunch" ) {
                    grid_meal_select_meal_lunch_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "dinner" ) {
                    grid_meal_select_meal_dinner_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "other" ) {
                    grid_meal_select_meal_other_anchor.removeClass('grid_meal_selected');
                }
                grid_meal_select_meal_snack_anchor.attr('class', 'grid_meal_selected');
                meal.meal = "snack";
                whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
                grid_meal.html(whichmeal);
                updateMealAjax(meal, "snack");
            });
            grid_meal_select_meal_snack_anchor.appendTo(grid_meal_select_meal_snack);

            var grid_meal_select_meal_other = $(dc('li'))
                .attr('class', 'meal_select_menu_selection')
                .attr('name', 'meal_select_menu_other')
                .attr('id', 'meal_select_menu_other');
            var grid_meal_select_meal_other_anchor = $(dc('a'))
                .attr('id', 'meal_select_other_anchor')
                .attr('class', 'meal_select_anchor')
                .html('Other');
            if(meal.meal == "other") {
                grid_meal_select_meal_other_anchor.attr('class', 'grid_meal_selected');
            }
            grid_meal_select_meal_other_anchor.click(function() {
                if(meal.meal == "other") {
                    return;
                }
                if(meal.meal == "breakfast" ) {
                    grid_meal_select_meal_breakfast_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "lunch" ) {
                    grid_meal_select_meal_lunch_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "dinner" ) {
                    grid_meal_select_meal_dinner_anchor.removeClass('grid_meal_selected');
                }
                if(meal.meal == "snack" ) {
                    grid_meal_select_meal_snack_anchor.removeClass('grid_meal_selected');
                }
                grid_meal_select_meal_other_anchor.attr('class', 'grid_meal_selected');
                meal.meal = "other";
                whichmeal = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
                grid_meal.html(whichmeal);
                updateMealAjax(meal, "other");
            });
            grid_meal_select_meal_other_anchor.appendTo(grid_meal_select_meal_other);

            // build menu
            grid_meal_select_meal_breakfast.appendTo(grid_meal_select);
            grid_meal_select_meal_lunch.appendTo(grid_meal_select);
            grid_meal_select_meal_dinner.appendTo(grid_meal_select);
            grid_meal_select_meal_snack.appendTo(grid_meal_select);
            grid_meal_select_meal_other.appendTo(grid_meal_select);
            grid_meal_select.appendTo(grid_meal_select_div);

            // Define hover behaviors
            /*
            grid_meal.mouseenter(
                function(){
                    $('#meal_select_menu_div').css({ 'display': 'block' });
                }
            );

            grid_meal_select_div.mouseleave(
                function(){
                    $('#meal_select_menu_div').css({ 'display': 'none' });
                }
            );
            */

            var grid_meal_clear = $(dc('div'))
                .attr('class', 'clear');

            // Append meal
            grid_meal_pre.appendTo(class8);
            grid_meal.appendTo(class8);
            grid_meal_select_div.appendTo(class8);
            grid_meal_clear.appendTo(class8);

            // How many stars
            var grid_stars_pre = $(dc('div'))
                .attr('class', 'grid_3')
                .html('Rating');

            // Rating selector container
            var grid_stars = $(dc('div'))
                .attr('class', 'grid_5')
                .attr('id', 'pop_rating')
                .attr('name', 'name_rating');

            // Create a sub-div that will contain the star-elements
            var grid_stars_select_div = $(dc('div'))
                .attr('class', 'stars_select_menu_div')
                .attr('id', 'stars_select_menu_div');

            // Start an unordered list
            var grid_stars_select = $(dc('ul'))
                .attr('class', 'stars_select_menu')
                .attr('id', 'stars_select_menu')
                .attr('name', 'stars_select_menu');

            // There will be five of them
            var grid_stars_select_stars_0 = $(dc('li'))
                .attr('class', 'star_select_menu_selection')
                .attr('name', 'star_select_menu_0')
                .attr('id', 'star_select_menu_0');

            var grid_stars_select_stars_0_anchor = $(dc('a'))
                .attr('id', 'stars_select_stars_0_anchor')
                .attr('class', 'stars_select_anchor')
                .css({ 'color' : '#fff' })
                .html('&#11036');

            var grid_stars_select_stars_1_anchor = $(dc('a'))
                .attr('id', 'stars_select_stars_1_anchor')
                .attr('class', 'stars_select_anchor')
                .html('&#9733;');

            var grid_stars_select_stars_2_anchor = $(dc('a'))
                .attr('id', 'stars_select_stars_2_anchor')
                .attr('class', 'stars_select_anchor')
                .html('&#9733;');

            var grid_stars_select_stars_3_anchor = $(dc('a'))
                .attr('id', 'stars_select_stars_3_anchor')
                .attr('class', 'stars_select_anchor')
                .html('&#9733;');

            var grid_stars_select_stars_4_anchor = $(dc('a'))
                .attr('id', 'stars_select_stars_4_anchor')
                .attr('class', 'stars_select_anchor')
                .html('&#9733;');

            var grid_stars_select_stars_5_anchor = $(dc('a'))
                .attr('id', 'stars_select_stars_5_anchor')
                .attr('class', 'stars_select_anchor')
                .html('&#9733;');

            // TODO - this could be more efficient 
            function reset_stars_select_classes_hover() {
                grid_stars_select_stars_0_anchor.removeClass("stars_unselected_star_hover");
                grid_stars_select_stars_1_anchor.removeClass("stars_unselected_star_hover");
                grid_stars_select_stars_2_anchor.removeClass("stars_unselected_star_hover");
                grid_stars_select_stars_3_anchor.removeClass("stars_unselected_star_hover");
                grid_stars_select_stars_4_anchor.removeClass("stars_unselected_star_hover");
                grid_stars_select_stars_5_anchor.removeClass("stars_unselected_star_hover");

                grid_stars_select_stars_0_anchor.removeClass("stars_selected_star_hover");
                grid_stars_select_stars_1_anchor.removeClass("stars_selected_star_hover");
                grid_stars_select_stars_2_anchor.removeClass("stars_selected_star_hover");
                grid_stars_select_stars_3_anchor.removeClass("stars_selected_star_hover");
                grid_stars_select_stars_4_anchor.removeClass("stars_selected_star_hover");
                grid_stars_select_stars_5_anchor.removeClass("stars_selected_star_hover");
            }

            // TODO - this could be more efficient 
            function reset_stars_select_classes() {
                grid_stars_select_stars_0_anchor.removeClass("stars_selected_star");
                grid_stars_select_stars_1_anchor.removeClass("stars_selected_star");
                grid_stars_select_stars_2_anchor.removeClass("stars_selected_star");
                grid_stars_select_stars_3_anchor.removeClass("stars_selected_star");
                grid_stars_select_stars_4_anchor.removeClass("stars_selected_star");
                grid_stars_select_stars_5_anchor.removeClass("stars_selected_star");

                grid_stars_select_stars_0_anchor.removeClass("stars_unselected_star");
                grid_stars_select_stars_1_anchor.removeClass("stars_unselected_star");
                grid_stars_select_stars_2_anchor.removeClass("stars_unselected_star");
                grid_stars_select_stars_3_anchor.removeClass("stars_unselected_star");
                grid_stars_select_stars_4_anchor.removeClass("stars_unselected_star");
                grid_stars_select_stars_5_anchor.removeClass("stars_unselected_star");

                if(meal.rating >= 1) {
                    grid_stars_select_stars_1_anchor.attr('class', 'stars_selected_star');
                }
                else {
                    grid_stars_select_stars_1_anchor.attr('class', 'stars_unselected_star');
                }

                if(meal.rating >= 2) {
                    grid_stars_select_stars_2_anchor.attr('class', 'stars_selected_star');
                }
                else {
                    grid_stars_select_stars_2_anchor.attr('class', 'stars_unselected_star');
                }

                if(meal.rating >= 3) {
                    grid_stars_select_stars_3_anchor.attr('class', 'stars_selected_star');
                }
                else {
                    grid_stars_select_stars_3_anchor.attr('class', 'stars_unselected_star');
                }
                if(meal.rating >= 4) {
                    grid_stars_select_stars_4_anchor.attr('class', 'stars_selected_star');
                }
                else {
                    grid_stars_select_stars_4_anchor.attr('class', 'stars_unselected_star');
                }
                if(meal.rating >= 5) {
                    grid_stars_select_stars_5_anchor.attr('class', 'stars_selected_star');
                }
                else {
                    grid_stars_select_stars_5_anchor.attr('class', 'stars_unselected_star');
                }
            }

            reset_stars_select_classes();

            function star_click(rating) {
                if(rating < 0 || rating > 5)
                    return false;
                if(meal.rating == rating)
                    return false;
                meal.rating = rating;
                updateRatingAjax(meal, rating);
                return false;
            }

            grid_stars_select_stars_0_anchor.mouseenter(
                function() {
                    reset_stars_select_classes_hover();
                    grid_stars_select_stars_1_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_2_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_3_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_4_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_5_anchor.addClass("stars_unselected_star_hover");
                    }
            );

            grid_stars_select_stars_0_anchor.click(function() {
                    star_click(0);
            });

            grid_stars_select_stars_0_anchor.appendTo(grid_stars_select_stars_0);

            var grid_stars_select_stars_1 = $(dc('li'))
                .attr('class', 'star_select_menu_selection')
                .attr('name', 'star_select_menu_1')
                .attr('id', 'star_select_menu_1');

            grid_stars_select_stars_1_anchor.mouseenter(
                function() {
                    reset_stars_select_classes_hover();
                    grid_stars_select_stars_1_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_2_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_3_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_4_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_5_anchor.addClass("stars_unselected_star_hover");
                    }
            );

            grid_stars_select_stars_1_anchor.click(function() {
                    star_click(1);
            });

            grid_stars_select_stars_1_anchor.appendTo(grid_stars_select_stars_1);

            var grid_stars_select_stars_2 = $(dc('li'))
                .attr('class', 'star_select_menu_selection')
                .attr('name', 'star_select_menu_2')
                .attr('id', 'star_select_menu_2');

            grid_stars_select_stars_2_anchor.mouseenter(
                function() {
                    reset_stars_select_classes_hover();
                    grid_stars_select_stars_1_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_2_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_3_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_4_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_5_anchor.addClass("stars_unselected_star_hover");
                }
            );
            grid_stars_select_stars_2_anchor.click(function() {
                    star_click(2);
            });

            grid_stars_select_stars_2_anchor.appendTo(grid_stars_select_stars_2);

            var grid_stars_select_stars_3 = $(dc('li'))
                .attr('class', 'star_select_menu_selection')
                .attr('name', 'star_select_menu_3')
                .attr('id', 'star_select_menu_3');

            grid_stars_select_stars_3_anchor.mouseenter(
                function() {
                    reset_stars_select_classes_hover();
                    grid_stars_select_stars_1_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_2_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_3_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_4_anchor.addClass("stars_unselected_star_hover");
                    grid_stars_select_stars_5_anchor.addClass("stars_unselected_star_hover");
                }
            );

            grid_stars_select_stars_3_anchor.click(function() {
                    star_click(3);
            });
            grid_stars_select_stars_3_anchor.appendTo(grid_stars_select_stars_3);

            var grid_stars_select_stars_4 = $(dc('li'))
                .attr('class', 'star_select_menu_selection')
                .attr('name', 'star_select_menu_4')
                .attr('id', 'star_select_menu_4');

            grid_stars_select_stars_4_anchor.mouseenter(
                function() {
                    reset_stars_select_classes_hover();
                    grid_stars_select_stars_1_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_2_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_3_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_4_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_5_anchor.addClass("stars_unselected_star_hover");
                }
            );

            grid_stars_select_stars_4_anchor.click(function() {
                    star_click(4);
            });
            grid_stars_select_stars_4_anchor.appendTo(grid_stars_select_stars_4);

            var grid_stars_select_stars_5 = $(dc('li'))
                .attr('class', 'star_select_menu_selection')
                .attr('name', 'star_select_menu_5')
                .attr('id', 'star_select_menu_5');

            grid_stars_select_stars_5_anchor.mouseenter(
                function() {
                    reset_stars_select_classes_hover();
                    grid_stars_select_stars_1_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_2_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_3_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_4_anchor.addClass("stars_selected_star_hover");
                    grid_stars_select_stars_5_anchor.addClass("stars_selected_star_hover");
                }
            );

            grid_stars_select_stars_5_anchor.click(function() {
                    star_click(5);
            });
            grid_stars_select_stars_5_anchor.appendTo(grid_stars_select_stars_5);

            grid_stars_select_div.mouseleave(function() {
                reset_stars_select_classes_hover();
                reset_stars_select_classes();
            });

            grid_stars_select_stars_0.appendTo(grid_stars_select);
            grid_stars_select_stars_1.appendTo(grid_stars_select);
            grid_stars_select_stars_2.appendTo(grid_stars_select);
            grid_stars_select_stars_3.appendTo(grid_stars_select);
            grid_stars_select_stars_4.appendTo(grid_stars_select);
            grid_stars_select_stars_5.appendTo(grid_stars_select);

            grid_stars_select.appendTo(grid_stars_select_div);

            // Append this to grid_stars..
            grid_stars_select_div.appendTo(grid_stars);
            
            var grid_stars_clear = $(dc('div'))
                .attr('class', 'clear');

            // Append rating
            grid_stars_pre.appendTo(class8);
            grid_stars.appendTo(class8);
            grid_stars_clear.appendTo(class8);

            // If there's a restaurant associated with this meal, link to it
            if(restaurantId > 0 && restaurant != undefined) {
            }

            // If there's already a review, display it now
            var grid_review_pre = $(dc('div'))
                .attr('class', 'grid_3')
                .html('Review');

            var review = "(not reviewed)";

            var grid_review = $(dc('div'))
                .attr('class', 'grid_5')
                .attr('class', 'grid_review')
                .attr('id', 'pop_review')
                .attr('name', 'pop_review');


            if (meal.review != undefined && meal.review.length > 0) {
                review = meal.review;
            }

            var grid_review_textarea = $(dc('textarea'))
                .attr('class', 'review_noedit')
                .attr('class', 'review_text_area')
                .attr('id', 'review_text_int')
                .attr('cols', textAreaWidthCols)
                .attr('rows', 20)
                .attr('readonly',  true)
                .html(review);

            grid_review_textarea.click(function() {

                elm.disablekeydown();

                $('#review_text_int').removeClass('review_noedit');
                $('#review_text_int').addClass('review_edit');
                $('#review_text_int').attr('readonly', false);

                // Zap the not-reviewed placeholder
                if(meal.review == undefined || meal.review.length <= 0) {
                    //grid_review_textarea.html('');
                    $('#review_text_int').html('');
                }
            });

            grid_review_textarea.keydown(function(e){
                var code = (e.keyCode ? e.keyCode : e.which);
                switch(code) {
                    case 27:
                    case 9:
                        $('#review_text_int').blur();
                        return false;
                }
            });

            grid_review_textarea.blur(function() {
                var tmpText = $('#review_text_int').val();
                updateReviewAjax(meal, tmpText);
                if(tmpText == undefined || tmpText.length <= 0) {
                    $('#review_text_int').html('(not reviewed)');
                }
                meal.review = tmpText;

                $('#review_text_int').addClass('review_noedit');
                $('#review_text_int').removeClass('review_edit');
                $('#review_text_int').attr('readonly', true);

                elm.enablekeydown();
            });
            
            grid_review_textarea.appendTo(grid_review);

            var grid_review_clear = $(dc('div'))
                .attr('class', 'clear');

            grid_review_pre.appendTo(class8);
            grid_review.appendTo(class8);
            grid_review_clear.appendTo(class8);

            // Delete this picture logic here. 
            /*
            var deletePre = $(dc('div'))
                .attr('class', 'grid_3 delete_pre')
                .attr('id', 'delete_pre')
                .html('Delete');
            */

            var deleteLink = $(dc('div'))
                .attr('class', 'grid_8 delete_link')
                .attr('id', 'delete_link');

            var deleteAnchor = $(dc('a'))
                .attr('class', 'delete_link_anchor')
                .attr('id', 'delete_link_anchor')
                .attr('href', 'javascript:void(0)')
                .attr('title', 'Delete this Meal')
                .html('Delete this Meal');

            var deleteClear = $(dc('div'))
                .attr('class', 'clear');

            // This is a getJSON request:
            // 
            // REQUEST
            // * The username
            // * The timestamp of the deleted meal
            // * The timestamp of nextpage (if it exists)
            //
            // RESPONSE
            // * mealinfo of the new lastpicture (if it exists)
            // * new nextpage info (if it exists)
            // * previous page meals if this was the last meal on the page
            // * previous page prevpage if this was the last meal on the page
            //
            // The getJSON request and this delete-copy run concurrently.
            // It will be up to the ajax response function to load the new 
            // mealinfo and dismiss the modal.

            deleteAnchor.click(function() {

                var editGrid = $('#gridTimestamp' + meal.timestamp);
                var nextGrid = editGrid.next('.editgrid');
                var firstGrid = $('.editgrid').first();
                var lastGrid = $('.editgrid').last();
                var prevPage = 0;
                var count = 1;
                var lastPic = false;

                // If this is the last remaining picture on this page, request the previous page
                if(firstGrid.attr('id') == lastGrid.attr('id')) {
                    lastPic = true;
                    if(page_globals.prevPage > 0) {
                        count = page_globals.showMealsPerPage;
                        prevPage = page_globals.prevPage;
                    }
                    if(page_globals.nextmd > 0) {
                        debuglog('deleteAnchor.click: page_globals nextmd is set for empty page?');
                    }
                }

                $.getJSON('/deletemeal',
                    {
                        username: meal.username,
                        timestamp: meal.timestamp,
                        nextmd: page_globals.nextmd,
                        nextts: page_globals.nextts,
                        prevmd: page_globals.prevmd,
                        prevts: page_globals.prevts,
                        count: count
                    },
                    function(response) {
                        if(response.errStr != undefined && response.errStr.length > 0) {
                            if(response.errStr == "signin") {
                                window.location.replace("/signin");
                            }
                            else {
                                debuglog("getJSON response error is ", response.errStr);
                                window.location.replace("/");
                            }
                            return;
                        }

                        // If this was the last picture on the page & mealinfo is set, these meals belong
                        // to the previous page.  displayPictureGrid handles everything.
                        if(lastPic) {
                            displayPictureGrid(response.mealinfo, response.nextpage, response.prevpage);
                        }
                        else {

                            // Success case
                            if(response.mealinfo != undefined && response.mealinfo.length >= 1) {

                                // There's only one meal here- we'll be called when that loads
                                var newInternal = pictureDivInternal(response.mealinfo[0], function (showImages) {
                                    newInternal.appendTo(lastGrid);
                                    nextPrevPageLinks(parseInt(response.nextpage, 10), page_globals.prevPage);
                                });

                            }
                            else {

                                lastGrid.remove();
                                nextPrevPageLinks(parseInt(response.nextpage, 10), page_globals.prevPage);

                            }
                        }

                        // Destroy carousel
                        elm.destroy();

                        // Fade out popup
                        popup.fadeOut(0);

                        // Remove background
                        $('#maskFade').css({'display':'none'});

                        // Remove popup
                        popup.remove();

                    });

                // Walk gridpics, copying each into the last
                while(nextGrid && nextGrid.length) {

                    var intnl = editGrid.find('.editGridInternal');
                    var nxtin = nextGrid.find('.editGridInternal');

                    if(nxtin && nxtin.length) {

                        if(intnl && intnl.length) {
                            intnl.remove();
                        }
                        nxtin.remove();
                        nxtin.appendTo(editGrid);

                        // Remap id
                        var tsId = nextGrid.attr('id');
                        nextGrid.removeAttr('id');
                        editGrid.removeAttr('id');
                        editGrid.attr('id', tsId);

                        editGrid = nextGrid;
                    }

                    nextGrid = nextGrid.next();
                }
            });

            deleteAnchor.appendTo(deleteLink);

            // Append to modal
            // deletePre.appendTo(class8);
            deleteLink.appendTo(class8);
            deleteClear.appendTo(class8);

            class8.appendTo(popup);

            var maskWidth = $(window).width();
            var maskHeight = '2000px';

            $('#maskFade').css({'width':maskWidth, 'height':maskHeight, 'opacity':0.6, 'display':'block'});

            // Click handler for background
            $('#maskFade').click(function() {

                    // Destroy carousel
                    elm.destroy();

                    // Fade out popup
                    popup.fadeOut(0);

                    // Remove background
                    $('#maskFade').css({'display':'none'});

                    // Remove popup
                    popup.remove();
            });

            // Wait for the first carousel image to load
            elm.loadcarousel(function(alen) {
                var lft = 800 / 2;
                var winw = $(window).width()/2;
                var popleft = winw - lft;
                popup.css('top', 30);
                popup.css('left', popleft);
                popup.appendTo('#boxes');
                popup.fadeIn({ queue: true, duration: 500 });
            });

        }

        function showAttributes(username, timestamp) {

            $.getJSON('/ajaxgetmealinfo',
                    {
                        username: username,
                        timestamp: timestamp
                    },
                    function(response) {
                        if(response.errStr != undefined && response.errStr.length > 0) {
                            if(response.errStr == "signin") {
                                window.location.replace("/signin");
                            }
                            if(response.errStr == "wronguser") {
                                window.location.replace("/");
                            }
                            // TODO - draw an elegant page for this case
                            // TODO - elegant handling of all error - maybe have a box at the box
                            // which informs the user if/when this occurs
                            if(response.errStr == "nomeal") {
                                window.location.replace("/");
                            }
                        }
                        else {
                            showAttributesMealInfo(response.mealInfo, response.restaurantInfo, response.restaurantId);
                        }
                    });
        }

        function pictureDivInternal(meal, callback, picturegrid, lastpic) {

            // I can manipulate this directly in the delete code.
            var editInternal = $(dc('div'))
                .attr('class', 'editGridInternal');

            var center = $(dc('center'));
            center.appendTo(editInternal);

            var mealtxt = meal.meal.charAt(0).toUpperCase() + meal.meal.slice(1);
            var hoverDate = (MEALINFO.mealDateToDate(meal.mealDate)).toLocaleDateString();
            var hoverTxt = mealtxt + " on " + hoverDate;

            var editImageDiv = $(dc('div'));

            editImageDiv.appendTo(center);

            var onClickStr = 'showAttributes("' + meal.username + '",' + meal.timestamp + ');';

            var anchor = $(dc('a'))
                .attr('href', 'javascript:void(0)')
                .attr('onclick', onClickStr)
                .attr('title', hoverTxt);

            anchor.appendTo(editImageDiv);

            var imgSource;

            if(!meal.picInfo || meal.picInfo.length <= 0) {
                imgSource = '/images/nomeal.png';
            }
            // If there's a key picture, show that
            else if (meal.keytimestamp) {
                imgSource = '/thumbs/' + meal.username + '/' + meal.keytimestamp;
            }
            // Use the first picture
            else{
                imgSource = '/thumbs/' + meal.username + '/' + meal.picInfo[0].timestamp;
            }

            var image = $(dc('img'))
                .attr('class', 'editImage')
                .attr('src', imgSource);

            if(callback) {
                image.on('load.picdivinternal', function() {
                    image.off('load.picdivinternal');
                    callback(picturegrid, lastpic);
                });
            }

            image.appendTo(anchor);

            var titletext = $(dc('div'))
                .attr('class', 'titleText');

            if(meal.title != undefined && meal.title.length > 0) {
                titletext.html(meal.title);
            }
            else {
                titletext.html('untitled');
            }

            titletext.appendTo(center);

            var picturecountstring;

            if(meal.picInfo.length == 1) {
                picturecountstring = "1 picture";
            }
            else {
                picturecountstring = meal.picInfo.length + " pictures";
            }

            var picturecount = $(dc('div'))
                .attr('class', 'picturecount')
                .html(picturecountstring);

            picturecount.appendTo(center);

            return editInternal;
        }

        function pictureDiv(meal, callback, pictureGrid, lastpic) {

            var tsId = 'gridTimestamp' + meal.timestamp;

            // Id this with both an index and a timestamp
            var editgrid = $(dc('div'))
                .attr('id', tsId)
                .attr('class', 'grid_4 editheight editgrid');

            // Create an internal pictureDiv that I can switchout in the delete code
            var editInternal = pictureDivInternal(meal, callback, pictureGrid, lastpic);

            editInternal.appendTo(editgrid);

            // Return the top-level object
            return editgrid;
        }

        function nextPrevPageLinks(nextpage, prevpage) {
            var prevGrid;
            var nextGrid;
            var createdPrev=false;
            var createdNext=false;
            var nextPrev;

            if(
                (undefined == nextpage || nextpage <= 0) &&
                (undefined == prevpage || prevpage <= 0)
            )
            {
                return;
            }

            if(undefined != prevpage && prevpage > 0) {
                prevGrid = $(dc('div'))
                    .attr('class', 'grid_2');

                var prevCenter = $(dc('center'));

                // TODO - maybe change the href to an onclick ..?
                var prevAnchor = $(dc('a'))
                    .attr('href', 'javascript:void(0)')
                    .html('Previous Page');

                prevAnchor.click(function() {
                    drawPrevMeals(prevpage);
                });

                prevCenter.appendTo(prevGrid);
                prevAnchor.appendTo(prevCenter);
                createdPrev = true;
            }

            if(undefined != nextpage && nextpage > 0) {
                nextGrid = $(dc('div'))
                    .attr('class', 'grid_2');
                
                var nextCenter = $(dc('center'));

                var nextAnchor = $(dc('a'))
                    .attr('href', 'javascript:void(0)')
                    .html('Next Page');
                    
                nextAnchor.click(function() {
                    drawNextMeals(nextpage);
                });

                nextCenter.appendTo(nextGrid);
                nextAnchor.appendTo(nextCenter);
                createdNext = true;
            }

            if(createdPrev && !createdNext) {
                prevGrid.addClass('suffix_10');
            }

            if(!createdPrev && createdNext) {
                nextGrid.addClass('prefix_10');
            }

            if(createdPrev && createdNext) {
                prevGrid.addClass('suffix_4');
                nextGrid.addClass('prefix_4');
            }

            var clearnextprev = $(dc('div'))
                .attr('class', 'clear');

            nextPrev = $('#nextprev');
            nextPrev.empty();

            if(createdPrev) {
                prevGrid.appendTo(nextPrev);
            }

            if(createdNext) {
                nextGrid.appendTo(nextPrev);
            }

            clearnextprev.appendTo(nextPrev);

            // Update globals
            page_globals.nextPage = nextpage;
            page_globals.prevPage = prevpage;
        }

        function pictureGridInner(mealinfo, showmeals, callback)
        {
            var pictureGrid = $(dc('div'))
                .attr('class', 'pictureGrid');


            for(cnt = 0 ; cnt < showmeals; cnt++) {
                if(cnt < showmeals) {
                    var meal = mealinfo[cnt];
                    var gridpic = pictureDiv(meal, callback, pictureGrid, showmeals);

                    gridpic.appendTo(pictureGrid);

                    if(cnt % 3 == 2) {
                        var divclear = $(dc('div'))
                            .attr('class', 'clear');
                        divclear.appendTo(pictureGrid);
                    }
                }
            }

            return pictureGrid; 
        }

        function displayPictureGrid(mealinfo, nextpage, prevpage) {

            var loaded = 0;
            
            if(mealinfo != undefined && mealinfo.length > 0) {

                // Determine last picture
                var endpic = (mealinfo.length < page_globals.showMealsPerPage) ? 
                    mealinfo.length : page_globals.showMealsPerPage;

                // Create the grid
                var pictureGridNew = pictureGridInner(mealinfo, endpic, function (showImages) {
                    loaded++;

                    if(loaded == endpic) {

                        $('#pictureGrid').remove();
                        pictureGridNew.css({'display': 'none'});
                        pictureGridNew.attr('id', 'pictureGrid');
                        pictureGridNew.appendTo($('#pictureGridDiv'));
                        pictureGridNew.css({'display': 'block'});
                        nextPrevPageLinks(nextpage, prevpage);
                    }
                });
            }
            else {
                // TODO - if this is the first time that a user has logged on, 
                // maybe a friendly 'To get you started' popup .. ?
                // Make this a pop-up - something that's informative.  It'll
                // be something you just dismiss.
                $('#pictureGrid').empty();
                $('#pictureGridDiv').html('<center><b>No Meals to View</b><center>');
            }

        }

        function drawNextMeals(nextpage) {

            // Make this an ajax request that will return enough information
            $.getJSON('/editpagenext',
                    {
                        username: page_globals.username,
                        nextpage: nextpage,
                        count: page_globals.showMealsPerPage
                    },
                    function(response) {
                        if(response.errStr != undefined && response.errStr.length > 0) {
                            // Send this error to a space at the top..
                            debuglog('editpagenext error: ' + response.errStr);
                        }
                        else {
                            displayPictureGrid(response.mealinfo, response.nextpage, response.prevpage);
                        }
                    });
            return 0;
        }

        function drawPrevMeals(prevpage) {
            $.getJSON('/editpageprev',
                    {
                        username: page_globals.username,
                        prevpage: prevpage,
                        count: page_globals.showMealsPerPage
                    },
                    function(response) {
                        if(response.errStr != undefined && response.errStr.length > 0) {
                            // Send this error to a space at the top..
                            debuglog('editpageprev error: ' + response.errStr);
                        }
                        else {
                            displayPictureGrid(response.mealinfo, response.nextpage, response.prevpage);
                        }
                    });
            return 0;
        }

        $(document).ready(function() {
            $.ajaxSetup ({ cache: false });

            // Add an easing function
            var minfo = [];

            function truncMeal(username, timestamp, keytimestamp, title, meal, mealDate, picInfo) {
                this.username = username;
                this.timestamp = timestamp;
                this.keytimestamp = keytimestamp;
                this.title = title;
                this.meal = meal;
                this.mealDate = mealDate;
                if(!picInfo) {
                    debuglog('picinfo is null??');
                }
                this.picInfo = picInfo;
                return this;
            }

            function truncPicInfo(timestamp, mitimestamp, thumbwidth, thumbheight)
            {
                this.timestamp = timestamp;
                this.mitimestamp = mitimestamp;
                this.thumbwidth = thumbwidth;
                this.thumbheight = thumbheight;
                return this;
            }
            
            <% 
            if( mealinfo && mealinfo.length > 0 ) { 
                for(var i = 0 ; i < mealinfo.length ; i++) {
                    var meal = mealinfo[i];

            %>
                var pinfo<%= i %> = [];
            <%

                if(meal.picInfo && meal.picInfo.length > 0) {
                    for(var j = 0 ; j < meal.picInfo.length ; j++) {
                        var pic = meal.picInfo[j];
            %>

                pinfo<%= i %> [ <%= j %> ] = new truncPicInfo(
                        <%= pic.timestamp %>,
                        <%= pic.mitimestamp %>,
                        <%= pic.width %>,
                        <%= pic.height %>
                    );
            <%
                    }
                }
            %>

            // Start meals
            minfo[<%= i %>] = new truncMeal(
                    "<%= meal.username %>",
                    <%= meal.timestamp %>,
                    <%= meal.keytimestamp %>,
                    "<%= meal.title %>",
                    "<%= meal.meal %>",
                    <%= meal.mealDate %>,
                    pinfo<%= i %>);
            <%
                }
            }
            %>

            displayPictureGrid(minfo, page_globals.nextPage, page_globals.prevPage);
    });


    </script>


        <div class="boxesClass" id="boxes">
        <div class="container_12" id="boxes_container">

            <div class="grid_2 prefix_10">
                <!-- maybe a menu here.. ? -->
                <a href='javascript:void(0)' onclick='newMealPopup()'>New Meal</a>
            </div>
            <div class="clear"></div>

            <div class="grid_2 prefix_10">
                <div id='deleteModeDiv'> </div>
                <!-- Not sure about 'deletemode' yet -->
            </div>
            <div class="clear"></div>

            <div class="grid_2 prefix_10">
                <!-- maybe a menu here.. ? -->
                <a href="/signout">Logout</a>
            </div>
            <div class="clear"></div>
            <br><br>

            <div class='pictureGridDiv' id='pictureGridDiv' name='pictureGridDiv'>
                <div class='pictureGrid' id='pictureGrid' name='pictureGrid'>
                </div>
            </div>

            <div class='nextprev' id='nextprev' name='nextprev'>
            </div>

        </div> <!-- container_12 -->
        </div> <!-- boxes -->
        <div id="maskFade" class="maskClass"></div>
        <div id="hiddenElements" class="hiddenElements" name="hiddenElements"></div>
    </body>
</html>
